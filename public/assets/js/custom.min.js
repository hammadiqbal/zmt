$(function() {
    "use strict";
    $(function() {
        $(".preloader").fadeOut();
    }), jQuery(document).on("click", ".mega-dropdown", function(i) {
        i.stopPropagation();
    });
    var i = function() {
        (window.innerWidth > 0 ? window.innerWidth : this.screen.width) < 1170 ? ($("body").addClass("mini-sidebar"),
        $(".navbar-brand span").hide(), $(".scroll-sidebar, .slimScrollDiv").css("overflow-x", "visible").parent().css("overflow", "visible"),
        $(".sidebartoggler i").addClass("ti-menu")) : ($("body").removeClass("mini-sidebar"),
        $(".navbar-brand span").show());
        var i = (window.innerHeight > 0 ? window.innerHeight : this.screen.height) - 1;
        (i -= 70) < 1 && (i = 1), i > 70 && $(".page-wrapper").css("min-height", i + "px");
    };
    $(window).ready(i), $(window).on("resize", i), $(".sidebartoggler").on("click", function() {
        $("body").hasClass("mini-sidebar") ? ($("body").trigger("resize"), $(".scroll-sidebar, .slimScrollDiv").css("overflow", "hidden").parent().css("overflow", "visible"),
        $("body").removeClass("mini-sidebar"), $(".navbar-brand span").show()) : ($("body").trigger("resize"),
        $(".scroll-sidebar, .slimScrollDiv").css("overflow-x", "visible").parent().css("overflow", "visible"),
        $("body").addClass("mini-sidebar"), $(".navbar-brand span").hide());
    }), $(".fix-header .topbar").stick_in_parent({}), $(".nav-toggler").click(function() {
        $("body").toggleClass("show-sidebar"), $(".nav-toggler i").toggleClass("mdi mdi-menu"),
        $(".nav-toggler i").addClass("mdi mdi-close");
    }), $(".search-box a, .search-box .app-search .srh-btn").on("click", function() {
        $(".app-search").toggle(200);
    }), $(".right-side-toggle").click(function() {
        $(".right-sidebar").slideDown(50), $(".right-sidebar").toggleClass("shw-rside");
    }), $(".floating-labels .form-control").on("focus blur", function(i) {
        $(this).parents(".form-group").toggleClass("focused", "focus" === i.type || this.value.length > 0);
    }).trigger("blur"), $(function() {
        for (var i = window.location, o = $("ul#sidebarnav a").filter(function() {
            return this.href == i;
        }).addClass("active").parent().addClass("active"); ;) {
            if (!o.is("li")) break;
            o = o.parent().addClass("in").parent().addClass("active");
        }
    }), $(function() {
        $('[data-toggle="tooltip"]').tooltip();
    }), $(function() {
        $('[data-toggle="popover"]').popover();
    }), $(function() {
        $("#sidebarnav").metisMenu();
    }), $(".scroll-sidebar").slimScroll({
        position: "left",
        size: "5px",
        height: "100%",
        color: "#dcdcdc"
    }), $(".message-center").slimScroll({
        position: "right",
        size: "5px",
        color: "#dcdcdc"
    }), $(".aboutscroll").slimScroll({
        position: "right",
        size: "5px",
        height: "80",
        color: "#dcdcdc"
    }), $(".message-scroll").slimScroll({
        position: "right",
        size: "5px",
        height: "570",
        color: "#dcdcdc"
    }), $(".chat-box").slimScroll({
        position: "right",
        size: "5px",
        height: "470",
        color: "#dcdcdc"
    }), $(".slimscrollright").slimScroll({
        height: "100%",
        position: "right",
        size: "5px",
        color: "#dcdcdc"
    }), $("body").trigger("resize"), $(".list-task li label").click(function() {
        $(this).toggleClass("task-done");
    }), $("#to-recover").on("click", function() {
        $("#loginform").slideUp(), $("#recoverform").fadeIn();
    }), $('a[data-action="collapse"]').on("click", function(i) {
        i.preventDefault(), $(this).closest(".card").find('[data-action="collapse"] i').toggleClass("ti-minus ti-plus"),
        $(this).closest(".card").children(".card-body").collapse("toggle");
    }), $('a[data-action="expand"]').on("click", function(i) {
        i.preventDefault(), $(this).closest(".card").find('[data-action="expand"] i').toggleClass("mdi-arrow-expand mdi-arrow-compress"),
        $(this).closest(".card").toggleClass("card-fullscreen");
    }), $('a[data-action="close"]').on("click", function() {
        $(this).closest(".card").removeClass().slideUp("fast");
    });
    // $(document).on('click', function (e) {

    //     if (!$('.popoverTrigger').is(e.target) && $('.popoverTrigger').has(e.target).length === 0 && $('.popover').has(e.target).length === 0) {
    //     $('.popoverTrigger').popover('hide');
    //     }
    // });
    // $(document).on('click', '.popoverTrigger', function(e) {
    //     $('.popoverTrigger').not(this).popover('hide');
    //     $(this).popover('toggle');
    //     e.stopPropagation();
    // });
    $(document).on('click', function(e) {
        if (!$('.popoverTrigger').is(e.target) && $('.popoverTrigger').has(e.target).length === 0 && $('.popover').has(e.target).length === 0) {
            $('.popoverTrigger').popover('hide');
        }
    });

    $(document).on('click', '.popoverTrigger', function(e) {
        var $this = $(this);
        if (!$this.data('bs.popover')) {
            $this.popover({
                trigger: 'click',
                html: true,
                placement: 'right'
            });
        }
        $('.popoverTrigger').not($this).popover('hide');
        if ($this.hasClass('show')) {
            $this.popover('hide');
        } else {
            $this.popover('show');
        }
        e.stopPropagation();
    });

    $.fn.dataTable.ext.errMode = 'none';

});

$(function(){
  var $tooltip = $('<div class="custom-tooltip"></div>').appendTo('body').hide();
  $(document)
    .on('mouseenter', '.balance-row', function(){
        var $row = $(this),
        org  = $row.data('org-balance'),
        site = $row.data('site-balance');
        locs = $row.data('loc-balance');
        brand = $row.data('brand');
        batch = $row.data('batch');
        expiry = $row.data('expiry');
        var locText = '';

        if (Array.isArray(locs)) {
            locText = locs.join('<br>');
        }

        var extraInfo = '';
        if (brand) extraInfo += '<strong>Brand:</strong> ' + brand;
        if (batch) extraInfo += '<br><strong>Batch:</strong> ' + batch;
        if (expiry) extraInfo += '<br><strong>Expiry:</strong> ' + expiry + '<hr class="mt-1 mb-1">';

        $tooltip
        .html(extraInfo + 'Org Balance: ' + org + '<br>Site Balance: ' + site + '<br>' +locText)
        .fadeIn(150);
        //   $tooltip
        //     .html(
        //         '<strong>Org Balance:</strong> ' + org +
        //         '<br><strong>Site Balance:</strong> ' + site +
        //         '<br>' + locText +
        //         extraInfo
        //     ).fadeIn(150);
    })
    // move it with the cursor
    .on('mousemove', '.balance-row', function(e){
        $tooltip.css({
        top:  e.pageY + 12,
        left: e.pageX + 12
      });
    })
    // hide when leaving
    .on('mouseleave', '.balance-row', function(){
        $tooltip.fadeOut(100);
    });
});

$(function(){
    var $tooltip = $('<div class="custom-tooltip"></div>').appendTo('body').hide();

    $(document)
    .on('mouseenter', '.other-transaction-balance', function(){
        var $row = $(this);

        // Get all balances
        var orgBalance = $row.data('org-balance');
        var sourceSiteBalance = $row.data('source-site-balance');
        var sourceLocBalance = $row.data('source-loc-balance');
        var destinationSiteBalance = $row.data('destination-site-balance');
        var destinationLocBalance = $row.data('destination-loc-balance');
        var batchDetails = $row.data('batch-details');
        
        // Fallback to individual data attributes if batchDetails is not available
        var brand = $row.data('brand');
        var batch = $row.data('batch');
        var expiry = $row.data('expiry');

        // Helper to check if a value is empty or N/A
        function isNA(val) {
            return val === undefined || val === null || val === "" || val === "N/A";
        }
        
        // Parse location balances if they are JSON strings
        function parseLocBalance(val) {
            if (isNA(val)) return "N/A";
            try {
                var arr = typeof val === "string" ? JSON.parse(val) : val;
                if (Array.isArray(arr) && arr.length > 0) {
                    return arr.join('<br>');
                }
            } catch(e) {}
            return "N/A";
        }

        // Parse batch details from JSON
        function parseBatchDetails(val) {
            if (isNA(val)) return null;
            try {
                var arr = typeof val === "string" ? JSON.parse(val) : val;
                if (Array.isArray(arr) && arr.length > 0) {
                    return arr;
                }
            } catch(e) {
                console.error('Error parsing batch details:', e);
            }
            return null;
        }

        // Check if all balances are N/A
        if (
            isNA(orgBalance) &&
            isNA(sourceSiteBalance) &&
            isNA(parseLocBalance(sourceLocBalance)) &&
            isNA(destinationSiteBalance) &&
            isNA(parseLocBalance(destinationLocBalance))
        ) {
            $tooltip.html('Balance: N/A').fadeIn(150);
            return;
        }

        // Build the tooltip HTML
        var html = '';
        
        // Handle batch details - show all batches if available
        var batchDetailsArray = parseBatchDetails(batchDetails);
        if (batchDetailsArray && batchDetailsArray.length > 0) {
            // Check if there are multiple brands
            // var uniqueBrands = [];
            // for (var i = 0; i < batchDetailsArray.length; i++) {
            //     if (batchDetailsArray[i].brand && uniqueBrands.indexOf(batchDetailsArray[i].brand) === -1) {
            //         uniqueBrands.push(batchDetailsArray[i].brand);
            //     }
            // }
            // var hasMultipleBrands = uniqueBrands.length > 1;
            var hasMultipleBrands = false;
            if(batchDetailsArray.length > 1)
            {
                hasMultipleBrands = true;
            }
            
            // Show all batches
            for (var i = 0; i < batchDetailsArray.length; i++) {
                var batchInfo = batchDetailsArray[i];
                if (i > 0) html += '<br>'; // Add line break between batches
                if (batchInfo.brand) html += '<strong>Brand:</strong> ' + batchInfo.brand;
                if (batchInfo.batch) html += '<br><strong>Batch:</strong> ' + batchInfo.batch;
                if (batchInfo.expiry) html += '<br><strong>Expiry:</strong> ' + batchInfo.expiry;
                
                // Show responded quantity only if there are multiple brands
                if (hasMultipleBrands && batchInfo.respondedQty !== undefined) {
                    html += '<br><strong>Responded Qty:</strong> ' + batchInfo.respondedQty;
                }
                
                html += '<hr class="mt-1 mb-1">';
            }
        } else {
            // Fallback to individual data attributes
            if (brand) html += '<strong>Brand:</strong> ' + brand;
            if (batch) html += '<br><strong>Batch:</strong> ' + batch;
            if (expiry) html += '<br><strong>Expiry:</strong> ' + expiry + '<hr class="mt-1 mb-1">';
        }

        html += '<strong>Org Balance:</strong> ' + (isNA(orgBalance) ? "N/A" : orgBalance);

        // Source section
        if (!isNA(sourceSiteBalance) || !isNA(parseLocBalance(sourceLocBalance))) {
            html += '<br><strong>Source</strong>';
            html += '<div style="margin-left:10px;">';
            html += '<strong>Site:</strong> ' + (isNA(sourceSiteBalance) ? "N/A" : sourceSiteBalance);
            html += '<br>' + parseLocBalance(sourceLocBalance);
            html += '</div>';
        }

        // Destination section
        if (!isNA(destinationSiteBalance) || !isNA(parseLocBalance(destinationLocBalance))) {
            html += '<br><strong>Destination</strong>';
            html += '<div style="margin-left:10px;">';
            html += '<strong>Site:</strong> ' + (isNA(destinationSiteBalance) ? "N/A" : destinationSiteBalance);
            html += '<br>' + parseLocBalance(destinationLocBalance);
            html += '</div>';
        }

        $tooltip.html(html).fadeIn(150);
    })
    .on('mousemove', '.other-transaction-balance', function(e){
        $tooltip.css({
            top:  e.pageY + 12,
            left: e.pageX + 12
        });
    })
    .on('mouseleave', '.other-transaction-balance', function(){
        $tooltip.fadeOut(100);
    });
});


function SerializeForm(formElement) {
    var data = [];
    $(formElement).find('input, select, textarea').each(function() {
        var inputName = $(this).attr('name');
        var inputValue;
        if ($(this).hasClass('selecter')) {
            inputValue = $(this).select2('val');
        } else {
            inputValue = $(this).val();
        }
        data.push({
            name: inputName,
            value: inputValue
        });
    });
    return data;
}

//Authentication
$(document).ready(function() {
    $('#loginform').submit(function(e) {
        e.preventDefault();
        var formData = $(this).serializeArray();
        $(formData).each(function(i, field){
            if(field.value == '')
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                resp = false;
            }
            else{
                resp = true;
            }
        });
        if(resp != false)
        {
            $.ajax({
                url: "authenticate",
                method: 'POST',
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: formData,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {
                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                        var fieldName = fieldName;
                    }

                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        var redirect = fieldErrors;
                        Swal.fire({
                            title: 'Authentication Successful',
                            html: '<h2>Redirecting...</h2>',
                            icon: 'success',
                            showConfirmButton: false,
                            timer: 1000,
                            timerProgressBar: true,
                            didClose: () => {
                                 window.location.href = redirect;
                            }
                        });
                    }
                    else if (fieldName == 'loggedin')
                        {
                            var redirect = fieldErrors;
                            Swal.fire({
                                title: 'You are already logged in.',
                                html: '<h2>Redirecting to your dashboard...</h2>',
                                icon: 'info',
                                showConfirmButton: false,
                                timer: 2000,
                                timerProgressBar: true,
                                didClose: () => {
                                     window.location.href = redirect;
                                }
                            });
                        }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        });
                    }
                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
});
//Authentication

//Pwd Update
$(document).ready(function() {
    $('#u_profile').submit(function(e) {
        e.preventDefault();
        var formData = $(this).serializeArray();
        $(formData).each(function(i, field){
            if(field.value == '')
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('urequirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("urequirefield");
                })
                resp = false;
            }
            else{
                resp = true;
            }
        });

        if(resp != false)
        {
            $.ajax({
                url: "/updatepwd",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: formData,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {
                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                        var fieldName = fieldName;
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            title: fieldErrors,
                            html: '<h2>Please log in again</h2>',
                            icon: fieldName,
                            showConfirmButton: false,
                            timer: 2000,
                            timerProgressBar: true,
                            didOpen: () => {
                                $.ajax({
                                    url: "/logout",
                                    method: "GET",
                                    success: function(response) {
                                        $('#u_profile')[0].reset();
                                        window.location.href = '/';
                                    }
                                });
                            }
                        });

                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#u_profile')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }


    });
});
//Pwd Update

// Forget Password
$('#recoverform').on('submit', function (e) {
    e.preventDefault();
    var formData = $(this).serializeArray();
    $(formData).each(function(i, field){
        if(field.value == '')
        {
            var FieldName = field.name;
            var FieldID = '#'+FieldName + "_error";
            $(FieldID).text("This field is required");
            $( 'input[name= "' +FieldName +'"' ).addClass('urequirefield');
            $( 'input[name= "' +FieldName +'"' ).focus(function() {
                $(FieldID).text("");
                $('input[name= "' +FieldName +'"' ).removeClass("urequirefield");
            })
            resp = false;
        }
        else{
            resp = true;
        }
    });

    if(resp != false)
    {
        $.ajax({
            url: "forgetPwd",
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function(response) {
                console.log(response);
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }

                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                    $('#recoverform')[0].reset();
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $("#loginform").show();
                            $("#recoverform").hide();
                        }
                    });
                }
                else if (fieldName == 'info')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#recoverform')[0].reset();
                        }
                    });
                }
            },
            error: function(error) {
                if (error.responseJSON && error.responseJSON.errors) {
                    var errors = error.responseJSON.errors;
                    for (var fieldName in errors) {
                        var fieldErrors = errors[fieldName];
                        for (var i = 0; i < fieldErrors.length; i++) {
                            fieldName = '#'+fieldName + '_error';
                            $(fieldName).text(fieldErrors[i]);
                        }
                    }
                    Swal.close();
                }
            }
        });
    }
});
// Forget Password

//Functions
function capitalizeFirstLetterOfEachWord(str) {
    return str.replace(/\b\w/g, function(char) {
        return char.toUpperCase();
    });
}

// function OrgChangeSites(orgSelector, siteSelector, formSelector) {
function OrgChangeSites(orgSelector, siteSelector, formSelector, eventNamespace = 'OrgChangeSites') {
    // $(orgSelector).change(function() {
    const changeEvent = `change.${eventNamespace}`;
    $(orgSelector).off(changeEvent).on(changeEvent, function () {
    // $(orgSelector).off('change.OrgChangeSites').on('change.OrgChangeSites', function(){
        var orgId = $(this).val();
        if (orgId) {
            const $site = $(siteSelector);
            const $form = $(formSelector);
            fetchOrganizationSites(orgId, siteSelector, function(data) {
                if (data && data.length > 0) {
                    var selectText = '';
                    if(siteSelector == '#im_destination')
                    {
                        selectText = 'Select Destination';
                    }
                    else if(siteSelector == '#im_origin')
                    {
                        selectText = 'Select Origin';
                    }
                    else if(siteSelector == '#emp_site')
                    {
                        selectText = 'Select Head Count Site';
                    }
                    else if(siteSelector == '#rmt_source_site')
                    {
                        selectText = 'Select Source Site';
                    }
                     else if(siteSelector == '#rmt_destination_site')
                    {
                        selectText = 'Select Destination Site';
                    }
                    else{
                        selectText = 'Select Site';
                    }
                    $site.empty()
                         .append('<option selected disabled value="">'+selectText+'</option>')
                         .append(data.map(({id, name}) => `<option value="${id}">${name}</option>`).join(''))
                         .prop('disabled', false)
                         .find('option:contains("Loading...")').remove();
                } else {
                    Swal.fire({
                        text: 'Sites are not available for selected Organization',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $site.empty()
                            .append('<option selected disabled value="">'+selectText+'</option>')
                            .prop('disabled', true);
                        }
                    });
                }
            });
        }
    });
}

function OrgChangeReferralSites(orgSelector, referralSite, formSelector) {
    // $(orgSelector).off(changeEvent).on(changeEvent, function () {
    $(orgSelector).off('change.OrgChangeReferralSites').on('change.OrgChangeReferralSites', function(){
        var orgId = $(this).val();
        if (orgId) {
            const $site = $(referralSite);
            const $form = $(formSelector);
            fetchOrganizationReferralSite(orgId, referralSite, function(data) {
                if (data && data.length > 0) {
                    console.log(data);
                    $site.empty()
                         .append('<option selected disabled value="">Select Referral Site</option>')
                         .append(data.map(({id, name}) => `<option value="${id}">${name}</option>`).join(''))
                         .prop('disabled', false)
                         .find('option:contains("Loading...")').remove();
                } else {
                    Swal.fire({
                        text: 'Referral Sites are not available for selected Organization',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $site.empty()
                            .append('<option selected disabled value="">'+selectText+'</option>')
                            .prop('disabled', true);
                        }
                    });
                }
            });
        }
    });
}

function OrgChangeInventoryGeneric(orgSelector, genericSelector, formSelector,condition = null) {
    // $(orgSelector).change(function() {
    $(orgSelector).off('change.OrgChangeInventoryGeneric').on('change.OrgChangeInventoryGeneric', function(){
    // $(orgSelector).on('change.OrgChangeInventoryGeneric', function(){
        var orgId = $(this).val();
        if (orgId) {
            const $generic = $(genericSelector);
            const $form = $(formSelector);
            fetchOrganizationItemGeneric(orgId, genericSelector,condition, function(data) {
                if (data && data.length > 0) {
                    $generic.empty()
                         .append('<option selected disabled value="">Select Item Generic</option>')
                         .append(data.map(({id, name}) => `<option value="${id}">${name}</option>`).join(''))
                         .prop('disabled', false)
                         .find('option:contains("Loading...")').remove();
                } else {
                    Swal.fire({
                        text: 'Item Generics are not available for selected Organization',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $generic.empty()
                            .append('<option selected disabled value="">Select Item Generic</option>')
                            .prop('disabled', true);
                        }
                    });
                }
            });
        }
    });
}

function GenericChangeBrand(genricSelector, brandSelector, formSelector) {
    // $(genricSelector).change(function() {
    $(genricSelector).off('change.GenericChangeBrand').on('change.GenericChangeBrand', function(){
        var genericId = $(this).val();
        if (genericId) {
            const $brand = $(brandSelector);
            const $form = $(formSelector);
            fetchGenericItemBrand(genericId, brandSelector, function(data) {
                if (data && data.length > 0) {
                    $brand.empty()
                         .append('<option selected disabled value="">Select Item Brand</option>')
                         .append(data.map(({id, name}) => `<option value="${id}">${name}</option>`).join(''))
                         .prop('disabled', false)
                         .find('option:contains("Loading...")').remove();
                } else {
                    Swal.fire({
                        text: 'Item Brand are not available for selected Item Generic',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $brand.empty()
                            .append('<option selected disabled value="">Select Item Brand</option>')
                            .prop('disabled', true);
                        }
                    });
                }
            });
        }
    });
}

function FetchNotActivatedCC(siteSelector, ccSelector, formSelector) {
    // $(siteSelector).change(function() {
    $(siteSelector).off('change.FetchNotActivatedCC').on('change.FetchNotActivatedCC', function(){
        var siteId = $(this).val();
        if (siteId) {
            const $CC = $(ccSelector);
            $CC.prop('disabled', false);
            $('#siteselect').hide();
            $.ajax({
                url: 'costcenter/getnotactivatedcc',
                type: 'GET',
                data: { siteId: siteId },
                success: function(resp) {
                    if(!resp || resp.length == 0)
                    {
                        Swal.fire({
                            text: 'There are no cost centers available for activation at this site.',
                            icon: 'info',
                            confirmButtonText: 'OK'
                        });
                        $CC.prop('disabled', true).val(''   );
                        $('#siteselect').show();
                    }
                    // Initialize counters for each category
                    var directCount = 1;
                    var indirectClinicalCount = 1;
                    var indirectNonClinicalCount = 1;

                    // Clear the modal body
                    $('#costCenterModal .modal-body').empty();

                    // Create the container and row structure
                    var container = $('<div>', { class: 'container-fluid' });
                    var rowHeadings = $('<div>', { class: 'row' });

                    // Create the column headings
                    var directBillingHeading = $('<div>', { class: 'col-4' }).append('<h4>Direct Billing Clinical Cost Centers</h4><hr class="mt-3 mb-3">');
                    var indirectBillingClinicalHeading = $('<div>', { class: 'col-4' }).append('<h4>Indirect Billing Clinical Cost Centers</h4><hr class="mt-3 mb-3">');
                    var indirectBillingNonClinicalHeading = $('<div>', { class: 'col-4' }).append('<h4>Indirect Billing Non-Clinical Cost Centers</h4><hr class="mt-3 mb-3">');

                    // Append the headings to the row
                    rowHeadings.append(directBillingHeading, indirectBillingClinicalHeading, indirectBillingNonClinicalHeading);

                    // Append the row to the container
                    container.append(rowHeadings);

                    // Create the row for the cost centers
                    var rowCostCenters = $('<div>', { class: 'row' });

                    // Create columns for each category
                    var directBillingCol = $('<div>', { class: 'col-4' });
                    var indirectBillingClinicalCol = $('<div>', { class: 'col-4' });
                    var indirectBillingNonClinicalCol = $('<div>', { class: 'col-4' });

                    // Populate each column with the relevant cost centers
                    resp.forEach(function(costCenter) {
                        var ccHtml = `
                        <div class="custom-checkbox mb-3">
                            ${costCenter.category === 'Direct Billing Clinical' ? directCount++ :
                            costCenter.category === 'Indirect Billing Clinical' ? indirectClinicalCount++ :
                            indirectNonClinicalCount++}.
                            <input type="checkbox" name="selectedCC[]" data-id="${costCenter.id}" data-name="${costCenter.name}" class="custom-control-input" id="cc_${costCenter.id}">
                            <label class="custom-control-label" for="cc_${costCenter.id}">
                                ${costCenter.name}
                            </label>
                        </div>`;

                        if (costCenter.category === 'Direct Billing Clinical') {
                            directBillingCol.append(ccHtml);
                        } else if (costCenter.category === 'Indirect Billing Clinical') {
                            indirectBillingClinicalCol.append(ccHtml);
                        } else if (costCenter.category === 'Indirect Billing Non-Clinical') {
                            indirectBillingNonClinicalCol.append(ccHtml);
                        }
                    });


                    if (directBillingCol.children().length === 0) {
                        directBillingCol.append('<div class="text-center">N/A</div>');
                    }
                    if (indirectBillingClinicalCol.children().length === 0) {
                        indirectBillingClinicalCol.append('<div class="text-center">N/A</div>');
                    }
                    if (indirectBillingNonClinicalCol.children().length === 0) {
                        indirectBillingNonClinicalCol.append('<div class="text-center">N/A</div>');
                    }
                    // Append the populated columns to the row
                    rowCostCenters.append(directBillingCol, indirectBillingClinicalCol, indirectBillingNonClinicalCol);

                    // Append the row to the container
                    container.append(rowCostCenters);

                    // Finally, append the entire container to the modal body
                    $('#costCenterModal .modal-body').append(container);
                },
                error: function(xhr, status, error) {
                    if (typeof errorCallback === "function") {
                        errorCallback(error);
                    }
                }
            });
        }
        else{
            $CC.prop('disabled', true);
            $('#siteselect').show();
        }
    });
}

// function FetchNotActivatedServiceLocation(siteSelector, slSelector, formSelector) {
//     $(siteSelector).change(function() {
//         var siteId = $(this).val();
//         if (siteId) {
//             const $CC = $(slSelector);
//             $CC.prop('disabled', false);
//             $('#siteselect').hide();
//             $.ajax({
//                 url: 'services/getnotactivatedsl',
//                 type: 'GET',
//                 data: { siteId: siteId },
//                 success: function(resp) {
//                     // Initialize counters for each category
//                     var inventoryCount = 1;
//                     var nonInventoryCount = 1;

//                     // Clear the modal body
//                     $('#servicelocationModal .modal-body').empty();

//                     // Create the container and row structure
//                     var container = $('<div>', { class: 'container-fluid' });
//                     var rowHeadings = $('<div>', { class: 'row' });

//                     // Create the column headings for Inventory and Non-Inventory locations
//                     var inventoryHeading = $('<div>', { class: 'col-6' }).append('<h4>Inventory Locations</h4><hr class="mt-3 mb-3">');
//                     var nonInventoryHeading = $('<div>', { class: 'col-6' }).append('<h4>Non-Inventory Locations</h4><hr class="mt-3 mb-3">');

//                     // Append the headings to the row
//                     rowHeadings.append(inventoryHeading, nonInventoryHeading);

//                     // Append the row to the container
//                     container.append(rowHeadings);

//                     // Create the row for the service locations
//                     var rowLocations = $('<div>', { class: 'row' });

//                     // Create columns for each category
//                     var inventoryCol = $('<div>', { class: 'col-6' });
//                     var nonInventoryCol = $('<div>', { class: 'col-6' });

//                     // Populate each column with the relevant service locations
//                     resp.forEach(function(location) {
//                         var locationHtml = `
//                         <div class="custom-checkbox mb-3">
//                             ${location.category === 'Inventory Locations' ? inventoryCount++ :
//                             location.category === 'Non-Inventory Locations' ? nonInventoryCount++ : ''}
//                             <input type="checkbox" name="selectedSL[]" data-id="${location.id}" data-name="${location.name}" class="custom-control-input" id="sl_${location.id}">
//                             <label class="custom-control-label" for="sl_${location.id}">
//                                 ${location.name}
//                             </label>
//                         </div>`;

//                         if (location.category === 'Inventory Locations') {
//                             inventoryCol.append(locationHtml);
//                         } else if (location.category === 'Non-Inventory Locations') {
//                             nonInventoryCol.append(locationHtml);
//                         }
//                     });

//                     // Check if columns are empty and show "N/A"
//                     if (inventoryCol.children().length === 0) {
//                         inventoryCol.append('<div>N/A</div>');
//                     }
//                     if (nonInventoryCol.children().length === 0) {
//                         nonInventoryCol.append('<div>N/A</div>');
//                     }

//                     // Append the populated columns to the row
//                     rowLocations.append(inventoryCol, nonInventoryCol);

//                     // Append the row to the container
//                     container.append(rowLocations);

//                     // Finally, append the entire container to the modal body
//                     $('#servicelocationModal .modal-body').append(container);
//                 },
//                 error: function(xhr, status, error) {
//                     console.error('Error fetching data: ', error);
//                 }
//             });
//         } else {
//             $CC.prop('disabled', true);
//             $('#siteselect').show();
//         }
//     });
// }

function FetchNotActivatedServiceLocation(siteSelector, slSelector, formSelector) {
    // $(siteSelector).change(function () {
    $(siteSelector).off('change.FetchNotActivatedServiceLocation').on('change.FetchNotActivatedServiceLocation', function(){
        var siteId = $(this).val();
        const $CC = $(slSelector);

        if (siteId) {
            $CC.prop('disabled', false);
            $('#siteselect').hide();

            $.ajax({
                url: 'services/getnotactivatedsl',
                type: 'GET',
                data: { siteId: siteId },
                success: function (resp) {
                    var inventoryCount = 0;
                    var nonInventoryCount = 0;

                    $('#servicelocationModal .modal-body').empty();

                    var container = $('<div>', { class: 'container-fluid' });
                    var rowHeadings = $('<div>', { class: 'row' });

                    // Flags for location existence
                    var hasInventory = resp.some(loc => loc.category === 'Inventory Locations');
                    var hasNonInventory = resp.some(loc => loc.category === 'Non-Inventory Locations');

                    var inventoryHeading = $('<div>', { class: 'col-6' }).append('<h4>Inventory Locations</h4><hr class="mt-3 mb-3">');
                    var nonInventoryHeading = $('<div>', { class: 'col-6' }).append('<h4>Non-Inventory Locations</h4><hr class="mt-3 mb-3">');

                    // Add "Select All" checkboxes if any exist
                    if (hasInventory) {
                        inventoryHeading.append(`
                            <div class="custom-control custom-checkbox mb-2">
                                <input type="checkbox" id="selectNotActivatedInventory"class="custom-control-input">
                                <label class="custom-control-label" for="selectNotActivatedInventory">Select All</label>
                            </div>
                        `);
                    }

                    if (hasNonInventory) {
                        nonInventoryHeading.append(`
                            <div class="custom-control custom-checkbox mb-2">
                                <input type="checkbox" id="selectNotActivatedNonInventory" class=" custom-control-input">
                                <label class="custom-control-label" for="selectNotActivatedNonInventory">Select All</label>
                            </div>
                        `);
                    }

                    rowHeadings.append(inventoryHeading, nonInventoryHeading);
                    container.append(rowHeadings);

                    var rowLocations = $('<div>', { class: 'row' });

                    // Add wrapping columns with vertical stacks
                    var inventoryCol = $('<div>', { class: 'col-6' }).append('<div class="d-flex flex-column" id="inventory-wrapper"></div>');
                    var nonInventoryCol = $('<div>', { class: 'col-6' }).append('<div class="d-flex flex-column" id="non-inventory-wrapper"></div>');

                    // Add checkboxes
                    resp.forEach(function (location) {
                        // inventoryCount++
                        // nonInventoryCount ++;
                        if (location.category === 'Inventory Locations') {
                            count = ++inventoryCount;
                        } else if (location.category === 'Non-Inventory Locations') {
                            count = ++nonInventoryCount;
                        }
                        var locationHtml = `
                            <div class="custom-control custom-checkbox mb-2 d-flex align-items-center gap-2">
                                <input type="checkbox" name="selectedSL[]"
                                    data-id="${location.id}"
                                    data-name="${location.name}"
                                    class="custom-control-input ${location.category === 'Inventory Locations' ? 'inventory-sl' : 'non-inventory-sl'}"
                                    id="sl_${location.id}">
                                <label class="custom-control-label" for="sl_${location.id}">
                                    ${location.name}
                                </label>
                            </div>
                        `;

                        if (location.category === 'Inventory Locations') {
                            inventoryCol.find('#inventory-wrapper').append(locationHtml);
                        } else if (location.category === 'Non-Inventory Locations') {
                            nonInventoryCol.find('#non-inventory-wrapper').append(locationHtml);
                        }
                    });

                    // Add N/A if no locations
                    if (inventoryCount === 0) {
                        inventoryCol.find('#inventory-wrapper').append('<div>N/A</div>');
                    }
                    if (nonInventoryCount === 0) {
                        nonInventoryCol.find('#non-inventory-wrapper').append('<div>N/A</div>');
                    }

                    rowLocations.append(inventoryCol, nonInventoryCol);
                    container.append(rowLocations);
                    $('#servicelocationModal .modal-body').append(container);

                    // Select All logic
                    $('#selectNotActivatedInventory').on('change', function () {
                        $('.inventory-sl').prop('checked', this.checked);
                    });

                    $('#selectNotActivatedNonInventory').on('change', function () {
                        $('.non-inventory-sl').prop('checked', this.checked);
                    });
                },
                error: function (xhr, status, error) {
                    console.error('Error fetching data: ', error);
                }
            });
        } else {
            $CC.prop('disabled', true);
            $('#siteselect').show();
        }
    });
}

$(document).on('change', '#selectNotActivatedInventory', function() {
    const Id = $(this).data('id');
    const isChecked = $(this).is(':checked');
    $(`input.billing-checkbox[data-id="${Id}"]`).prop('checked', isChecked);
    updateHiddenServiceLocation();
});

$(document).on('change', '#selectNotActivatedNonInventory', function() {
    const Id = $(this).data('id');
    const isChecked = $(this).is(':checked');
    $(`input.billing-checkbox[data-id="${Id}"]`).prop('checked', isChecked);
    updateHiddenServiceLocation();
});


// $(document).on('change', '#selectAllInventory', function() {
//     const Id = $(this).data('id');
//     const isChecked = $(this).is(':checked');
//     $(`input.billing-checkbox[data-id="${Id}"]`).prop('checked', isChecked);
//     updateHiddenAllServiceLocation();
// });

// $(document).on('change', '#selectAllNonInventory', function() {
//     const Id = $(this).data('id');
//     const isChecked = $(this).is(':checked');
//     $(`input.billing-checkbox[data-id="${Id}"]`).prop('checked', isChecked);
//     updateHiddenAllServiceLocation();
// });

$(document).on('change', '#selectAllInventory', function () {
  $('.inventory-sl').prop('checked', this.checked);
  updateHiddenAllServiceLocation();
});

$(document).on('change', '#selectAllNonInventory', function () {
  $('.non-inventory-sl').prop('checked', this.checked);
  updateHiddenAllServiceLocation();
});



function FetchProcedureMedicalCoding(serviceId,orgId) {
    $.ajax({
        url: '/activation/getproceduredmedicalcodes',
        type: 'GET',
        data: {
            service_id: serviceId,
            org_id: orgId
        },
        success: function(resp) {
            $('#assign-medicalcodes .modal-body').empty();
            var container = $('<div>', { class: 'container-fluid' });
            var rowHeadings = $('<div>', { class: 'row' });
            rowHeadings.append('<div class="col-12"><h4>Medical Coding</h4><hr class="mt-3 mb-3"></div>');
            container.append(rowHeadings);

            var rowmedicalCoding = $('<div>', { class: 'row' });
            var allmedicalCoding = $('<div>', { class: 'col-12' });

            resp.ProceduresMedicalCoding.forEach(function(medicalCoding) {
                var checked = '';
                if (resp.mappedICDArray.includes(medicalCoding.id.toString())) {
                    checked = 'checked';
                }
                var locationHtml = `
                <div class="custom-checkbox mb-3">
                    <input type="checkbox" name="selectedMC[]" data-id="${medicalCoding.id}" data-name="${medicalCoding.description}" class="custom-control-input" id="mc_${medicalCoding.id}" ${checked}>
                    <label class="custom-control-label" for="mc_${medicalCoding.id}">
                    ${medicalCoding.code} (${medicalCoding.description})
                    </label>
                </div>`;
                allmedicalCoding.append(locationHtml);
            });

            // If no ICD codes found, display "N/A"
            if (allmedicalCoding.children().length === 0) {
                allmedicalCoding.append('<div>N/A</div>');
            }

            rowmedicalCoding.append(allmedicalCoding);
            container.append(rowmedicalCoding);
            $('#assign-medicalcodes .modal-body').append(container);
        },
        // success: function(resp) {
        //     $('#assign-medicalcodes .modal-body').empty();
        //     var container = $('<div>', { class: 'container-fluid' });
        //     var rowHeadings = $('<div>', { class: 'row' });
        //     var medicalCoding;
        //     // var medicalCoding = $('<div>', { class: 'col-12' }).append('<h4>Medical Coding</h4><hr class="mt-3 mb-3">');
        //     rowHeadings.append(medicalCoding);
        //     container.append(rowHeadings);
        //     var rowmedicalCoding = $('<div>', { class: 'row' });
        //     var allmedicalCoding = $('<div>', { class: 'col-12' });
        //     resp.forEach(function(medicalCoding) {
        //         var locationHtml = `
        //         <div class="custom-checkbox mb-3">
        //             <input type="checkbox" name="selectedMC[]" data-id="${medicalCoding.id}" data-name="${medicalCoding.description}" class="custom-control-input" id="mc_${medicalCoding.id}">
        //             <label class="custom-control-label" for="mc_${medicalCoding.id}">
        //             ${medicalCoding.code} (${medicalCoding.description})
        //             </label>
        //         </div>`;
        //         allmedicalCoding.append(locationHtml);
        //     });
        //     if (allmedicalCoding.children().length === 0) {
        //         allmedicalCoding.append('<div>N/A</div>');
        //     }
        //     rowmedicalCoding.append(allmedicalCoding);
        //     container.append(rowmedicalCoding);
        //     $('#assign-medicalcodes .modal-body').append(container);
        // },
        error: function(xhr, status, error) {
            console.error('Error fetching data: ', error);
        }
    });
}

function FetchAllServiceLocation(slSelector, formSelector) {
    const $ServiceLocation = $(slSelector);
    $ServiceLocation.prop('disabled', false);
    $.ajax({
        url: '/services/getallsl',
        type: 'GET',
        success: function(resp) {
            // Initialize counters for each category
            var inventoryCount = 0;
            var nonInventoryCount = 0;

            // Clear the modal body
            $('#invLocationModal .modal-body').empty();

            // Create the container and row structure
            var container = $('<div>', { class: 'container-fluid' });
            var rowHeadings = $('<div>', { class: 'row' });

            // Flags for location existence
            var hasInventory = resp.some(loc => loc.category === 'Inventory Locations');
            var hasNonInventory = resp.some(loc => loc.category === 'Non-Inventory Locations');

            // Create the column headings for Inventory and Non-Inventory locations
            var inventoryHeading = $('<div>', { class: 'col-6' }).append('<h4>Inventory Locations</h4><hr class="mt-3 mb-3">');
            var nonInventoryHeading = $('<div>', { class: 'col-6' }).append('<h4>Non-Inventory Locations</h4><hr class="mt-3 mb-3">');

            // Add "Select All" checkboxes if any exist
            if (hasInventory) {
                inventoryHeading.append(`
                    <div class="custom-control custom-checkbox mb-2">
                        <input type="checkbox" id="selectAllInventory"class="custom-control-input">
                        <label class="custom-control-label" for="selectAllInventory">Select All</label>
                    </div>
                `);
            }

            if (hasNonInventory) {
                nonInventoryHeading.append(`
                    <div class="custom-control custom-checkbox mb-2">
                        <input type="checkbox" id="selectAllNonInventory" class=" custom-control-input">
                        <label class="custom-control-label" for="selectAllNonInventory">Select All</label>
                    </div>
                `);
            }

            // Append the headings to the row
            rowHeadings.append(inventoryHeading, nonInventoryHeading);

            // Append the row to the container
            container.append(rowHeadings);

            // Create the row for the service locations
            var rowLocations = $('<div>', { class: 'row' });

            // Create columns for each category
            var inventoryCol = $('<div>', { class: 'col-6' }).append('<div id="inventory-wrapper" class="d-flex flex-column"></div>');
            var nonInventoryCol = $('<div>', { class: 'col-6' }).append('<div id="non-inventory-wrapper" class="d-flex flex-column"></div>');

            // Populate each column with the relevant service locations
            resp.forEach(function(location) {
                if (location.category === 'Inventory Locations') {
                    count = ++inventoryCount;
                } else if (location.category === 'Non-Inventory Locations') {
                    count = ++nonInventoryCount;
                }
                var locationHtml = `
                            <div class="custom-control custom-checkbox mb-2 d-flex align-items-center gap-2">
                                <input type="checkbox" name="selectedSL[]"
                                    data-id="${location.id}"
                                    data-name="${location.name}"
                                    class="custom-control-input ${location.category === 'Inventory Locations' ? 'inventory-sl' : 'non-inventory-sl'}"
                                    id="sl_${location.id}">
                                <label class="custom-control-label" for="sl_${location.id}">
                                    ${location.name}
                                </label>
                            </div>
                        `;

                        if (location.category === 'Inventory Locations') {
                            inventoryCol.find('#inventory-wrapper').append(locationHtml);
                        } else if (location.category === 'Non-Inventory Locations') {
                            nonInventoryCol.find('#non-inventory-wrapper').append(locationHtml);
                        }
            });

            // Add N/A if no locations
            if (inventoryCount === 0) {
                inventoryCol.find('#inventory-wrapper').append('<div>N/A</div>');
            }
            if (nonInventoryCount === 0) {
                nonInventoryCol.find('#non-inventory-wrapper').append('<div>N/A</div>');
            }


            // Append the populated columns to the row
            rowLocations.append(inventoryCol, nonInventoryCol);

            // Append the row to the container
            container.append(rowLocations);

            // Finally, append the entire container to the modal body
            $('#invLocationModal .modal-body').append(container);

            syncModalFromActiveField();

            // $('#selectAllInventory').on('change', function () {
            //     $('.inventory-sl').prop('checked', this.checked);
            // });

            // $('#selectAllNonInventory').on('change', function () {
            //     $('.non-inventory-sl').prop('checked', this.checked);
            // });
        },
        error: function(xhr, status, error) {
            console.error('Error fetching data: ', error);
        }

    });
}


function OrgChangeItemCategory(orgSelector, catSelector, formSelector) {
    // $(orgSelector).change(function() {
    $(orgSelector).off('change.OrgChangeItemCategory').on('change.FetchNotAOrgChangeItemCategoryctivatedCC', function(){
        var orgId = $(this).val();
        if (orgId) {
            const $cat = $(catSelector);
            const $form = $(formSelector);
            fetchInventoryCategory(orgId, catSelector, function(data) {
                if (data && data.length > 0) {
                    $cat.empty()
                         .append('<option selected disabled value="">Select Category</option>')
                         .append(data.map(({id, name}) => `<option value="${id}">${name}</option>`).join(''))
                         .prop('disabled', false)
                         .find('option:contains("Loading...")').remove();
                } else {
                    Swal.fire({
                        text: 'Item Categories are not available for selected Organization',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $site.empty()
                            .append('<option selected disabled value="">'+selectText+'</option>')
                            .prop('disabled', true);
                        }
                    });
                }
            });
        }
    });
}

function OrgChangeFinanceTransactionSourceDestination(orgSelector, SourceDestinationSelector, formSelector) {
    // $(orgSelector).change(function() {
    $(orgSelector).off('change.OrgChangeFinanceTransactionSourceDestination').on('change.OrgChangeFinanceTransactionSourceDestination', function(){
        var id = $(this).val();
        if (id) {
            fetchTransactionSourceDestination(id, SourceDestinationSelector, function(data) {
                const $TransactionType = $(SourceDestinationSelector);
                const $form = $(formSelector);
                var selectText = '';
                if(SourceDestinationSelector == '#ftt_source')
                {
                    selectText = 'Select Transaction Source';
                }
                else if(SourceDestinationSelector == '#ftt_destination')
                {
                    selectText = 'Select Transaction Destination';
                }
                if (data && data.length > 0) {
                    $TransactionType.empty()
                         .append('<option selected disabled value="">'+selectText+'</option>')
                         .append(data.map(({id, name}) => `<option data-name="${name}" value="${id}">${name}</option>`).join(''))
                         .prop('disabled', false)
                         .find('option:contains("Loading...")').remove();
                } else {

                    Swal.fire({
                        text: 'Transaction Types are not available for selected Organization',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $TransactionType.empty()
                            .append('<option selected disabled value="">'+selectText+'</option>')
                            .prop('disabled', true);
                        }
                    });
                }
            });
        }
    });
}


function OrgChangeFinanceTransactionTypes(orgSelector, TransactionTypeSelector, formSelector) {
    // $(orgSelector).change(function() {
    $(orgSelector).off('change.OrgChangeFinanceTransactionTypes').on('change.OrgChangeFinanceTransactionTypes', function(){
        var id = $(this).val();
        if (id) {
            fetchFinanceTransactionTypes(id, TransactionTypeSelector, function(data) {
                const $TransactionType = $(TransactionTypeSelector);
                const $form = $(formSelector);

                if (data && data.length > 0) {
                    $TransactionType.empty()
                         .append('<option selected disabled value="">Select Transaction Type</option>')
                         .append(data.map(({id, name}) => `<option data-name="${name}" value="${id}">${name}</option>`).join(''))
                         .prop('disabled', false)
                         .find('option:contains("Loading...")').remove();
                } else {

                    Swal.fire({
                        text: 'Transaction Types are not available for selected Organization',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $TransactionType.empty()
                            .append('<option selected disabled value="">Select Transaction Type</option>')
                            .prop('disabled', true);
                        }
                    });
                }
            });
        }
    });
}
function BrandChangeInventory(brandSelector, inventorySelector, formSelector) {
    // $(brandSelector).change(function() {
    $(brandSelector).off('change.BrandChangeInventory').on('change.BrandChangeInventory', function(){
        var brandId = $(this).val();
        if (brandId) {
            const $inventory = $(inventorySelector);
            const $form = $(formSelector);

            fetchBrandInventory(brandId, inventorySelector, function(data) {
                if (data && data.length > 0) {
                    $inventory.empty()
                         .append('<option selected disabled value="">Select Previous Inventory Transaction</option>')
                         .append(data.map(({id,code}) => `<option value="${id}">${code}-00000${id}</option>`).join(''))
                         .prop('disabled', false)
                         .find('option:contains("Loading...")').remove();
                } else {
                    if (!$inventory.data('alertShown')) {
                        $inventory.data('alertShown', true);
                        Swal.fire({
                            text: 'Previous Inventory Transactions are not available for selected Brand',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $inventory.empty()
                                         .append('<option selected disabled value="">Select Previous Inventory Transaction</option>')
                                         .prop('disabled', true);
                                $inventory.data('alertShown', false);
                            }
                        });
                    }
                }
            });
        }
    });
}

// function BrandChangeBatch(brandSelector, batchSelector, formSelector) {
//     // $(brandSelector).change(function() {
//     $(brandSelector).off('change.BrandChangeBatch').on('change.BrandChangeBatch', function(){
//         var brandId = $(this).val();

//         if (brandId) {
//             const $batch = $(batchSelector);
//             const $form = $(formSelector);

//             fetchBrandBatch(brandId, batchSelector, function(data) {
//                 if (data && data.length > 0) {
//                     $batch.empty()
//                          .append('<option selected disabled value="">Select Batch #</option>')
//                          .append(data.map(({id,batch_no}) => `<option value="${batch_no}" data-id="${id}">${batch_no}</option>`).join(''))
//                          .prop('disabled', false)
//                          .find('option:contains("Loading...")').remove();

//                 } else {
//                     if (!$batch .data('alertShown')) {
//                         $batch.data('alertShown', true);
//                         Swal.fire({
//                             text: 'Batch # are not available for selected Brand',
//                             icon: 'error',
//                             confirmButtonText: 'OK'
//                         }).then((result) => {
//                             if (result.isConfirmed) {
//                                 $batch.empty()
//                                          .append('<option selected disabled value="">Select Batch #</option>')
//                                          .prop('disabled', true);
//                                 $batch.data('alertShown', false);
//                             }
//                         });
//                     }
//                 }
//             });
//         }
//     });
// }

// function BrandChangeBatchAndExpiry(org, site,$generic, $brand, $batch, $expiry, $form) {
//   $brand
//     .off('change.BrandChangeBatch')
//     .on('change.BrandChangeBatch', function(){
//       const orgId     = $(org).val();
//       const siteId    = $(site).val();
//       const brandId   = $brand.val();
//       const genericId = $generic.val();
//       if (!orgId || !siteId || !genericId || !brandId) {
//         return;
//       }
//         console.log(orgId);

//       // show a loader if you want:
//       $('#ajax-loader').show();

//       $.ajax({
//         url: 'inventory/getbatchno',
//         type: 'GET',
//         data: { orgId, siteId, genericId, brandId },
//       })
//       .always(() => {
//         $('#ajax-loader').hide();
//       })
//       .done(function(resp) {
//         console.log(resp);
//         if (resp && resp.batch_no) {
//             $('.brand_details').show();
//             $batch
//             .val(resp.batch_no)
//             .prop('disabled', true);

//             $expiry
//                 .val(resp.expiry_date)
//                 .prop('disabled', true);
//         }
//         else {
//             Swal.fire({
//                 icon: 'warning',
//                 title: 'No batch# found',
//                 text: 'There is no inventory record for that Generic + Brand.'
//             });
//             // $brand.prop('disabled', false).prepend('<option selected disabled value="">Select Brand</option>');
//            $brand.prop('disabled',false)
//             .children('option[value=""]').remove().end()
//             .prepend('<option value="" disabled>Select Brand</option>')
//             .val('');

//             $batch.val('').prop('disabled', true);
//             $expiry.val('').prop('disabled', true);
//         }
//       })
//       .fail(function() {
//         Swal.fire('Error','Could not fetch batch info','error');
//       });
//     });
// }

function calculateUsedQuantityForBatch(batchNo, currentRow) {
    let totalUsed = 0;
    $('.duplicate').not(currentRow).each(function() {
        const $row = $(this);
        if ($row.find('.id_batch').val() === batchNo) {
            const qty = parseFloat($row.find('.id_qty').val()) || 0;
            totalUsed += qty;
        }
    });
    return totalUsed;
}

let batchCheckInProgress = false;
function handleBatchNumberCheck(orgId, siteId, genericId, brandId, currentRow, Placeholder = null, form, selectors = { batchSelector , brandSelector, qtySelector, expirySelector }) {
    // function handleBatchNumberCheck(orgId, siteId, genericId, brandId, $brand, currentRow, Placeholder = null) {
    // If a request is already in progress, skip
    if (batchCheckInProgress) {
        return;
    }
    batchCheckInProgress = true;

    return $.getJSON('inventory/getbatchno', { orgId, siteId, genericId, brandId })
        .then(resp => {
            // if (resp && resp.batch_no) {
            //     currentRow.find('.brand_details').show();

            //     const $batch = currentRow.find('.id_batch');
            //     const $expiry = currentRow.find('.id_expiry');
            //     // $batch.html(`<option selected value="${resp.batch_no}">${resp.batch_no}</option>`).removeClass('requirefield');

            //     $batch.val(resp.batch_no).prop('disabled', true).removeClass('requirefield');
            //     currentRow.find('.id_batch_error').text('');

            //     $expiry.val(resp.expiry_date).prop('disabled', true).removeClass('requirefield');
            //     currentRow.find('.id_expiry_error').text('');

            //     const $qty = currentRow.find('.id_qty');
            //     if (Placeholder == 'newIssue' || Placeholder == 'respondMedication') {
            //         if ($qty.length && resp.site_balance !== undefined) {
            //             // Calculate total quantity already used in other rows
            //             const usedQty = calculateUsedQuantityForBatch(resp.batch_no, currentRow);
            //             const availableQty = resp.site_balance - usedQty;

            //             $qty.attr('max', availableQty);
            //             $qty.attr('placeholder', `Max: ${availableQty} (Available: ${resp.site_balance}, Used: ${usedQty})`);
            //         }
            //     }

            // }
            const $qty = currentRow.find(selectors.qtySelector);

            if (resp && Array.isArray(resp) && resp.length > 0) {
                let selectedBatch = null;

                for (const batch of resp) {
                    const usedQty = calculateUsedQuantityForBatch(batch.batch_no, currentRow);
                    const availableQty = batch.site_balance - usedQty;

                    if (availableQty > 0) {
                        selectedBatch = {
                            ...batch,
                            availableQty,
                            usedQty
                        };
                        break;
                    }
                }
                if (selectedBatch) {
                    currentRow.find('.brand_details').show();
                    currentRow.find(selectors.batchSelector)
                        .val(selectedBatch.batch_no)
                        .prop('disabled', true)
                        .removeClass('requirefield');

                    currentRow.find(selectors.batchSelector+'_error').text('');

                    currentRow.find(selectors.expirySelector)
                        .val(selectedBatch.expiry_date)
                        .prop('disabled', true)
                        .removeClass('requirefield');

                    currentRow.find(selectors.expirySelector+'_error').text('');

                    // currentRow.find('.id_batch')
                    //     .val(selectedBatch.batch_no)
                    //     .prop('disabled', true)
                    //     .removeClass('requirefield');

                    // currentRow.find('.id_batch_error').text('');

                    // currentRow.find('.id_expiry')
                    //     .val(selectedBatch.expiry_date)
                    //     .prop('disabled', true)
                    //     .removeClass('requirefield');

                    // currentRow.find('.id_expiry_error').text('');

                    // const $qty = currentRow.find('.id_qty');
                    if (Placeholder === 'newIssue' || Placeholder === 'respondMedication' || Placeholder === 'newMaterialTransfer') {
                        if ($qty.length) {
                            $qty.attr('max', selectedBatch.availableQty);
                            $qty.attr('placeholder', `Max: ${selectedBatch.availableQty} (Available: ${selectedBatch.site_balance}, Used: ${selectedBatch.usedQty})`);
                        }
                    }
                    else if (Placeholder === 'respondMT') {
                        // if ($qty.length) {
                            $qty.attr('max', selectedBatch.availableQty);
                            $qty.attr('placeholder', `Max: ${selectedBatch.availableQty} (Available: ${selectedBatch.availableQty})`);
                        // }
                    }
                } else {
                    Swal.fire({
                        title: 'Inventory Unavailable',
                        text: 'No more batches are currently in stock.',
                        icon: 'warning',
                        confirmButtonText: 'OK',
                        allowOutsideClick: false
                    }).then(() => {
                        $(form).modal('hide');
                    });
                }
            }
            else {
                Swal.fire({
                    title: 'No batch# found',
                    text: 'No inventory for that combination',
                    icon: 'warning',
                    confirmButtonText: 'OK',
                    allowOutsideClick: false
                })
                .then((result) => {
                    if (result.isConfirmed) {
                        currentRow.find(selectors.batchSelector)
                        .val('')
                        .prop('disabled', false)
                        .addClass('requirefield');
                        currentRow.find(selectors.batchSelector+'_error').text('');

                        currentRow.find(selectors.expirySelector)
                            .val('')
                            .prop('disabled', false)
                            .addClass('requirefield');
                        currentRow.find(selectors.expirySelector+'_error').text('');

                        $qty.attr('max', 0);
                        $qty.attr('placeholder', `Max: 0 (Available: 0)`);
                        // $(form).modal('hide');
                    }
                });
            }
        })
        .fail(() => {
            Swal.fire('Error', 'Could not fetch batch info', 'error');
        })
        .always(() => {
            // Reset the flag when request is complete
            batchCheckInProgress = false;
        });
}

function BrandChangeBatchAndExpiry(org, site, generic, brand, batch, qty, expiry, respond, selectors = { batchSelector , brandSelector, qtySelector, expirySelector }, form) {
    const $org = $(org);
    const $site = $(site);
    const $gen = $(generic);
    const $brand = $(brand);
    const classString = $brand.attr('class');

    const $batch = $(batch);
    const $qty = $(qty);
    const $expiry = $(expiry);
    $brand.off('change.BrandChangeBatch');
    // $brand
    //     .off('change.BrandChangeBatch')
    //     .on('change.BrandChangeBatch', function(e) {
        $brand.on('change.BrandChangeBatch', function(e) {
            e.stopPropagation();
            const currentRow = $(this).closest('.duplicate');
            const orgId = $org.val();
            const siteId = $site.val();
            const genericId = $gen.val();
            const brandId = $brand.val();

            if (!orgId || !siteId || !genericId || !brandId) {
                Swal.fire(
                    'Missing Information',
                    'Please select Organization, Site, Generic and Brand before proceeding.',
                    'warning'
                );
                $brand
                    .prop('disabled', false)
                    .children('option[value=""]').remove().end()
                    .prepend('<option value="" disabled>Select Brand</option>')
                    .val('');
                return;
            }
            // Update the function call
            handleBatchNumberCheck(orgId, siteId, genericId, brandId, currentRow, respond, form,
                                {batchSelector: selectors.batchSelector,brandSelector: selectors.brandSelector,
                                qtySelector: selectors.qtySelector, expirySelector: selectors.expirySelector});
            // handleBatchNumberCheck(orgId, siteId, genericId, brandId, $brand, currentRow);
        });
        $('#add-issuedispense').off('hidden.bs.modal.brandChange').on('hidden.bs.modal.brandChange', function() {
            $brand.off('change.BrandChangeBatch');
            batchCheckInProgress = false;
        });
}

// function BatchChangeExpiryRate(action, batchSelector, expiry, rate, condition) {
//     $(batchSelector).change(function() {
//         var selectedOption = $(this).find('option:selected');
//         var inventoryId = selectedOption.data('id');
//         if (inventoryId) {
//             const $batch = $(batchSelector);
//             fetchBatchExpiryRate(inventoryId, expiry, rate, function(data) {
//                 if (data) {
//                     var rateValue = data.rate;
//                     var expiryDate = data.expiry_date;
//                     var qty = data.qty;
//                     $(rate).show();
//                     $(expiry).show();

//                     var formattedExpiryDate = moment(expiryDate).format('YYYY-MM-DD');

//                     if(action == 'add')
//                     {
//                         $('#im_rate').val(rateValue).prop('disabled',true);
//                         $('#expiry-date').val(formattedExpiryDate).prop('disabled',true);
//                         if(condition == 'reversal')
//                         {
//                             $('#itemQty').show();
//                             $('#im_qty').val(qty).prop('disabled',true);
//                         }
//                         else{
//                             $('#im_qty').val(qty).prop('disabled',false);
//                         }
//                     }
//                     else if(action == 'update')
//                     {
//                         $('#u_im_rate').val(rateValue).prop('disabled',true);
//                         $('#u_im_expirydate').val(formattedExpiryDate).prop('disabled',true);
//                         if(condition == 'reversal')
//                         {
//                             $('#u_itemQty').show();
//                             $('#u_im_qty').val(qty).prop('disabled',true);
//                         }
//                         else{
//                             $('#u_im_qty').val(qty).prop('disabled',false);
//                         }
//                     }

//                 }
//                 else {
//                     $(expiry).show();
//                     $(rate).show();
//                 }
//             });
//         }
//     });
// }

function SiteChangeRequisition(siteSelector,transactiontypeSelector, requisitionSelector, formSelector) {
    // $(siteSelector).change(function() {
    $(siteSelector).off('change.SiteChangeRequisition').on('change.SiteChangeRequisition', function(){
        var siteId = $(this).val();
        var transactiontypeId = $(transactiontypeSelector).val();
        if (siteId) {
            const $requisition = $(requisitionSelector);
            const $form = $(formSelector);
            fetchSiteRequisition(siteId, transactiontypeId, requisitionSelector, function(data) {
                if (data && data.length > 0) {
                    $requisition.empty()
                         .append('<option selected disabled value="">Select Inventory Requisitions</option>')
                         .append(data.map(({id, remarks}) => `<option value="${id}">${remarks}</option>`).join(''))
                         .prop('disabled', false)
                         .find('option:contains("Loading...")').remove();
                } else {
                    Swal.fire({
                        text: 'Inventory Requisitions are not available for selected Organization',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $requisition.empty()
                            .append('<option selected disabled value="">Select Inventory Requisitions</option>')
                            .prop('disabled', true);
                        }
                    });
                }
            });
        }
    });
}

function OrgChangeVendor(orgSelector, vendorSelector, formSelector) {
    // $(orgSelector).change(function() {
    $(orgSelector).off('change.OrgChangeVendor').on('change.OrgChangeVendor', function(){
        var orgId = $(this).val();
        if (orgId) {
            const $vendor = $(vendorSelector);
            const $form = $(formSelector);

            fetchOrganizationVendor(orgId, vendorSelector, function(data) {
                if (data && data.length > 0) {
                    var selectText = '';
                    if(vendorSelector == '#im_origin')
                    {
                        selectText = 'Select Origin';
                    }
                    else{
                        selectText = 'Select Vendor';
                    }
                    $vendor.empty()
                         .append('<option selected disabled value="">'+selectText+'</option>')
                         .append(data.map(({id, person_name}) => `<option value="${id}">${person_name}</option>`).join(''))
                         .prop('disabled', false)
                         .find('option:contains("Loading...")').remove();
                } else {
                    Swal.fire({
                        text: 'Vendors are not available for selected Organization',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $vendor.empty()
                            .append('<option selected disabled value="">Select Vendor</option>')
                            .prop('disabled', true);
                        }
                    });
                }
            });
        }
    });
}

function OrgChangeLedger(orgSelector, ledgerSelector, formSelector) {
    // $(orgSelector).change(function() {
    $(orgSelector).off('change.OrgChangeLedger').on('change.OrgChangeLedger', function(){
        var id = $(this).val();
        if (id) {
            const $ledger = $(ledgerSelector);
            const $form = $(formSelector);

            fetchOrganizationLedger(id, ledgerSelector, function(data) {
                if (data && data.length > 0) {
                    $ledger.empty()
                         .append('<option selected disabled value="">Select Ledger Type</option>')
                         .append(data.map(({id, name}) => `<option value="${id}">${name}</option>`).join(''))
                         .prop('disabled', false)
                         .find('option:contains("Loading...")').remove();
                } else {
                    Swal.fire({
                        text: 'Ledger Types are not available for selected Organization',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $ledger.empty()
                            .append('<option selected disabled value="">Select Ledger Type</option>')
                            .prop('disabled', true);
                        }
                    });
                }
            });
        }
    });
}

function OrgChangeAccount(orgSelector, accountSelector, formSelector) {
    // $(orgSelector).change(function() {
    $(orgSelector).off('change.OrgChangeAccount').on('change.OrgChangeAccount', function(){
        var id = $(this).val();
        if (id) {
            const $account = $(accountSelector);
            const $form = $(formSelector);

            fetchOrganizationAccount(id, accountSelector, function(data) {
                var selectText = '';
                if(accountSelector == '#ftt_debit' || accountSelector == '#u_ftt_debit')
                {
                    selectText = 'Select Debit Account';
                }
                else if(accountSelector == '#ftt_credit' || accountSelector == '#u_ftt_credit')
                {
                    selectText = 'Select Credit Account';
                }
                if (data && data.length > 0) {
                    $account.empty()
                         .append('<option selected disabled value="">'+selectText+'</option>')
                         .append(data.map(({id, accountNames}) => `<option value="${id}">${accountNames}</option>`).join(''))
                         .prop('disabled', false)
                         .find('option:contains("Loading...")').remove();
                } else {
                    Swal.fire({
                        text: 'Debit/Credit Accounts are not available for selected Organization',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $account.empty()
                            .append('<option selected disabled value="">Select Ledger Type</option>')
                            .prop('disabled', true);
                        }
                    });
                }
            });
        }
    });
}

function OrgChangeBrand(orgSelector, brandSelector, formSelector) {
    // $(orgSelector).change(function() {
    $(orgSelector).off('change.OrgChangeBrand').on('change.OrgChangeBrand', function(){
        var orgId = $(this).val();
        if (orgId) {
            const $brand = $(brandSelector);
            const $form = $(formSelector);

            fetchOrganizationBrand(orgId, brandSelector, function(data) {
                if (data && data.length > 0) {
                    $brand.empty()
                         .append('<option selected disabled value="">Select Item Brand</option>')
                         .append(data.map(({id, name}) => `<option value="${id}">${name}</option>`).join(''))
                         .prop('disabled', false)
                         .find('option:contains("Loading...")').remove();
                } else {
                    Swal.fire({
                        text: 'Item Brands are not available for selected Organization',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $brand.empty()
                            .append('<option selected disabled value="">Select Item Brand</option>')
                            .prop('disabled', true);
                        }
                    });
                }
            });
        }
    });
}

// function SiteChangeEmployees(siteSelector, empSelector, formSelector) {
//     $(siteSelector).change(function() {
//         var siteId = $(this).val();
//         if (siteId) {
//             const $emp = $(empSelector);
//             const $form = $(formSelector);

//             if(formSelector == '#add_qualificationSetup')
//             {
//                 fetchQualificationEmployees(siteId, empSelector, function(data) {
//                     if (data && data.length > 0) {
//                         $emp.empty()
//                              .append('<option selected disabled value="">Select Employee</option>')
//                              .append(data.map(({id, name}) => `<option value="${id}">${name}</option>`).join(''))
//                              .prop('disabled', false)
//                              .find('option:contains("Loading...")').remove();
//                              $emp.trigger('change');
//                     } else {
//                         Swal.fire({
//                                 title: 'Qualification setup has already been finalized for all employees.',
//                                 text: 'Please select an option from the dropdown to manage employee qualifications.',
//                                 icon: 'error',
//                                 confirmButtonText: 'OK',
//                                 allowOutsideClick: false
//                             }).then((result) => {
//                                 if (result.isConfirmed) {
//                                     $('#eq-site').off('change');
//                                     $('#eq-org').off('change');
//                                     $('#add-qualificationSetup').modal('hide');
//                                 }
//                             });
//                     }
//                 });
//             }
//             else if(formSelector == '#add_medicalLicense')
//             {
//                 fetchMedicalLicenseEmployees(siteId, empSelector, function(data) {
//                     if (data && data.length > 0) {
//                         $emp.empty()
//                              .append('<option selected disabled value="">Select Employee</option>')
//                              .append(data.map(({id, name}) => `<option value="${id}">${name}</option>`).join(''))
//                              .prop('disabled', false)
//                              .find('option:contains("Loading...")').remove();
//                              $emp.trigger('change');
//                     } else {
//                             Swal.fire({
//                                 text: 'The medical license for all employees have already been registered.',
//                                 icon: 'error',
//                                 confirmButtonText: 'OK',
//                                 allowOutsideClick: false
//                             }).then((result) => {
//                                 if (result.isConfirmed) {
//                                     $('#em-site').off('change');
//                                     $('#em-org').off('change');
//                                     $('#add-medicalLicense').modal('hide');

//                                 }
//                             });
//                     }
//                 });
//             }
//             else if(formSelector == '#add_empSalary')
//             {
//                 fetchSalaryEmployees(siteId, empSelector, function(data) {
//                     if (data && data.length > 0) {
//                         $emp.empty()
//                              .append('<option selected disabled value="">Select Employee</option>')
//                              .append(data.map(({id, name}) => `<option value="${id}">${name}</option>`).join(''))
//                              .prop('disabled', false)
//                              .find('option:contains("Loading...")').remove();
//                              $emp.trigger('change');
//                     } else {
//                             Swal.fire({
//                                 text: 'Salaries have already been allocated to all employees',
//                                 icon: 'error',
//                                 confirmButtonText: 'OK',
//                                 allowOutsideClick: false
//                             }).then((result) => {
//                                 if (result.isConfirmed) {
//                                     $('#es-site').off('change');
//                                     $('#es-org').off('change');
//                                     $('#add-empSalary').modal('hide');
//                                 }
//                             });
//                     }
//                 });
//             }
//             else if(formSelector == '#emp_serviceallocation')
//             {
//                 fetchServiceEmployees(siteId, empSelector, function(data) {
//                     if (data && data.length > 0) {
//                         $emp.empty()
//                              .append('<option selected disabled value="">Select Employee</option>')
//                              .append(data.map(({id, name}) => `<option value="${id}">${name}</option>`).join(''))
//                              .prop('disabled', false)
//                              .find('option:contains("Loading...")').remove();
//                              $emp.trigger('change');
//                     } else {
//                             Swal.fire({
//                                 text: 'Service allocation has already been assigned to this employee.',
//                                 icon: 'error',
//                                 confirmButtonText: 'OK',
//                                 allowOutsideClick: false
//                             }).then((result) => {
//                                 if (result.isConfirmed) {
//                                     $('#site_sa').off('change');
//                                     $('#org_sa').off('change');
//                                     $('#empserviceallocation').modal('hide');
//                                 }
//                             });
//                     }
//                 });
//             }
//             else if(formSelector == '#add_empCC')
//             {
//                 fetchCCEmployees(siteId, empSelector, function(data) {
//                     if (data && data.length > 0) {
//                         $emp.empty()
//                              .append('<option selected disabled value="">Select Employee</option>')
//                              .append(data.map(({id, name}) => `<option value="${id}">${name}</option>`).join(''))
//                              .prop('disabled', false)
//                              .find('option:contains("Loading...")').remove();
//                              $emp.trigger('change');
//                     } else {
//                             Swal.fire({
//                                 text: 'Cost Center already allocated to all Employees',
//                                 icon: 'error',
//                                 confirmButtonText: 'OK',
//                                 allowOutsideClick: false
//                             }).then((result) => {
//                                 if (result.isConfirmed) {
//                                     $('#empcc_site').off('change');
//                                     $('#empcc_org').off('change');
//                                     $('#add-empcc').modal('hide');
//                                 }
//                             });
//                     }
//                 });
//             }
//             else if(formSelector == '#add_servicebooking')
//             {
//                 fetchPhysicians(siteId, empSelector, function(data) {
//                     if (data && data.length > 0) {
//                         $emp.empty()
//                              .append('<option selected disabled value="">Select Physician</option>')
//                              .append(data.map(({id, name}) => `<option value="${id}">${name}</option>`).join(''))
//                              .prop('disabled', false)
//                              .find('option:contains("Loading...")').remove();
//                              $emp.trigger('change');
//                     } else {
//                             Swal.fire({
//                                 text: 'There are no physicians available for this location.',
//                                 icon: 'error',
//                                 confirmButtonText: 'OK',
//                                 allowOutsideClick: false
//                             }).then((result) => {
//                                 if (result.isConfirmed) {
//                                     $emp.off('change');
//                                     // $('#empcc_org').off('change');
//                                     // $('#add-empcc').modal('hide');
//                                 }
//                             });
//                     }
//                 });
//             }
//             else if(formSelector == '#update_servicebooking')
//             {
//                 fetchPhysicians(siteId, empSelector, function(data) {
//                     if (data && data.length > 0) {
//                         $emp.empty()
//                              .append('<option selected disabled value="">Select Physician</option>')
//                              .append(data.map(({id, name}) => `<option value="${id}">${name}</option>`).join(''))
//                              .prop('disabled', false)
//                              .find('option:contains("Loading...")').remove();
//                              $emp.trigger('change');
//                     } else {
//                             Swal.fire({
//                                 text: 'There are no physicians available for this location.',
//                                 icon: 'error',
//                                 confirmButtonText: 'OK',
//                                 allowOutsideClick: false
//                             }).then((result) => {
//                                 if (result.isConfirmed) {
//                                     $('#edit-servicebooking').modal('hide');
//                                 }
//                             });
//                     }
//                 });
//             }
//             else if(formSelector == '#add_patientinout' || formSelector == '#add_materialconsumption')
//             {
//                 fetchPhysicians(siteId, empSelector, function(data) {
//                     if (data && data.length > 0) {
//                         $emp.empty()
//                              .append('<option selected disabled value="">Select Physician</option>')
//                              .append(data.map(({id, name}) => `<option value="${id}">${name}</option>`).join(''))
//                              .prop('disabled', false)
//                              .find('option:contains("Loading...")').remove();
//                              $emp.trigger('change');
//                     } else {
//                             Swal.fire({
//                                 text: 'There are no physicians available for this location.',
//                                 icon: 'error',
//                                 confirmButtonText: 'OK',
//                                 allowOutsideClick: false
//                             }).then((result) => {
//                                 if (result.isConfirmed) {
//                                     $emp.off('change');
//                                 }
//                             });
//                     }
//                 });
//             }

//         }
//     });
// }

function SiteChangeEmployees(siteSelector, empSelector, formSelector) {
    // $(siteSelector).change(function() {
    $(siteSelector).off('change.SiteChangeEmployees').on('change.SiteChangeEmployees', function(){
        var siteId = $(this).val();
        if (siteId) {
            const $emp = $(empSelector);
            const $form = $(formSelector);
            let alertShown = false;
            $emp.empty().append(`<option selected disabled value="">Loading...</option>`).prop('disabled', true);
            const handleEmployeeData = function(data, emptyMessage, modalSelector, placeholder) {
                $emp.empty()
                    .append(`<option selected disabled value="">${placeholder}</option>`);

                if (data && data.length > 0) {
                    alertShown = false;
                    $emp.append(data.map(({ id, name, prefix }) => `<option value="${id}">${prefix} ${name}</option>`).join(''))
                        .prop('disabled', false);
                    // setTimeout(() => {
                    //     $emp.append(
                    //         data.map(({ id, name, prefix }) =>
                    //             `<option value="${id}">${prefix} ${name}</option>`
                    //         ).join('')
                    //     ).prop('disabled', false);
                    // }, 200);

                    // $emp.trigger('change');
                } else {
                    $emp.prop('disabled', true);
                    if (!alertShown) {
                        alertShown = true;
                        Swal.fire({
                            text: emptyMessage,
                            icon: 'error',
                            confirmButtonText: 'OK',
                            allowOutsideClick: false
                        }).then((result) => {
                            if (result.isConfirmed) {
                                alertShown = false;
                                if (modalSelector) {

                                    $(modalSelector).modal('hide');
                                }
                            }
                        });
                    }
                }
            };

            switch (formSelector) {
                case '#add_qualificationSetup':
                    fetchQualificationEmployees(siteId, empSelector, function(data) {
                        handleEmployeeData(data, 'Qualification setup has already been finalized for all employees.', '#add-qualificationSetup', 'Select Employee');
                    });
                    break;
                case '#add_medicalLicense':
                    fetchMedicalLicenseEmployees(siteId, empSelector, function(data) {
                        handleEmployeeData(data, 'The medical license for all employees has already been registered.', '#add-medicalLicense', 'Select Employee');
                    });
                    break;
                case '#add_empSalary':
                    fetchSalaryEmployees(siteId, empSelector, function(data) {
                        handleEmployeeData(data, 'Salaries have already been allocated to all employees', '#add-empSalary', 'Select Employee');
                    });
                    break;
                case '#emp_serviceallocation':
                    fetchServiceEmployees(siteId, empSelector, function(data) {
                        handleEmployeeData(data, 'Employees are not available for the selected site.', '#empserviceallocation', 'Select Employee');
                    });
                    break;
                case '#emp_locationallocation':
                    fetchEmployeesLocationAllocation(siteId, empSelector, function(data) {
                        handleEmployeeData(data, 'Employees are not available for the selected site.', '#empLocationAllocation', 'Select Employee');
                    });
                    break;
                case '#add_empCC':
                    fetchCCEmployees(siteId, empSelector, function(data) {
                        handleEmployeeData(data, 'Cost Center already allocated to all Employees', '#add-empcc', 'Select Employee');
                    });
                    break;
                case '#add_servicebooking':
                    fetchPhysicians(siteId, empSelector, function(data) {
                        handleEmployeeData(data, 'There are no physicians available for this location.', '#add-empcc', 'Select Physician');
                    });
                    break;
                case '#update_servicebooking':
                    fetchPhysicians(siteId, empSelector, function(data) {
                        handleEmployeeData(data, 'There are no physicians available for this location.', '#edit-servicebooking', 'Select Physician');
                    });
                    break;
                case '#add_empDocuments':
                    fetchEmployeeDocuments(siteId, empSelector, function(data) {
                        handleEmployeeData(data, 'Employees are not available for the selected site.', '#add-empDocuments', 'Select Employee');
                    });
                    break;
                case '#add_patientinout':
                case '#add_materialconsumption':
                case '#add_reqe':
                case '#add_reqp':
                case '#add_reqi':
                case '#add_locationscheduling':
                case '#update_locationscheduling':
                    fetchPhysicians(siteId, empSelector, function(data) {
                        handleEmployeeData(data, 'There are no physicians available for this location.', null, 'Select Physician');
                    });
                    break;
                default:
                    console.error('Unknown formSelector:', formSelector);
                    break;
            }
        }
    });
}



// function ProvinceChangeDivision(provinceSelector, divisionSelector, formSelector) {
//     $(provinceSelector).change(function() {
//         var provinceId = $(this).val();
//         if (provinceId) {
//             const $division = $(divisionSelector);
//             const $form = $(formSelector);

//             fetchDivisions(provinceId, divisionSelector, function(data) {
//                 if (data && data.length > 0) {
//                     $division.empty()
//                          .append('<option selected disabled value="">Select Division</option>')
//                          .append(data.map(({id, name}) => `<option value="${id}">${name}</option>`).join(''))
//                          .prop('disabled', false)
//                          .find('option:contains("Loading...")').remove();
//                         //  $division.selectpicker('refresh');
//                 } else {
//                     Swal.fire({
//                         text: 'Divisions are not available for selected Province',
//                         icon: 'error',
//                         confirmButtonText: 'OK'
//                     }).then((result) => {
//                         if (result.isConfirmed) {
//                             $form[0].reset();
//                         }
//                     });
//                 }
//             });
//         }
//     });
// }

function ProvinceChangeDivision(provinceSelector, divisionSelector, formSelector, defaultDivisionName = null) {
    // $(provinceSelector).change(function () {
    $(provinceSelector).off('change.ProvinceChangeDivision').on('change.ProvinceChangeDivision', function(){
        const provinceId = $(this).val();
        if (provinceId) {
            const $division = $(divisionSelector);
            const $form = $(formSelector);

            fetchDivisions(provinceId, divisionSelector, function (data) {
                if (data && data.length > 0) {
                    $division.empty()
                        .append('<option selected disabled value="">Select Division</option>')
                        .append(data.map(({ id, name }) =>
                            `<option value="${id}">${name}</option>`
                        ).join(''))
                        .prop('disabled', false);

                    if (defaultDivisionName) {
                        const optionToSelect = $division.find('option').filter(function () {
                            return $(this).text().trim() === defaultDivisionName;
                        }).val();

                        if (optionToSelect) {
                            $division.val(optionToSelect).trigger('change');
                        }
                    }
                } else {
                    Swal.fire({
                        text: 'Divisions are not available for selected Province',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $form[0].reset();
                        }
                    });
                }
            });
        }
    });
}


function DivisionChangeDistrict(divisionSelector, districtSelector, formSelector) {
    // $(divisionSelector).change(function() {
    $(divisionSelector).off('change.DivisionChangeDistrict').on('change.DivisionChangeDistrict', function(){
        var divisionId = $(this).val();
        if (divisionId) {
            const $district = $(districtSelector);
            const $form = $(formSelector);

            fetchDistricts(divisionId, districtSelector, function(data) {
                if (data && data.length > 0) {
                    $district.empty()
                         .append('<option selected disabled value="">Select District</option>')
                         .append(data.map(({id, name}) => `<option value="${id}">${name}</option>`).join(''))
                         .prop('disabled', false)
                         .find('option:contains("Loading...")').remove();
                        //  $district.selectpicker('refresh');
                } else {
                    Swal.fire({
                        text: 'Districts are not available for selected Division',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $form[0].reset();
                        }
                    });
                }
            });
        }
    });
}

function OrgChangeCadre(orgSelector, cadreSelector, formSelector) {
    // $(orgSelector).change(function() {
    $(orgSelector).off('change.OrgChangeCadre').on('change.OrgChangeCadre', function(){
        var orgId = $(this).val();
        if (orgId) {
            const $cadre = $(cadreSelector);
            const $form = $(formSelector);

            fetchEmployeeCadre(orgId, cadreSelector, function(data) {
                if (data && data.length > 0) {
                    $cadre.empty()
                         .append('<option selected disabled value="">Select Cadre</option>')
                         .append(data.map(({id, name}) => `<option value="${id}">${name}</option>`).join(''))
                         .prop('disabled', false)
                         .find('option:contains("Loading...")').remove();
                        //  $cadre.selectpicker('refresh');

                } else {
                    Swal.fire({
                        text: 'Cadre are not available for selected Organization',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            // $form[0].reset();
                            $cadre.empty()
                            .append('<option selected disabled value="">Select Cadre</option>')
                            .append(data.map(({id, name}) => `<option value="${id}">${name}</option>`).join(''))
                            .prop('disabled', true)
                            .find('option:contains("Loading...")').remove();
                            $cadre.selectpicker('refresh');
                        }
                    });
                }
            });
        }
    });
}

function OrgChangePosition(orgSelector, positionSelector, formSelector) {
    // $(orgSelector).change(function() {
    $(orgSelector).off('change.OrgChangePosition').on('change.OrgChangePosition', function(){
        var orgId = $(this).val();
        if (orgId) {
            const $position = $(positionSelector);
            const $form = $(formSelector);

            fetchEmployeePosition(orgId, positionSelector, function(data) {
                if (data && data.length > 0) {
                    $position.empty()
                         .append('<option selected disabled value="">Select Position</option>')
                         .append(data.map(({id, name}) => `<option value="${id}">${name}</option>`).join(''))
                         .prop('disabled', false)
                         .find('option:contains("Loading...")').remove();
                        //  $position.selectpicker('refresh');
                } else {
                    Swal.fire({
                        text: 'Positions are not available for selected Organization & Sites',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            // $form[0].reset();
                            $position.empty()
                            .append('<option selected disabled value="">Select Position</option>')
                            .append(data.map(({id, name}) => `<option value="${id}">${name}</option>`).join(''))
                            .prop('disabled', true)
                            .find('option:contains("Loading...")').remove();
                            $position.selectpicker('refresh');
                        }
                    });
                }
            });
        }
    });
}

function OrgChangeServiceLocation(orgSelector, LocationSelector, formSelector) {
    // $(orgSelector).change(function() {
    $(orgSelector).off('change.OrgChangeServiceLocation').on('change.OrgChangeServiceLocation', function(){
        var orgId = $(this).val();
        if (orgId) {
            const $serviceLocation = $(LocationSelector);
            const $form = $(formSelector);
            fetchServiceLocations(orgId, LocationSelector, function(data) {
                if (data && data.length > 0) {
                    $serviceLocation.empty()
                         .append('<option selected disabled value="">Select Service Location</option>')
                         .append(data.map(({id, name}) => `<option value="${id}">${name}</option>`).join(''))
                         .prop('disabled', false)
                         .find('option:contains("Loading...")').remove();
                } else {
                    Swal.fire({
                        text: 'Service Locations are not available for your Organization',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $serviceLocation.empty()
                            .append('<option selected disabled value="">Select Service Location</option>')
                            .prop('disabled', true);
                        }
                    });

                }
            });
        }
    });
}

function OrgChangeTransactionTypes(orgSelector, TransactionTypeSelector, formSelector,condition) {
    // $(orgSelector).change(function() {
    $(orgSelector).off('change.OrgChangeTransactionTypes').on('change.OrgChangeTransactionTypes', function(){
    // $(siteSelector).off('change').change(function() {
        var orgId = $(this).val();
        if (orgId) {
            const $TransactionType = $(TransactionTypeSelector);
            const $form = $(formSelector);
            fetchTransactionTypes(orgId, TransactionTypeSelector,condition, function(data) {
                if (data && data.length > 0) {
                    $TransactionType.empty()
                         .append('<option selected disabled value="">Select Transaction Type</option>')
                         .append(data.map(({id, name}) => `<option value="${id}">${name}</option>`).join(''))
                         .prop('disabled', false)
                         .find('option:contains("Loading...")').remove();
                } else {
                    Swal.fire({
                        text: 'Transaction Types are not availables for selected Organization',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $TransactionType.empty()
                            .append('<option selected disabled value="">Select Transaction Type</option>')
                            .prop('disabled', true);
                        }
                    });

                }
            });
        }
    });
}

function SiteChangeMaterialManagementTransactionTypes(siteSelector,orgSelector, TransactionTypeSelector, formSelector,condition,request = null) {
    // $(siteSelector).change(function() {
    $(siteSelector).off('change.SiteChangeMaterialManagementTransactionTypes').on('change.SiteChangeMaterialManagementTransactionTypes', function(){
        if(condition == 'issue_dispense')
        {
            $('#mc_source_location').html("<option selected disabled value=''>Select Source Location</option>").prop('disabled', true);
            $('#mc_destination_location').html("<option selected disabled value=''>Select Destination Location</option>").prop('disabled', true);
        }
        var orgId = $(orgSelector).val();
        if (orgId) {
            const $TransactionType = $(TransactionTypeSelector);
            const $form = $(formSelector);
            fetchMaterialManagementTransactionTypes(orgId, TransactionTypeSelector,condition,request, function(data) {
                if (data && data.length > 0) {
                    $TransactionType.empty()
                         .append('<option selected disabled value="">Select Transaction Type</option>')
                         .append(data.map(({id, name}) => `<option value="${id}">${name}</option>`).join(''))
                         .prop('disabled', false)
                         .find('option:contains("Loading...")').remove();
                } else {
                    Swal.fire({
                        text: 'Transaction Types are not availables for selected Organization',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $TransactionType.empty()
                            .append('<option selected disabled value="">Select Transaction Type</option>')
                            .prop('disabled', true);
                        }
                    });

                }
            });
        }
    });
}

function LocationChangeServiceScheduling(LocationSelector, siteSelector, ScheduleSelector, formSelector) {
    // $(document).on('change', LocationSelector, function() {
    $(document).off('change', LocationSelector).on('change', LocationSelector, function() {
        var siteId;
        if(siteSelector !== 'null')
        {
            if ($(siteSelector).data('select2')) {
                siteId = $(siteSelector).select2('data')[0].id;
            } else {
                siteId = $(siteSelector).val();
            }
        }
        else{
            siteId = 'null';
        }
        var locationId = $(this).val();
        if (locationId) {
            const $schedule = $(ScheduleSelector);
            const $form = $(formSelector);
            fetchServiceScheduling(locationId, siteId, ScheduleSelector, function(data) {
                if (data && data.length > 0) {
                    $schedule.empty()
                        // .append('<option selected disabled value="">Select Service Location Schedule</option>')  
                        .append(data.map(({ id, name, start_timestamp, end_timestamp, schedule_pattern }) => {
                            const startDate = new Date(start_timestamp * 1000); // Convert to milliseconds
                            const endDate = new Date(end_timestamp * 1000); // Convert to milliseconds

                            // Format time in 12-hour format with AM/PM
                            const startHours = startDate.getHours();
                            const startMinutes = startDate.getMinutes();
                            const startAmPm = startHours >= 12 ? 'PM' : 'AM';
                            const start12Hour = startHours % 12 || 12;
                            const formattedStartTime = `${start12Hour}:${(startMinutes < 10 ? '0' : '') + startMinutes} ${startAmPm}`;

                            const endHours = endDate.getHours();
                            const endMinutes = endDate.getMinutes();
                            const endAmPm = endHours >= 12 ? 'PM' : 'AM';
                            const end12Hour = endHours % 12 || 12;
                            const formattedEndTime = `${end12Hour}:${(endMinutes < 10 ? '0' : '') + endMinutes} ${endAmPm}`;

                            // Capitalize first letter of each day and format pattern
                            const formattedPattern = schedule_pattern.split(', ').map(day => 
                                day.charAt(0).toUpperCase() + day.slice(1)
                            ).join(', ');

                            return `<option value="${id}">${name} (StartTime: ${formattedStartTime} - EndTime: ${formattedEndTime}) - ${formattedPattern}</option>`;
                        }).join(''))
                        .prop('disabled', false)
                        .find('option:contains("Loading...")').remove();
                }
                else {
                    Swal.fire({
                        text: 'Service Locations Schedules are not available for selected Service Location',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $schedule.empty()
                            .append('<option selected disabled value="">Select Service Location Schedule</option>')
                            .prop('disabled', true);
                        }
                    });
                }
            });
        }
    });
}
let skipMRLoad = false;
function SiteChangeMRCode(siteSelector, MRSelector, formSelector, condition) {
    // $(document).on('change', siteSelector, function() {
    $(siteSelector).off('change.SiteChangeMRCode').on('change.SiteChangeMRCode', function(){
        if (skipMRLoad) {
            skipMRLoad = false; // ✅ reset flag for future usage
            return;
        }
        const $MR = $(MRSelector);
        var siteId = $(this).val();

        if (siteId) {
            const $form = $(formSelector);
            fetchPatientMR(siteId, MRSelector, condition, function(data) {
                if (data && data.length > 0) {
                    $MR.empty()
                         .append('<option selected disabled value="">Select Patient MR#</option>')
                         .append(data.map(({mr_code}) => `<option value="${mr_code}">${mr_code}</option>`).join(''))
                         .prop('disabled', false)
                         .find('option:contains("Loading...")').remove();
                }
                else {
                    Swal.fire({
                        text: 'The Patient MR# is currently unavailable for the selected Site.',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                             $MR.empty()
                            .append('<option selected disabled value=" ">Select Patient MR#</option>')
                            .prop('disabled', true);
                        }
                    });
                }
            });
        }
    });
}

function OrgChangeMRCode(orgSelecter, MRSelector, formSelector, condition) {
    $(document).on('change', orgSelecter, function() {
        const $MR = $(MRSelector);
        var orgId = $(this).val();
        if (orgId) {
            const $form = $(formSelector);
            fetchOrgPatient(orgId, MRSelector, function(data) {
                if (data && data.length > 0) {
                    $MR.empty()
                         .append('<option selected disabled value="">Select MR#</option>')
                         .append(data.map(({ mr_code, name, cell_no }) => `<option value="${mr_code}">${mr_code} - ${name}</option>`).join(''))
                         .prop('disabled', false)
                         .find('option:contains("Loading...")').remove();
                }
                else {
                    Swal.fire({
                        text: 'The Patient MR# is currently unavailable for the selected Organization.',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                             $MR.empty()
                            .append('<option selected disabled value="">Select Patient MR#</option>')
                            .prop('disabled', true);
                        }
                    });
                }
            });
        }
    });
}

function SiteChangeCostCenter(siteSelector, CCSelector, formSelector) {
    // $(siteSelector).change(function() {
    $(siteSelector).off('change.SiteChangeCostCenter').on('change.SiteChangeCostCenter', function(){
        var siteId = $(this).val();
        if(CCSelector == '#emp_cc')
        {
            var select = 'Select Head Count Cost Center';
        }
        else{
            var select = 'Select Cost Center';
        }

        if (siteId) {
            const $CostCenter = $(CCSelector);
            const $form = $(formSelector);
            fetchActivatedCostCenters(siteId, CCSelector, function(data) {
                if (data && data.length > 0) {
                    $CostCenter.empty()
                         .append('<option selected disabled value="">'+select+'</option>')
                         .append(data.map(({id, name}) => `<option value="${id}">${name}</option>`).join(''))
                         .prop('disabled', false)
                         .find('option:contains("Loading...")').remove();
                } else {
                    Swal.fire({
                        text: 'Cost Centers are not Activated for selected Site',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $CostCenter.append('<option selected disabled>'+select+'</option>')
                            .prop('disabled', true);
                            // $form[0].reset();
                        }
                    });
                }
            });
        }
    });
}

function SiteChangeService(siteSelector, serviceSelector, formSelector) {
    // $(siteSelector).change(function() {
    $(siteSelector).off('change.SiteChangeService').on('change.SiteChangeService', function(){
        var siteId = $(this).val();
        if (siteId) {
            const $Service = $(serviceSelector);
            const $form = $(formSelector);
            fetchSiteServices(siteId, serviceSelector, function(data) {
                if (data && data.length > 0) {
                    $Service.empty()
                         .append('<option selected disabled value="">Select Service</option>')
                         .append(data.map(({id, name}) => `<option value="${id}">${name}</option>`).join(''))
                         .prop('disabled', false)
                         .find('option:contains("Loading...")').remove();
                         $Service.trigger('change');
                } else {
                        Swal.fire({
                            text: 'Services are not Activated for selected Site',
                            icon: 'error',
                            confirmButtonText: 'OK',
                            allowOutsideClick: false
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#site_sa').off('change');
                                $('#org_sa').off('change');
                                $Service.prop('disabled', true);
                                $('#empserviceallocation').modal('hide');
                            }
                        });
                }
            });
        }
    });
}

function SiteChangeServiceEPI(siteSelector, serviceSelector, action, formSelector) {
    // $(siteSelector).change(function() {
    // $(siteSelector).off('change').on('change', function() {  // Ensure event is only bound once
    $(siteSelector).off('change.SiteChangeServiceEPI').on('change.SiteChangeServiceEPI', function(){
        var siteId = $(this).val();
        if (siteId) {
            const $Service = $(serviceSelector);
            const $form = $(formSelector);
            fetchSiteServicesEPI(siteId, serviceSelector, action, function(data) {
                if (data && data.length > 0) {
                    $Service.empty()
                         .append('<option selected disabled value="">Select Service</option>')
                         .append(data.map(({id, name}) => `<option value="${id}">${name}</option>`).join(''))
                         .prop('disabled', false)
                         .find('option:contains("Loading...")').remove();
                         $Service.trigger('change');
                } else {
                        Swal.fire({
                            text: 'Services are not Activated for selected Site',
                            icon: 'error',
                            confirmButtonText: 'OK',
                            allowOutsideClick: false
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#site_sa').off('change');
                                $('#org_sa').off('change');
                                $Service.prop('disabled', true);
                                $('#empserviceallocation').modal('hide');
                            }
                        });
                }
            });
        }
    });
}

function MRChangeService(patientSelector, serviceSelector, formSelector) {
    // $(patientSelector).change(function() {
    $(patientSelector).off('change.MRChangeService').on('change.MRChangeService', function(){
        // console
        var mr = $(this).val();
        if (mr) {
            $('#mr-optional').length && $('#mr-optional').show();
            const $Service = $(serviceSelector);
            const $form = $(formSelector);
            fetchMRServices(mr, serviceSelector, function(data) {
                if (data && data.length > 0) {
                    if ($('#serviceSelect').length > 0) {
                        $('#serviceSelect').show();
                        $('#mc_service').attr('required', 'required');
                    }
                    if ($('#u_serviceSelect').length > 0) {
                        $('#u_serviceSelect').show();
                        $('#u_mc_service').attr('required', 'required');
                    }
                    $Service.empty()
                    .append('<option selected disabled value="">Select Service</option>')
                    .append(data.map(({id, name}) => `<option value="${id}">${name}</option>`).join(''))
                    .prop('disabled', false)
                    .find('option:contains("Loading...")').remove();
                    $Service.trigger('change');
                }
            });
        }
    });
}

function SiteChangeServiceActivation(siteSelector, serviceSelector, formSelector) {
    // $(siteSelector).change(function() {
    $(siteSelector).off('change.SiteChangeServiceActivation').on('change.SiteChangeServiceActivation', function(){
        var siteId = $(this).val();
        if (siteId) {
            const $Service = $(serviceSelector);
            const $form = $(formSelector);
            var serviceID = 0;

            $.ajax({
                url: 'services/getselectedservices',
                type: 'GET',
                data: {
                    serviceID: serviceID,
                    site_id: siteId
                },
                success: function(data) {
                    if(!data || data.length == 0)
                    {
                        Swal.fire({
                            title: 'All Services Activated For This site',
                            text: 'There are no services available for activation at this site.',
                            icon: 'info',
                            confirmButtonText: 'OK'
                        });
                        $Service.prop('disabled', true).val('');
                        $('#siteservice').show();
                        return;
                    }
                    
                    
                    $('#selectAll').prop('checked', false);
                    if (data && data.length > 0) {
                        $Service.prop('disabled', false).val('');
                        $('#allServices').empty();
                        $('#siteservice').hide();

                        if ($.fn.DataTable.isDataTable('#serviceTable')) {
                            $('#serviceTable').DataTable().clear().destroy();
                        }

                        let rows = '';
                        data.forEach(item => {
                            rows += `
                                <tr style="font-size:14px;cursor:pointer;">
                                    <td>
                                        <div class="custom-control custom-checkbox p-1">
                                            <input type="checkbox" name="activationServices[]" data-id="${item.id}" data-name="${item.name}" class="custom-control-input service-checkbox" id="as_${item.id}">
                                            <label class="custom-control-label" for="as_${item.id}"></label>
                                        </div>
                                    </td>
                                    <td>${item.name}</td>
                                    <td>${item.servicetypeName}</td>
                                    <td>${item.servicegroupName}</td>
                                </tr>`;
                        });

                        $('#allServices').append(rows);

                        $('#selectAll').on('change', function() {
                            $('.service-checkbox').prop('checked', $(this).prop('checked'));
                        });

                        $('#allServices').off('click', 'tr, th').on('click', 'tr, th', function(e) {
                            let $checkbox = $(this).find('input[type="checkbox"]');
                            $checkbox.prop('checked', !$checkbox.prop('checked')).trigger('change');
                        });

                        $('#serviceTable').DataTable({
                            paging: false,
                            searching: true,
                            ordering: true,
                            columnDefs: [
                                { orderable: false, targets: [0] }
                            ],
                        });
                    } else {
                        $('#allServices').empty();
                    }
                },
                error: function(xhr, status, error) {
                    console.error(error);
                }
            });
        }
    });
}

function saveCheckboxStates() {
    checkboxStates = {};
    $('.select-all-billing, .select-all-performing, .select-all-modes, input[name="service_billingCC[]"], input[name="service_performingCC[]"],input[name="service_modes[]"]').each(function() {
        checkboxStates[$(this).attr('id')] = $(this).prop('checked');
    });
}

function restoreCheckboxStates() {
    $('.select-all-billing, .select-all-performing, .select-all-modes, input[name="service_billingCC[]"], input[name="service_performingCC[]"],input[name="service_modes[]"]').each(function() {
        var checkboxId = $(this).attr('id');
        if (checkboxStates[checkboxId] !== undefined) {
            $(this).prop('checked', checkboxStates[checkboxId]);
        }
    });
}

function ActivateServiceCostCenter(siteSelector, serviceSelector, billingccSelector, performaningccSelector) {
    const $Site = $(siteSelector);
    const $BillingCostCenter = $(billingccSelector);
    const $PerformingCostCenter = $(performaningccSelector);
    const $Service = $(serviceSelector);
    var siteId = $Site.val();
    var ServiceIds = $Service.val();
    $('#allCostCenters').empty();

    $.ajax({
        url: 'costcenter/getorderingperformingcc',
        type: 'GET',
        data: {
            ServiceIds: ServiceIds,
            siteId: siteId
        },
        beforeSend: function() {
            Swal.fire({
                title: "Processing",
                allowOutsideClick: false,
                willOpen: () => {
                    Swal.showLoading();
                },
                showConfirmButton: false
            });
        },
        success: function(response) {
            Swal.close();
                    console.log(response);

            if (response && response.CostCenters.length > 0 && response.Services.length > 0) {
                $BillingCostCenter.prop('disabled', false);
                $PerformingCostCenter.prop('disabled', false);
                $('.activationMsg').hide();

                let rows = '';

                if ($.fn.DataTable.isDataTable('#costcenterTable')) {
                    $('#costcenterTable').DataTable().clear().destroy();
                }
                response.Services.forEach(service => {
                    let billingCostCenters = [];
                    let performingCostCenters = [];
                    let serviceModes = [];
                    console.log(billingCostCenters);

                    // Add Select All for Billing Cost Centers
                    billingCostCenters.push(`
                        <div class="custom-control custom-checkbox pl-0 pb-2">
                            <input type="checkbox" class="custom-control-input select-all-billing" data-service-id="${service.id}" id="billing_select_all_${service.id}">
                            <label class="custom-control-label" for="billing_select_all_${service.id}">Select All</label>
                        </div>
                    `);

                    // Add Select All for Performing Cost Centers
                    performingCostCenters.push(`
                        <div class="custom-control custom-checkbox pl-0 pb-2">
                            <input type="checkbox" class="custom-control-input select-all-performing" data-service-id="${service.id}" id="performing_select_all_${service.id}">
                            <label class="custom-control-label" for="performing_select_all_${service.id}">Select All</label>
                        </div>
                    `);

                    // Add Select All for Service Modes
                    serviceModes.push(`
                        <div class="custom-control custom-checkbox pl-0 pb-2">
                            <input type="checkbox" class="custom-control-input select-all-modes" data-service-id="${service.id}" id="mode_select_all_${service.id}">
                            <label class="custom-control-label" for="mode_select_all_${service.id}">Select All</label>
                        </div>
                    `);

                    response.CostCenters.forEach(costCenter => {
                        if (costCenter.ordering === 1) {
                            billingCostCenters.push(`
                                <div class="custom-control custom-checkbox pl-0 pb-2">
                                    <input type="checkbox" class="custom-control-input billing-checkbox" data-service-id="${service.id}" data-service-name="${service.name}" data-id="${costCenter.id}" data-name="${costCenter.name}" id="billing_${costCenter.id}_${service.id}" name="service_billingCC[]" value="${costCenter.id}">
                                    <label class="custom-control-label" for="billing_${costCenter.id}_${service.id}">${costCenter.name}</label>
                                </div>
                            `);
                        }
                        if (costCenter.performing === 1) {
                            performingCostCenters.push(`
                                <div class="custom-control custom-checkbox pl-0 pb-2">
                                    <input type="checkbox" class="custom-control-input performing-checkbox" data-service-id="${service.id}" data-service-name="${service.name}" data-id="${costCenter.id}" data-name="${costCenter.name}" id="performing_${costCenter.id}_${service.id}" name="service_performingCC[]" value="${costCenter.id}">
                                    <label class="custom-control-label" for="performing_${costCenter.id}_${service.id}">${costCenter.name}</label>
                                </div>
                            `);
                        }
                    });

                    response.ServiceModes.forEach(ServiceMode => {
                        serviceModes.push(`
                            <div class="custom-control custom-checkbox pl-0 pb-2">
                                <input type="checkbox" class="custom-control-input mode-checkbox" data-service-id="${service.id}" data-service-name="${service.name}" data-id="${ServiceMode.id}" data-name="${ServiceMode.name}" id="mode_${ServiceMode.id}_${service.id}" name="service_modes[]" value="${ServiceMode.id}">
                                <label class="custom-control-label" for="mode_${ServiceMode.id}_${service.id}">${ServiceMode.name}</label>
                            </div>
                        `);

                    });
                    const hasBilling   = billingCostCenters.length   > 1;
                    const hasPerform   = performingCostCenters.length > 1;
                    const hasModes     = serviceModes.length          > 1;

                    // fallback values
                    billingCostCenterList   = hasBilling ? billingCostCenters.join('<br>')   : 'N/A';
                    performingCostCenterList = hasPerform ? performingCostCenters.join('<br>') : 'N/A';
                    serviceModesList         = hasModes ? serviceModes.join('<br>')         : 'N/A';

                    rows += `
                        <tr style="font-size:14px;" data-service-id="${service.id}">
                            <td>
                                ${service.servicetypeName}<br>
                                ${service.servicegroupName}<br>
                                ${service.name}
                            </td>
                            <td>${billingCostCenterList}</td>
                            <td>${performingCostCenterList}</td>
                            <td>${serviceModesList}</td>
                        </tr>`;
                });

                $('#allCostCenters').append(rows);

                $('#costcenterTable').DataTable({
                    paging: false,
                    searching: true,
                    ordering: true,
                    columnDefs: [
                        { orderable: false, targets: [0] }
                    ]
                });
                restoreCheckboxStates();
                $('#serviceCCbtn').on('click', function(e) {
                    let isValid = true;
                    e.preventDefault(); // Prevent the modal from closing

                    $('#costcenterTable tbody tr').each(function() {
                        const serviceId = $(this).data('service-id');
                        const hasBillingChecked = $(`input[id^='billing_'][id$='_${serviceId}']:checked`).length > 0;
                        const hasPerformingChecked = $(`input[id^='performing_'][id$='_${serviceId}']:checked`).length > 0;
                        const hasServiceModeChecked = $(`input[id^='mode_'][id$='_${serviceId}']:checked`).length > 0;

                        if (!hasBillingChecked || !hasPerformingChecked || !hasServiceModeChecked) {
                            isValid = false;
                            return false;
                        }
                    });

                    if (!isValid) {
                        Swal.fire({
                            text: 'Each service must have at least one billing, one performing cost center and one service mode checked.',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        }).then(() => {
                            $('#costcenterModal').modal('show');
                        });
                    } else {
                        $('#costcenterModal').modal('hide');
                    }
                });
            }
            else {
                Swal.fire({
                    text: 'Cost Centers are not activated for selected Site',
                    icon: 'error',
                    confirmButtonText: 'OK',
                    allowOutsideClick: false
                }).then((result) => {
                    if (result.isConfirmed) {
                        $('#allCostCenters').empty();
                        $Service.prop('disabled', true).val('');
                        $('#costcenterModal').modal('hide');
                    }
                });
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });

}

$(document).on('change', '.select-all-billing', function() {
    const serviceId = $(this).data('service-id');
    const isChecked = $(this).is(':checked');
    $(`input.billing-checkbox[data-service-id="${serviceId}"]`).prop('checked', isChecked);
    updateHiddenCCForServiceActivation();
});

$(document).on('change', '.select-all-performing', function() {
    const serviceId = $(this).data('service-id');
    const isChecked = $(this).is(':checked');
    $(`input.performing-checkbox[data-service-id="${serviceId}"]`).prop('checked', isChecked);
    updateHiddenCCForServiceActivation();
});

$(document).on('change', '.select-all-modes', function() {
    const serviceId = $(this).data('service-id');
    const isChecked = $(this).is(':checked');
    $(`input.mode-checkbox[data-service-id="${serviceId}"]`).prop('checked', isChecked);
    updateHiddenCCForServiceActivation();
});

function ShowActivatedServiceData(data) {
    var url = '/finance/fetch-servicerates';
    $.ajax({
        url: url,
        method: 'POST',
        headers: {
            'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
        },
        data: data,
        beforeSend: function() {
            Swal.fire({
                title: "Processing",
                allowOutsideClick: false,
                willOpen: () => {
                    Swal.showLoading();
                },
                showConfirmButton: false
            });

        },
        success: function (response) {
            if ($.fn.DataTable.isDataTable('#view-servicerates')) {
                $('#view-servicerates').DataTable().clear().destroy();
            }
            $('#view-servicerates').html(`
                <thead>
                    <tr>
                        <th></th>
                        <th>Service Type<br>Service Group<br>Service</th>
                        <th>Billing Cost Centers</th>
                        <th>Performing Cost Centers</th>
                        <th>Service Mode</th>
                        <th>Unit</th>
                        <th>Action</th>
                    </tr>
                </thead>
            `);
            var ServiceRates =  $('#view-servicerates').DataTable({
                processing: true,
                serverSide: false,
                data: response.data,
                order: [[0, 'desc']],
                columns: [
                    { data: 'id_raw', name: 'id_raw', visible: false },
                    { data: 'service_details', name: 'service_details' },
                    { data: 'billingCC', name: 'billingCC' },
                    { data: 'performingCC', name: 'performingCC' },
                    { data: 'ServiceModes', name: 'ServiceModes' },
                    { data: 'ServiceUnit', name: 'ServiceUnit' },
                    { data: 'action', name: 'action', orderable: false, searchable: false }
                ],
                columnDefs: [
                    {
                        targets: 1,
                        width: "200px"
                    },
                    {
                        targets: 2,
                        width: "200px"
                    },
                    {
                        targets: 3,
                        width: "200px"
                    },
                    {
                        targets: 4,
                        width: "200px"
                    },
                    {
                        targets: 6,
                        width: "300px"
                    },
                ]

            });
            // ServiceRates.clear().rows.add(response.data).draw();
            Swal.close();
        },
        error: function (xhr, status, error) {
            // Handle error response
            console.log(xhr.responseText);
        }
    });
}

function EmployeeChangeMultiSelectService(empSelector, siteSelector, serviceSelector, formSelector) {
    // $(empSelector).change(function() {
    $(empSelector).off('change.EmployeeChangeMultiSelectService').on('change.EmployeeChangeMultiSelectService', function(){
        var empId = $(this).val();
        var siteId = $(siteSelector).val();
        if (empId && siteId) {
            const $Service = $(serviceSelector);
            const $form = $(formSelector);
            $Service.prop('disabled', false);
            $('#emp_services').hide();

            AllocateEmpServices(empId, siteId, serviceSelector, function(data) {
                $('#selectAllempServiceAllocation').prop('checked', false);

                if (data && data.length > 0) {
                    $('#multiService').empty();

                    if ($.fn.DataTable.isDataTable('#empServicetable')) {
                        $('#empServicetable').DataTable().clear().destroy();
                    }
                    data.forEach(item => {
                        var billingCostCenter = item.BillingCCNames  ?
                        item.BillingCCNames .split(',').map((billingcc, index, array) =>
                            `${billingcc}${index < array.length - 1 ? '<hr class="mt-1 mb-1">' : ''}`
                        ).join('') :
                        'No Billing Cost Center Available';

                        var performingCostCenter = item.PerformingCCNames  ?
                        item.PerformingCCNames .split(',').map((performingcc, index, array) =>
                            `${performingcc}${index < array.length - 1 ? '<hr class="mt-1 mb-1">' : ''}`
                        ).join('') :
                        'No Performing Cost Center Available';

                        var serviceModes = item.ServiceModeNames ?
                        item.ServiceModeNames.split(',').map((mode, index, array) =>
                            `${mode}${index < array.length - 1 ? '<hr class="mt-1 mb-1">' : ''}`
                        ).join('') :
                        'No Modes Available';
                        var embedData = `
                            <tr style="font-size:14px;cursor:pointer;">
                                <td>
                                    <div class="custom-control custom-checkbox p-1">
                                        <input type="checkbox" name="selectedServices[]" data-id="${item.id}" data-name="${item.name}" class="custom-control-input allocationservice-checkbox" id="as_${item.id}">
                                        <label class="custom-control-label" for="as_${item.id}"></label>
                                    </div>
                                </td>
                                <td>${item.name}</td>
                                <td>${item.ServiceTypeName}</td>
                                <td>${item.ServiceGroupName}</td>
                                <td>${billingCostCenter}</td>
                                <td>${performingCostCenter}</td>
                                <td>${serviceModes}</td>
                            </tr>`;
                        $('#multiService').append(embedData);
                    });
                    $('#selectAllempServiceAllocation').on('change', function() {
                        $('.allocationservice-checkbox').prop('checked', $(this).prop('checked'));
                    });
                    $('#multiService').off('click', 'tr').on('click', 'tr', function(e) {
                        let $checkbox = $(this).find('input[type="checkbox"]');
                        $checkbox.prop('checked', !$checkbox.prop('checked')).trigger('change');
                    });
                    $('#empServicetable').DataTable({
                        paging: false,
                        searching: true,
                        ordering: true,
                        columnDefs: [
                            { orderable: false, targets: [0] }
                        ]
                    });
                }
                else {
                    Swal.fire({
                        text: 'No services activated for this site or assigned to the employee',
                        icon: 'error',
                        confirmButtonText: 'OK',
                        allowOutsideClick: false
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $Service.prop('disabled', true);
                            $('#empserviceallocation').modal('hide');
                        }
                    });
                }
            });
        }
    });
}

function SiteChangeActivatedLocation(siteSelector, locationSelector, formSelector, inventoryStatus, empCheck) {
    // $(orgSelector).change(function() {
    $(siteSelector).off('change.SiteChangeActivatedLocation').on('change.SiteChangeActivatedLocation', function(){
        var siteId = $(siteSelector).val();
        if (siteId) {
            $('.emp_location').hide();
            const $Location = $(locationSelector);
            const $form = $(formSelector);
            // fetchServiceLocations(orgId, locationSelector, function(data) {
            fetchActiveSL(siteId, locationSelector,inventoryStatus,empCheck, function(data) {
                if (data && data.length > 0) {
                    $Location.prop('disabled', false);
                    $('#multiServicelocation').empty();

                    if ($.fn.DataTable.isDataTable('#emplocationallocationtable')) {
                        $('#emplocationallocationtable').DataTable().clear().destroy();
                    }
                    data.forEach(item => {
                        var embedData = `
                            <tr style="font-size:14px;cursor:pointer;">
                                <td>
                                    <div class="custom-control custom-checkbox p-1">
                                        <input type="checkbox" name="selectedServiceLocation[]" data-id="${item.id}" data-name="${item.name}" class="custom-control-input" id="ela_${item.id}">
                                        <label class="custom-control-label" for="ela_${item.id}"></label>
                                    </div>
                                </td>
                                <td>${item.name}</td>
                            </tr>`;

                        $('#multiServicelocation').append(embedData);
                    });
                    $('#multiServicelocation').off('click', 'tr').on('click', 'tr', function(e) {
                        let $checkbox = $(this).find('input[type="checkbox"]');
                        $checkbox.prop('checked', !$checkbox.prop('checked')).trigger('change');
                    });
                    $('#emplocationallocationtable').DataTable({
                        paging: false,
                        searching: true,
                        ordering: true,
                        columnDefs: [
                            { orderable: false, targets: [0] }
                        ]
                    });
                }
                else {
                    Swal.fire({
                        text: 'Service Locations are not Activated for selected Organization',
                        icon: 'error',
                        confirmButtonText: 'OK',
                        allowOutsideClick: false
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $Service.prop('disabled', true);
                            $('#empLocationAllocationModal').modal('hide');
                        }
                    });
                }
            });
        }
    });
}

function ServiceChangeServiceModes(siteSelector, serviceSelector, serviceModeSelector, formSelector) {
    // $(serviceSelector).change(function() {
    $(serviceSelector).off('change.ServiceChangeServiceModes').on('change.ServiceChangeServiceModes', function(){
        var serviceId = $(this).val();
        if (serviceId) {
            var siteId = $(siteSelector).val();
            const $ServiceMode = $(serviceModeSelector);
            const $form = $(formSelector);
            fetchSiteServiceMode(siteId, serviceId, serviceModeSelector, function(data) {
                if (data && data.length > 0) {
                    $ServiceMode.empty()
                        // .append('<option selected disabled value="">Select Service Mode</option>')
                        .append(data.map(({id, name, sell_price}) => {
                            const formattedPrice = sell_price ? Number(sell_price).toLocaleString() : '0';
                            return `<option value="${id}">${name} - (Rs ${formattedPrice})</option>`;
                        }).join(''))
                        .prop('disabled', false)
                        .find('option:contains("Loading...")').remove();
                    $ServiceMode.trigger('change');
                }
                else {
                        Swal.fire({
                            text: 'Service Mode are not Activated for selected Site & Service',
                            icon: 'error',
                            confirmButtonText: 'OK',
                            allowOutsideClick: false
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $ServiceMode.prop('disabled', true);
                            }
                        });
                        return;
                }
            });
        }
    });
}

function ServiceChangeCostCenter(siteSelector, serviceSelector, CCSelector, formSelector) {
    // $(serviceSelector).change(function() {
    $(serviceSelector).off('change.ServiceChangeCostCenter').on('change.ServiceChangeCostCenter', function(){
        var serviceId = $(this).val();
        if (serviceId) {
            var siteId = $(siteSelector).val();
            const $CostCenter = $(CCSelector);
            const $form = $(formSelector);
            fetchServiceCostCenter(siteId, serviceId, CCSelector, function(data) {
                if (data && data.length > 0) {
                    $CostCenter.empty()
                        //  .append('<option selected disabled value="">Select Speciality (Billing CC)</option>')
                         .append(data.map(({id, name}) => `<option value="${id}">${name}</option>`).join(''))
                         .prop('disabled', false)
                         .find('option:contains("Loading...")').remove();
                         $CostCenter.trigger('change');
                } else {
                        Swal.fire({
                            text: 'Billing Cost Centers are not Activated for selected Site & Service',
                            icon: 'error',
                            confirmButtonText: 'OK',
                            allowOutsideClick: false
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $CostCenter.prop('disabled', true);
                            }
                        });
                }
            });
        }
    });
}

function fetchActivatedCostCenters(siteId, element, successCallback, errorCallback, ccID = null) {
    let requestData = {
        siteId: siteId,
    };
    if (ccID) {
        requestData.ccID = ccID;
    }
    $.ajax({
        url: 'costcenter/getactivatedcc',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(element).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(element).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function fetchServiceLocations(orgId, element, successCallback, errorCallback) {
    let requestData = {
        orgId: orgId,
    };

    $.ajax({
        url: 'services/getservicelocation',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(element).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(element).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function fetchTransactionTypes(orgId, element, condition, successCallback, errorCallback) {
    let requestData = {
        orgId: orgId,
        condition: condition
    };
    $.ajax({
        url: '/inventory/gettransactiontypes',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(element).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(element).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function fetchMaterialManagementTransactionTypes(orgId, element, condition, request, successCallback, errorCallback) {
    let requestData = {
        orgId: orgId,
        condition: condition,
        request: request
    };
    $.ajax({
        url: '/inventory/getmaterialtransactiontypes',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(element).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(element).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}


function CheckFinanceTransactionTypes(transactionTypeID, element) {
    let deferred = $.Deferred();

    let requestData = {
        transactionTypeID: transactionTypeID,
    };

    $.ajax({
        url: 'finance/checkfinancetransactiontype',
        type: 'GET',
        data: requestData,
        beforeSend: function () {
            $(element).append('<option>Loading...</option>');
        },
        success: function (resp) {
            $(element).find('option:contains("Loading...")').remove();
            deferred.resolve(resp);
        },
        error: function (xhr, status, error) {
            deferred.reject(error);
        }
    });

    return deferred.promise();
}


function fetchServiceScheduling(locationId, siteId, element, successCallback, errorCallback) {
    let requestData = {
        siteId: siteId,
        locationId: locationId,
    };
    $.ajax({
        url: 'services/getserviceschedule',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(element).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(element).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function fetchOrgPatient(orgId, element, successCallback, errorCallback) {
    let requestData = {
        orgId: orgId,
    };

    $.ajax({
        url: 'patient/orgPatient',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(element).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(element).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function fetchPatientMR(siteId, element, condition, successCallback, errorCallback) {
    let requestData = {
        siteId: siteId,
        condition: condition,
    };

    $.ajax({
        url: 'patient/MRcode',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(element).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(element).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function fetchSites(organizationId, elementid, successCallback, errorCallback, siteId = null) {
    let requestData = {
        organizationId: organizationId,
    };
    if (siteId) {
        requestData.siteId = siteId;
    }
    $.ajax({
        url: 'site/getselectedsite',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(elementid).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(elementid).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function fetchEmployeeCadre(orgId, element, successCallback, errorCallback) {
    let requestData = {
        orgId: orgId,
    };

    $.ajax({
        url: 'hr/getcadre',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(element).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(element).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function fetchEmployeePosition(orgId, element, successCallback, errorCallback) {
    let requestData = {
        orgId: orgId,
    };
    $.ajax({
        url: 'hr/getposition',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(element).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(element).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function fetchEmployees(employeeid, elementid, successCallback, errorCallback) {
    let requestData = {
        employeeid: employeeid,
    };
    $.ajax({
        url: 'hr/getemployee',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(elementid).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(elementid).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function fetchOrganizationEmployees(orgid, elementid, successCallback, errorCallback) {
    let requestData = {
        orgid: orgid,
    };
    $.ajax({
        url: 'hr/getorgemployee',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(elementid).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(elementid).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function fetchEmployeeDetails(empId, elementid, successCallback, errorCallback) {
    let requestData = {
        empId: empId,
    };
    $.ajax({
        url: 'hr/getemployeedetails',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(elementid).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(elementid).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function fetchQualificationEmployees(siteId, empSelector, successCallback, errorCallback) {
    let requestData = {
        siteId: siteId,
    };
    $.ajax({
        url: 'hr/getqualificationemployee',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(empSelector).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(empSelector).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}



function fetchMedicalLicenseEmployees(siteId, elementid, successCallback, errorCallback) {
    let requestData = {
        siteId: siteId,
    };
    $.ajax({
        url: 'hr/getmedicallicenseemployee',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(elementid).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(elementid).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function fetchCCEmployees(siteId, elementid, successCallback, errorCallback) {
    let requestData = {
        siteId: siteId,
    };
    $.ajax({
        url: 'hr/getcceemployee',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(elementid).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(elementid).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function fetchEmployeeDocuments(siteId, elementid, successCallback, errorCallback) {
    let requestData = {
        siteId: siteId,
    };
    $.ajax({
        url: 'hr/getdocumentseemployee',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(elementid).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(elementid).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function fetchPhysicians(siteId, elementid, successCallback, errorCallback) {
    let requestData = {
        siteId: siteId,
    };
    $.ajax({
        url: 'hr/getphysicians',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(elementid).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(elementid).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

// function fetchDiagnosisICDCodes(elementid, successCallback, errorCallback) {
//     $.ajax({
//         url: 'medicalrecord/getdiagnosisicdcode',
//         type: 'GET',
//         beforeSend: function() {
//             $(elementid).append('<option>Loading...</option>');
//         },
//         success: function(resp) {
//             $(elementid).find('option:contains("Loading...")').remove();
//             if (typeof successCallback === "function") {
//                 successCallback(resp);
//             }
//         },
//         error: function(xhr, status, error) {
//             if (typeof errorCallback === "function") {
//                 errorCallback(error);
//             }
//         }
//     });
// }

function fetchDiagnosisICDCodes(url, params, successCallback, errorCallback) {
    $.ajax({
        url: url,
        type: 'GET',
        data: params,
        beforeSend: function () {
            $('#m_icddiagnose').append('<option>Loading...</option>');
        },
        success: function (resp) {
            $('#m_icddiagnose').find('option:contains("Loading...")').remove();
            if (typeof successCallback === 'function') {
                successCallback(resp);
            }
        },
        error: function (xhr, status, error) {
            if (typeof errorCallback === 'function') {
                errorCallback(error);
            }
        }
    });
}

let currentPage = 1;
let searchQuery = '';
let selectedICDIds = new Set(); // Track selected ICD IDs
// Function to Fetch ICD Codes
function fetchSymptomsICDCodes(serviceId, page = 1, search = '') {
    $.ajax({
        url: `/medicalrecord/getsymptomsicdcode?serviceId=${serviceId}&page=${page}&search=${search}`,
        type: 'GET',
        beforeSend: function () {
            if (page === 1) {
                $('#icd-codes-container').html('<p class="text-center">Loading...</p>');
            } else {
                $('.load-more').text('Loading...').prop('disabled', true);
            }
        },
        success: function (response) {
            if (page === 1) {
                $('#icd-codes-container').empty();
            }

            if (response.data && response.data.length > 0) {
                response.data.forEach(icdCode => {
                    const isChecked = selectedICDIds.has(icdCode.id) ? 'checked' : '';
                    $('#icd-codes-container').append(`
                        <div class="col-md-12">
                            <div class="custom-control custom-checkbox mb-3">
                                <input type="checkbox" name="selectedicd[]"
                                    data-id="${icdCode.id}"
                                    data-code="${icdCode.code}"
                                    data-name="${icdCode.description}"
                                    class="custom-control-input"
                                    id="si_${icdCode.id}" ${isChecked}>
                                <label class="custom-control-label" for="si_${icdCode.id}">
                                    ${icdCode.code} (${icdCode.description})
                                </label>
                            </div>
                        </div>
                    `);
                });
            } else {
                if (page === 1) {
                    $('#icd-codes-container').html('<p class="text-center">No Medical Coding found.</p>');
                }
            }

            if (response.next_page_url) {
                $('.load-more').show().text('Load More').prop('disabled', false);
                currentPage++;
            } else {
                $('.load-more').hide();
            }
        },
        error: function () {
            alert('Error fetching ICD codes');
        }
    });
}


function fetchEmployeesLocationAllocation(siteId, elementid, successCallback, errorCallback) {
    let requestData = {
        siteId: siteId,
    };
    $.ajax({
        url: 'hr/geteemployeeforlocation',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(elementid).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(elementid).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function fetchServiceEmployees(siteId, elementid, successCallback, errorCallback) {
    let requestData = {
        siteId: siteId,
    };
    $.ajax({
        url: 'hr/getserviceeemployee',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(elementid).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(elementid).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function fetchSiteServices(siteId, elementid, successCallback, errorCallback) {
    let requestData = {
        siteId: siteId,
    };
    $.ajax({
        url: 'services/getactivatedservices',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(elementid).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(elementid).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function fetchSiteServicesEPI(siteId, elementid, action, successCallback, errorCallback) {
    let requestData = {
        siteId: siteId,
        action: action,
    };
    $.ajax({
        url: 'services/getactivatedepiservices',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(elementid).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(elementid).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function fetchMRServices(mr, elementid, successCallback, errorCallback) {
    let requestData = {
        mr: mr,
    };
    $.ajax({
        url: 'services/getmrservices',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(elementid).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(elementid).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function AllocateEmpServices(empId, siteId, elementid, successCallback, errorCallback) {
    let requestData = {
        empId: empId,
        siteId: siteId,
    };
    $.ajax({
        url: 'services/allocateempservices',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(elementid).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(elementid).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

// function AllocateEmpLocation(orgId, elementid, successCallback, errorCallback) {
//     let requestData = {
//         orgId: orgId,
//     };
//     $.ajax({
//         url: 'services/se',
//         type: 'GET',
//         data: requestData,
//         beforeSend: function() {
//             $(elementid).append('<option>Loading...</option>');
//         },
//         success: function(resp) {
//             $(elementid).find('option:contains("Loading...")').remove();
//             if (typeof successCallback === "function") {
//                 successCallback(resp);
//             }
//         },
//         error: function(xhr, status, error) {
//             if (typeof errorCallback === "function") {
//                 errorCallback(error);
//             }
//         }
//     });
// }

function fetchSiteServiceMode(siteId, serviceId, elementid, successCallback, errorCallback) {
    let requestData = {
        siteId: siteId,
        serviceId: serviceId,
    };
    $.ajax({
        url: 'services/getactivatedservicemodes',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(elementid).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(elementid).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function fetchServiceCostCenter(siteId, serviceId, elementid, successCallback, errorCallback) {
    let requestData = {
        siteId: siteId,
        serviceId: serviceId,
    };
    $.ajax({
        url: 'services/getservicecostcenter',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(elementid).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(elementid).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function fetchSalaryEmployees(siteId, elementid, successCallback, errorCallback) {
    let requestData = {
        siteId: siteId,
    };
    $.ajax({
        url: 'hr/getsalaryemp',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(elementid).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(elementid).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function fetchQualificationLevel(qualificationid, elementClass, successCallback, errorCallback) {
    let requestData = {
        qualificationid: qualificationid,
    };
    $.ajax({
        url: 'hr/getqualification',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(elementClass).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(elementClass).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function fetchOrganizationVendor(orgId, element, successCallback, errorCallback, vendorId = null) {
    let requestData = {
        orgId: orgId,
    };
    if (vendorId) {
        requestData.vendorId = vendorId;
    }
    $.ajax({
        url: 'inventory/showvendor',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(element).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(element).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function fetchOrganizationLedger(id, element, successCallback, errorCallback) {
    let requestData = {
        id: id,
    };

    $.ajax({
        url: 'finance/getfinancialledger',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(element).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(element).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function fetchOrganizationAccount(id, element, successCallback, errorCallback) {
    let requestData = {
        id: id,
    };
    $.ajax({
        url: 'finance/getaccountnames',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(element).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(element).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function fetchOrganizationBrand(orgId, element, successCallback, errorCallback, brandId = null) {
    let requestData = {};
    if (orgId) {
        requestData.orgId = orgId;
    }
    if (brandId) {
        requestData.brandId = brandId;
    }
    $.ajax({
        url: 'inventory/showbrand',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(element).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(element).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function fetchOrganizationSites(orgId, element, successCallback, errorCallback) {
    let requestData = {
        orgId: orgId,
    };
    $.ajax({
        url: 'site/getsites',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(element).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(element).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function fetchOrganizationReferralSite(orgId, element, successCallback, errorCallback) {
    let requestData = {
        orgId: orgId,
    };
    $.ajax({
        url: 'orgSetup/getreferralsites',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(element).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(element).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}


// function fetchOrganizationItemGeneric(orgId, element, condition, successCallback, errorCallback) {
    
function fetchOrganizationItemGeneric(orgId, element, conditionOrCb, successCb, errorCb) {
    let condition = null;
    let successCallback = successCb;
    let errorCallback = errorCb;

    if (typeof conditionOrCb === 'function') {
        successCallback = conditionOrCb;
        errorCallback = successCb; // might be undefined
    } else {
        condition = conditionOrCb;
    }

    let requestData = {
        orgId: orgId,
        condition: condition
    };
    $.ajax({
        url: 'inventory/getorganizationgeneric',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(element).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(element).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function fetchGenericItemBrand(genericId, element, successCallback, errorCallback) {
    let requestData = {
        genericId: genericId,
    };
    $.ajax({
        url: 'inventory/getgenericbrand',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(element).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(element).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}



function fetchTransactionSourceDestination(id, element, successCallback, errorCallback) {
    let requestData = {
        id: id,
    };
    $.ajax({
        url: 'finance/getsourcedestination',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(element).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(element).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function fetchFinanceTransactionTypes(id, element, successCallback, errorCallback) {
    let requestData = {
        id: id,
    };
    $.ajax({
        url: 'finance/gettransactiontypes',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(element).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(element).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

// function fetchBrandInventory(brandId, element, successCallback, errorCallback) {
//     let requestData = {
//         brandId: brandId,
//     };
//     $.ajax({
//         url: 'inventory/getprevioustransactions',
//         type: 'GET',
//         data: requestData,
//         beforeSend: function() {
//             $(element).append('<option>Loading...</option>');
//         },
//         success: function(resp) {
//             $(element).find('option:contains("Loading...")').remove();
//             if (typeof successCallback === "function") {
//                 successCallback(resp);
//             }
//         },
//         error: function(xhr, status, error) {
//             if (typeof errorCallback === "function") {
//                 errorCallback(error);
//             }
//         }
//     });
// }

// function fetchBrandBatch(brandId, element, successCallback, errorCallback) {
//     let requestData = {
//         brandId: brandId,
//     };
//     $.ajax({
//         url: 'inventory/getbatchno',
//         type: 'GET',
//         data: requestData,
//         beforeSend: function() {
//             $(element).append('<option>Loading...</option>');
//         },
//         success: function(resp) {
//             $(element).find('option:contains("Loading...")').remove();
//             if (typeof successCallback === "function") {
//                 successCallback(resp);
//             }
//         },
//         error: function(xhr, status, error) {
//             if (typeof errorCallback === "function") {
//                 errorCallback(error);
//             }
//         }
//     });
// }

// function fetchBatchExpiryRate(inventoryId, expiry, rate, successCallback, errorCallback) {
//     let requestData = {
//         inventoryId: inventoryId,
//     };
//     $.ajax({
//         url: 'inventory/getexpiryrate',
//         type: 'GET',
//         data: requestData,
//         success: function(resp) {
//             if (typeof successCallback === "function") {
//                 successCallback(resp);
//             }
//         },
//         error: function(xhr, status, error) {
//             if (typeof errorCallback === "function") {
//                 errorCallback(error);
//             }
//         }
//     });
// }

// function fetchSiteRequisition(siteId, transactiontypeId, element, successCallback, errorCallback) {
//     let requestData = {
//         siteId: siteId,
//         transactiontypeId: transactiontypeId,
//     };
//     $.ajax({
//         url: 'inventory/getsiterequisition',
//         type: 'GET',
//         data: requestData,
//         beforeSend: function() {
//             $(element).append('<option>Loading...</option>');
//         },
//         success: function(resp) {
//             $(element).find('option:contains("Loading...")').remove();
//             if (typeof successCallback === "function") {
//                 successCallback(resp);
//             }
//         },
//         error: function(xhr, status, error) {
//             if (typeof errorCallback === "function") {
//                 errorCallback(error);
//             }
//         }
//     });
// }


function fetchDivisions(provinceId, element, successCallback, errorCallback) {
    let requestData = {
        provinceId: provinceId,
    };
    $.ajax({
        url: 'territory/getdivisions',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(element).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(element).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function fetchDistricts(divisionId, element, successCallback, errorCallback) {
    let requestData = {
        divisionId: divisionId,
    };
    $.ajax({
        url: 'orgSetup/getdistrict',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(element).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(element).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function fetchOrganizations(orgID, orgName, element, successCallback, errorCallback) {
    let requestData = {
        orgID: orgID,
        orgName: orgName,
    };
    $.ajax({
        url: 'orgSetup/GetOrganization',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(element).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(element).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function fetchInActiveSL(siteId, locationID, element, successCallback, errorCallback) {
    let requestData = {
        siteId: siteId,
        locationID: locationID,
    };
    $.ajax({
        url: 'services/getnotactivatedsl',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(element).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(element).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function fetchActiveSL(siteId, element, inventoryStatus, empCheck, successCallback, errorCallback ) {
    if (typeof inventoryStatus === 'function') {
        errorCallback = successCallback;
        successCallback = inventoryStatus;
        inventoryStatus = false;
    }

    if (typeof inventoryStatus === 'function') {
        errorCallback = successCallback;
        successCallback = empCheck;
        empCheck = true;
    }

    let requestData = {
        siteId: siteId,
        inventoryStatus: inventoryStatus,
        empCheck: empCheck
    };

    $.ajax({
        url: '/services/getactivatedsl',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(element).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(element).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function SiteChangeServiceLocation(siteSelector, locationSelector, formSelector) {
    // $(siteSelector).change(function() {
    $(siteSelector).off('change.SiteChangeServiceLocation').on('change.SiteChangeServiceLocation', function(){
        var siteId = $(this).val();
        if (siteId) {
            const $location = $(locationSelector);
            const $form = $(formSelector);
            let requestData = {
                siteId: siteId,
            };
            $.ajax({
                url: 'services/getnotactivatedsl',
                type: 'GET',
                data: requestData,
                beforeSend: function() {
                    $location.append('<option>Loading...</option>');
                },
                success: function(resp) {
                    $location.find('option:contains("Loading...")').remove();
                    if (resp && resp.length > 0) {
                        $location.empty()
                                 .append('<option selected disabled value="">Select Service Location</option>')
                                 .append(resp.map(({id, name}) => `<option value="${id}">${name}</option>`).join(''))
                                 .prop('disabled', false);
                    } else {
                        Swal.fire({
                            text: 'No service locations available for the selected site',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $location.empty()
                                         .append('<option selected disabled value="">Select Service Location</option>')
                                         .prop('disabled', true);
                            }
                        });
                    }
                    if (typeof successCallback === "function") {
                        successCallback(resp);
                    }
                },
                error: function(xhr, status, error) {
                    if (typeof errorCallback === "function") {
                        errorCallback(error);
                    }
                }
            });
        }
    });
}

function SiteChangeActivatedServiceLocation(siteSelector, locationSelector, formSelector, inventoryStatus , empCheck) {
    // $(siteSelector).change(function() {
    $(siteSelector).off('change.SiteChangeActivatedServiceLocation').on('change.SiteChangeActivatedServiceLocation', function(){
        var siteId = $(this).val();
        if (siteId) {
            const $location = $(locationSelector);
            const $form = $(formSelector);
            let requestData = {
                siteId: siteId,
                inventoryStatus: inventoryStatus,
                empCheck: empCheck,
            };

            $.ajax({
                url: 'services/getactivatedsl',
                type: 'GET',
                data: requestData,
                beforeSend: function() {
                    $location.append('<option>Loading...</option>');
                },
                success: function(resp) {
                    $location.find('option:contains("Loading...")').remove();
                    if (resp && resp.length > 0) {
                        $location.empty()
                                 .append('<option selected disabled value="">Select Service Location</option>')
                                 .append(resp.map(({location_id, name}) => `<option value="${location_id}">${name}</option>`).join(''))
                                 .prop('disabled', false);
                    } else {
                        Swal.fire({
                            text: 'No active locations are available for the selected site, or you currently have no assigned locations.',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $location.empty()
                                         .append('<option selected disabled value="">Select Service Location</option>')
                                         .prop('disabled', true);
                            }
                        });
                    }
                    if (typeof successCallback === "function") {
                        successCallback(resp);
                    }
                },
                error: function(xhr, status, error) {
                    if (typeof errorCallback === "function") {
                        errorCallback(error);
                    }
                }
            });
        }
    });
}



function fetchTransactionTypeOrganizations(transactiontypeID, element, successCallback, errorCallback) {
    let requestData = {
        transactiontypeID: transactiontypeID
    };
    $.ajax({
        url: 'orgSetup/GetTransactionTypeOrganization',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(element).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(element).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function fetchAccountStrategy(accountLevelId, element, successCallback, errorCallback) {
    let requestData = {
        accountLevelId: accountLevelId,
    };
    $.ajax({
        url: 'finance/getaccountstrategy',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(element).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(element).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function fetchAccountStrategyOrganizations(orgID, element, successCallback, errorCallback) {
    let requestData = {
        orgID: orgID,
    };
    $.ajax({
        url: 'finance/getaccountstrategyorg',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(element).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(element).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function fetchSelectedInventoryType(catId, subcatId, orgId, element, successCallback, errorCallback) {
    let requestData = {
        catId: catId,
        subcatId: subcatId,
        orgId: orgId,
    };
    $.ajax({
        url: 'inventory/getselectedinventorytype',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(element).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(element).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function fetchSelectedInventoryGeneric(typeId, element, successCallback, errorCallback) {
    let requestData = {
        typeId: typeId,
    };
    $.ajax({
        url: '/inventory/getselectedinventorygeneric',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(element).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(element).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function fetchInventoryGenerics(element, condition, successCallback, errorCallback) {
    let requestData = {
        condition: condition,
    };
    $.ajax({
        url: '/inventory/getinventorygenerics',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(element).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(element).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function fetchMedicationRoute(element, successCallback, errorCallback) {
    $.ajax({
        url: '/inventory/fetchmedicationroute',
        type: 'GET',
        beforeSend: function() {
            $(element).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(element).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}


function fetchMedicationFrequency(element, successCallback, errorCallback) {
    $.ajax({
        url: '/inventory/fetchmedicationfrequency',
        type: 'GET',
        beforeSend: function() {
            $(element).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(element).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function fetchInventoryCategory(org_id,element, successCallback, errorCallback) {
    let requestData = {
        org_id: org_id,
    };
    $.ajax({
        url: 'inventory/getinvcat',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(element).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(element).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function CheckInventoryCategoryConsumption(cat_id,element, successCallback, errorCallback) {
    let requestData = {
        cat_id: cat_id,
    };
    $.ajax({
        url: 'inventory/getinvcatconsumption',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(element).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(element).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function fetchSelectedInventorySubCategory(catId,element, successCallback, errorCallback) {
    let requestData = {
        catId: catId,
    };
    $.ajax({
        url: 'inventory/getselectedinvsubcat',
        type: 'GET',
        data: requestData,
        beforeSend: function() {
            $(element).append('<option>Loading...</option>');
        },
        success: function(resp) {
            $(element).find('option:contains("Loading...")').remove();
            if (typeof successCallback === "function") {
                successCallback(resp);
            }
        },
        error: function(xhr, status, error) {
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
    });
}

function CategoryChangeSubCategory(catselecter, subCatSelector, formSelector) {
    // $(catselecter).change(function() {
    $(catselecter).off('change.CategoryChangeSubCategory').on('change.CategoryChangeSubCategory', function(){
        var catId = $(this).val();
        if (catId) {
            const $subCat = $(subCatSelector);
            const $form = $(formSelector);

            fetchSelectedInventorySubCategory(catId, subCatSelector, function(data) {
                if (data && data.length > 0) {
                    $subCat.empty()
                         .append('<option selected disabled value="">Select Item Sub Category</option>')
                         .append(data.map(({id, name}) => `<option value="${id}">${name}</option>`).join(''))
                         .prop('disabled', false)
                         .find('option:contains("Loading...")').remove();
                } else {
                    Swal.fire({
                        text: 'Inventory Sub Categories are not available for selected Category',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $subCat.empty()
                            .append('<option selected disabled value="" disabled>Select Item Sub Category</option>')
                            .prop('disabled', true);
                        }
                    });
                }
            });
        }
    });
}

function SubCategoryChangeInventoryType(subcatselecter, typeSelector, formSelector) {
    // $(subcatselecter).off('change').change(function() {
    // $(subcatselecter).change(function() {
    $(subcatselecter).off('change.SubCategoryChangeInventoryType').on('change.SubCategoryChangeInventoryType', function(){
        var subcatId = $(this).val();
        var catId = null;
        var orgId = null;
        var selectors = [
            {cat: '#ib_cat', org: '#ib_org'},
            {cat: '#ig_cat', org: '#ig_org'},
            {cat: '#fb_cat', org: 'null'},
            {cat: '#ir_cat', org: 'null'},
            {cat: '#mc_itemcat', org: '#mc_org'},
            {cat: '#u_ig_cat', org: '#u_ig_org'},
            {cat: '#u_ib_subcat', org: '#u_ib_org'}
        ];

        for (let pair of selectors) {
            if (!catId && $(pair.cat).length && $(pair.cat).val()) {
                catId = $(pair.cat).val();
            }

            if (!orgId && $(pair.org).length && $(pair.org).val()) {
                orgId = $(pair.org).val();
            }

            if (catId && orgId) break;
        }

        // if (orgId === null) {
        //     Swal.fire({
        //         text: 'Organization ID is missing or not available',
        //         icon: 'error',
        //         confirmButtonText: 'OK'
        //     });

        //     return;
        // }

        if (subcatId) {
            const $type = $(typeSelector);
            const $form = $(formSelector);
            fetchSelectedInventoryType(catId, subcatId, orgId, typeSelector, function(data) {
                if (data && data.length > 0) {
                    $type.empty()
                         .append('<option selected disabled value="">Select Item Type</option>')
                         .append(data.map(({id, name}) => `<option value="${id}">${name}</option>`).join(''))
                         .prop('disabled', false)
                         .find('option:contains("Loading...")').remove();
                } else {
                    Swal.fire({
                        text: 'Item Types are not available for selected Category or Sub Category',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $type.empty()
                            .append('<option selected disabled>Select Item Type</option>')
                            .append(data.map(({id, name}) => `<option value="${id}">${name}</option>`).join(''))
                            .prop('disabled', true);
                            // $form[0].reset();
                        }
                    });
                }
            });
        }
    });
}

function TypeChangeInventoryGeneric(typeselecter, genericSelector, formSelector) {
    // $(typeselecter).off('change').change(function() {
    // $(typeselecter).change(function() {
    $(typeselecter).off('change.TypeChangeInventoryGeneric').on('change.TypeChangeInventoryGeneric', function(){
        var typeId = $(this).val();

        if (typeId) {
            const $generic = $(genericSelector);
            const $form = $(formSelector);

            fetchSelectedInventoryGeneric(typeId, genericSelector, function(data) {
                if (data && data.length > 0) {
                    $generic.empty()
                         .append('<option selected disabled value="">Select Inventory Generic</option>')
                         .append(data.map(({id, name}) => `<option value="${id}">${name}</option>`).join(''))
                         .prop('disabled', false)
                         .find('option:contains("Loading...")').remove();
                } else {
                    Swal.fire({
                        text: 'Item Generics are not available for selected Item Type',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $generic.empty()
                            .append('<option selected disabled>Select Inventory Generic</option>')
                            .append(data.map(({id, name}) => `<option value="${id}">${name}</option>`).join(''))
                            .prop('disabled', true);
                            // $form[0].reset();
                        }
                    });
                }
            });
        }
    });
}


function numberToWords(number) {
    const unitsMap = ['Zero', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];
    const teensMap = ['Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen'];
    const tensMap = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];

    function convertLessThanThousand(num) {
        let word = '';

        if (num >= 100) {
            word += unitsMap[Math.floor(num / 100)] + ' Hundred';
            num %= 100;
        }

        if (num >= 20) {
            word += (word ? ' ' : '') + tensMap[Math.floor(num / 10)];
            num %= 10;
        }

        if (num >= 10) {
            word += (word ? ' ' : '') + teensMap[num - 10];
            return word;
        }

        if (num > 0) {
            word += (word ? ' ' : '') + unitsMap[num];
        }

        return word;
    }

    if (number === 0) return 'Zero';

    const crore = Math.floor(number / 10000000);
    number %= 10000000;

    const lakh = Math.floor(number / 100000);
    number %= 100000;

    const thousand = Math.floor(number / 1000);
    number %= 1000;

    let res = '';

    if (crore) {
        res += convertLessThanThousand(crore) + ' Crore';
    }

    if (lakh) {
        res += (res ? ' ' : '') + convertLessThanThousand(lakh) + ' Lakh';
    }

    if (thousand) {
        res += (res ? ' ' : '') + convertLessThanThousand(thousand) + ' Thousand';
    }

    if (number) {
        res += (res ? ' ' : '') + convertLessThanThousand(number);
    }

    return res;
}

$('.amount').on('input', function() {
    var num = $(this).val();
    var words = numberToWords(num);
    var $conversionSpan = $(this).closest('.form-group').find('.amount_conversion');
    if (!words || words.trim() === "") {
        // $('.amount_conversion').text('');
        $conversionSpan.text('');

        return;
    }
    // $('.amount_conversion').text('Rs ' + words);
    $conversionSpan.text('Rs ' + words);
});

// $('#addMoreBtn').click(function() {
//     var lastRow = $('.duplicate').last();
//     var isFilled = true;
//     let mrSelected = $('#id_mr').val();
//     let selector = mrSelected ? 'input, textarea, select' : 'input:not(.mr-dependent input), textarea:not(.mr-dependent textarea), select:not(.mr-dependent select)';
//     lastRow.find(selector).each(function() {
//     // lastRow.find('input, textarea, select').each(function() {
//         var fieldName = $(this).attr('name');
//         if (fieldName === "po_remarks[]" || fieldName === "wo_remarks[]") {
//             return true;
//         }
//         if ($(this).val() === "" || $(this).val() === null) {
//             if ($(this).is('select')) {
//                 lastRow.find('select[name= "' + fieldName + '"]').next('.select2-container').find('.select2-selection').addClass('requirefield');
//                 lastRow.find('select[name= "' + fieldName + '"]').off('select2:open').on('select2:open', function() {
//                     $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
//                 });

//             } else if ($(this).is('textarea')) {
//                 $(this).addClass('requirefield');
//                 $(this).focus(function() {
//                     $(this).removeClass("requirefield");
//                 });

//             } else if ($(this).is('input')) {
//                 $(this).addClass('requirefield');
//                 $(this).focus(function() {
//                     $(this).removeClass("requirefield");
//                 });
//             }
//             isFilled = false;
//         }
//         else {
//             if ($(this).is('select')) {
//                 lastRow.find('select[name= "' + fieldName + '"]').next('.select2-container').find('.select2-selection').removeClass('requirefield');
//             } else {
//                 $(this).removeClass('requirefield');
//             }
//         }
//     });

//     if (isFilled) {
//         // $('.duplicate').last().find('select.selecter').select2('destroy');
//         $('.duplicate').last().find('select.selecter').each(function() {
//             if ($(this).data('select2')) {
//                 $(this).select2('destroy');
//             }
//         });

//         var clonedRow = $('.duplicate').last().clone();
//         clonedRow.find('input').val('');
//         clonedRow.find('textarea').val('');


//         clonedRow.find('select').prop('selectedIndex', 0).trigger('change');
//         if (clonedRow.find('.payable_amount').length) {
//             clonedRow.find('.payable_amount').hide();
//         }
//         // clonedRow.find('input[type="checkbox"]').prop('checked', false);

//         //  clonedRow.find('input[name="location_ela_value"]').val('');
//         // clonedRow.find('input[name="location_ela[]"]').val('');
//         clonedRow.find('.emp_costcenter').html("<option selected disabled value=''>Select Cost Center</option>").prop('disabled', true);  // Disable the cost center dropdown
//         clonedRow.find('.et_brand').html("<option selected disabled value=''>Select Brand</option>").prop('disabled', true);  // Disable the cost center dropdown
//         clonedRow.find('.id_brand').html("<option selected disabled value=''>Select Brand</option>").prop('disabled', true);  // Disable the cost center dropdown


//         // var clonedSelect = clonedRow.find('select');
//         // clonedSelect.find('.emp_costcenter').html("<option selected disabled value=''>Select Cost Center</option>").prop('disabled', true);  // Disable the cost center dropdown
//         // clonedSelect.prop('selectedIndex', 0).trigger('change');


//         $('.duplicate').last().after(clonedRow);
//         if ($('#id_mr').val()) {
//             toggleDuplicateFieldsBasedOnMR($('#id_mr').val());
//         }
//         $('.duplicate').last().find('select.selecter').select2();
//         $('.duplicate').last().prev().find('select.selecter').select2();

//         $('.duplicate').last().prev().find('select.selecter').select2();
//         clonedRow.find('.qd').bootstrapMaterialDatePicker({ weekStart: 0, time: false });
//         // clonedRow.find('.et_expiry').bootstrapMaterialDatePicker({ weekStart: 0, time: false });
//         clonedRow.find('.edt').bootstrapMaterialDatePicker({ format : 'dddd DD MMMM YYYY - hh:mm:ss A' });

//         $('#multiServicelocation input[type="checkbox"]').prop('checked', false);
//     }
// });


let previousExpiryStatus    = null;
let initialExpiryMinDate    = null;

function initExpiryPicker($input) {
    const opts = {
      format:  'YYYY-MM-DD',
      time:     false,
      minDate:  initialExpiryMinDate
    };

    if ($input.data('bootstrap-material-datetimepicker')) {
      $input.bootstrapMaterialDatePicker('destroy');
    }

    $input
      .bootstrapMaterialDatePicker(opts)
      .on('change', function(e, date) {
        if (date) $(this).val(date.format('YYYY-MM-DD'));
      });
}

$('#addMoreBtn').click(function() {
    var lastRow = $('.duplicate').last();
    var isFilled = true;
    let mrSelected = $('#id_mr').val();
    const selector = mrSelected
    ? 'input:not([name="id_demand_qty[]"]), textarea, select'
    : 'input:not(.mr-dependent input), textarea:not(.mr-dependent textarea), select:not(.mr-dependent select)';
    // let selector = mrSelected ? 'input, textarea, select' : 'input:not(.mr-dependent input), textarea:not(.mr-dependent textarea), select:not(.mr-dependent select)';
    $('.duplicate').each(function() {
        const $row = $(this);
        $row.find(selector).each(function() {
            const $f = $(this);
            const name = $f.attr('name');
            if (name==='po_remarks[]' || name==='wo_remarks[]') return true;
            if (!$f.val()) {
                isFilled = false;
                if ($f.is('select')) {
                    $f.next('.select2-container').find('.select2-selection').addClass('requirefield');

                    $f.off('select2:open.requirefield').on('select2:open.requirefield', function () {
                        $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                    });
                } else {
                    $f.addClass('requirefield');

                    $f.off('focus.requirefield').on('focus.requirefield', function () {
                        $(this).removeClass("requirefield");
                    });
                }
            }
        });
    });

    if (isFilled) {
        // $('.duplicate').last().find('select.selecter').select2('destroy');
        $('.duplicate').last().find('select.selecter').each(function() {
            if ($(this).data('select2')) {
                $(this).select2('destroy');
            }
        });

        var clonedRow = $('.duplicate').last().clone();
        clonedRow.find('input').val('');
        clonedRow.find('textarea').val('');


        clonedRow.find('select').prop('selectedIndex', 0).trigger('change');
        if (clonedRow.find('.payable_amount').length) {
            clonedRow.find('.payable_amount').hide();
        }
        // clonedRow.find('input[type="checkbox"]').prop('checked', false);

        //  clonedRow.find('input[name="location_ela_value"]').val('');
        // clonedRow.find('input[name="location_ela[]"]').val('');
        clonedRow.find('.brand_details').hide();
        clonedRow.find('.emp_location').show();
        clonedRow.find('.emp_costcenter').html("<option selected disabled value=''>Select Cost Center</option>").prop('disabled', true);  // Disable the cost center dropdown
        clonedRow.find('.location_ela_value').prop('disabled', true);  // Disable the cost center dropdown
        clonedRow.find('.et_brand').html("<option selected disabled value=''>Select Brand</option>").prop('disabled', true);  // Disable the cost center dropdown
        clonedRow.find('.id_brand').html("<option selected disabled value=''>Select Brand</option>").prop('disabled', true);  // Disable the cost center dropdown
        // clonedRow.find('.id_qty').attr('placeholder', `Transaction Qty...`).prop('disabled', false);
        clonedRow.find('.id_qty')
        .attr('placeholder', 'Transaction Qty...')
        .attr('max', 0)
        .prop('disabled', false);


        // var clonedSelect = clonedRow.find('select');
        // clonedSelect.find('.emp_costcenter').html("<option selected disabled value=''>Select Cost Center</option>").prop('disabled', true);  // Disable the cost center dropdown
        // clonedSelect.prop('selectedIndex', 0).trigger('change');


        $('.duplicate').last().after(clonedRow);
        if ($('#id_mr').val()) {
            toggleDuplicateFieldsBasedOnMR($('#id_mr').val());
        }
        $('.duplicate').last().find('select.selecter').select2();
        $('.duplicate').last().prev().find('select.selecter').select2();

        $('.duplicate').last().prev().find('select.selecter').select2();
        clonedRow.find('.qd').bootstrapMaterialDatePicker({ weekStart: 0, time: false });

        // clonedRow.find('.et_expiry').bootstrapMaterialDatePicker({ weekStart: 0, time: false });
        clonedRow.find('.et_expiry').each(function(){
            initExpiryPicker($(this));
        });

        clonedRow.find('.edt').bootstrapMaterialDatePicker({ format : 'dddd DD MMMM YYYY - hh:mm:ss A' });

        $('#multiServicelocation input[type="checkbox"]').prop('checked', false);
    }
});

// Calculate Net Payable Amount
$(document).on('input', '.po_amount, .po_discount', function() {
    var row = $(this).closest('.duplicate');
    var amount = parseFloat(row.find('input[name="po_amount[]"]').val()) || 0;
    var discount = parseFloat(row.find('input[name="po_discount[]"]').val()) || 0;
    var netPayable = amount - discount;
    row.find('.payable_amount').show();
    row.find('.net_payable_amount').text('Rs ' + netPayable.toFixed(2)).show();
});

$(document).on('input', '.wo_amount, .wo_discount', function() {
    var row = $(this).closest('.duplicate');
    var amount = parseFloat(row.find('input[name="wo_amount[]"]').val()) || 0;
    var discount = parseFloat(row.find('input[name="wo_discount[]"]').val()) || 0;
    var netPayable = amount - discount;
    row.find('.payable_amount').show();
    row.find('.net_payable_amount').text('Rs ' + netPayable.toFixed(2)).show();
});

$('#removeBtn').click(function() {
    if ($('.duplicate').length > 1) {
        $('.duplicate').last().remove();
    } else {
        alert('You must have at least one more option.');
    }
});

$(document).on('click', '#uaddMoreBtn', function() {
    fetchQualificationLevel(0, '.u_qualification', function(data) {
        // Construct the select dropdown from fetched data
        var selectHtml = '<select class="form-control selecter u_qualification" name="u_ql[]">';
        selectHtml += `<option selected disabled>Select Qualification Level</option>`;
        $.each(data, function(key, value) {
            selectHtml += `<option value="${value.id}">${value.name}</option>`;
        });
        selectHtml += '</select>';

        var newEntryHtml = `
            <div class="sl-item">
                <div class="row">
                    <div class="link col-lg-4">
                        <label class="control-label font-weight-bold">Qualification Level</label>
                        <div class="form-group has-custom m-b-5">
                            ${selectHtml}
                        </div>
                    </div>
                    <div class="link col-lg-4">
                        <label class="control-label font-weight-bold">Qualification Description</label>
                        <div class="form-group has-custom m-b-5">
                            <textarea class="form-control" rows="3" id="input04" name="u_qualificationDescription[]"></textarea>
                        </div>
                    </div>
                    <div class="link col-lg-4">
                        <div class="form-group m-b-5">
                            <label class="control-label font-weight-bold">Qualification Date</label>
                            <input type="date" class="form-control input06 dt" name="u_qd[]">
                        </div>
                    </div>
                </div>
            </div>
            <hr>
        `;
        // Append the constructed HTML to the container, right before the buttons
        $(newEntryHtml).insertBefore($('.ubuttons'));
        $('.u_qualification').select2();

    });
});

$(document).on('click', '#upo_addmore', function() {
    var lastRow = $('.po_details').last();
    var isFilled = true;
    lastRow.find('input, textarea, select').each(function() {
        if ($(this).val() === "" || $(this).val() === null) {
            if ($(this).attr('name') !== 'u_po_remarks[]') {
                $(this).addClass('requirefield');
                $(this).focus(function() {
                    $(this).removeClass("requirefield");
                });
                isFilled = false;
            }

            // $(this).addClass('requirefield');
            // $(this).focus(function() {
            //     $(this).removeClass("requirefield");
            // });
            // isFilled = false;
        }
    });

    if(isFilled)
    {
        var index = ($('.uduplicate .po_details').length);
        var selectedOption = $('#u_po_org option:selected');
        if (selectedOption.length > 0) {
            var orgId = selectedOption.val();
        }

        fetchOrganizationBrand(orgId, '#u_po_brand' + index, function(data) {
            var selectHtml = '<select class="form-control selecter p-0 u_po_brand" name="u_po_brand[]" id="u_po_brand' + index + '" required style="color:#222d32">';
            // selectHtml += `<option selected disabled value=" ">Select Item Brand</option>`;
            if (data.length > 0) {
                $.each(data, function (key, value) {
                    selectHtml += `<option value="${value.id}">${value.name}</option>`;
                });
            }

            selectHtml += '</select>';

            var brandField = '<div class="col-md-6">' +
                        '<div class="form-group">' +
                        '<label class="control-label">Update Brand</label>' +
                        selectHtml +
                        '</div>' +
                        '</div>';

            var qtyField = '<div class="col-md-6">' +
            '<div class="form-group row">' +
            '<div class="col-md-12">' +
            '<div class="form-group has-custom m-b-5">' +
            '<label class="control-label">Demand Qty</label>' +
            '<input type="number" placeholder="Enter Qty" class="form-control input-sm" required name="u_po_qty[]" id="input05">' +
            '</div>' +
            '<span class="text-danger po_qty_error"></span>' +
            '</div>' +
            '</div>' +
            '</div>';

            var amountField = '<div class="col-md-6">' +
                '<div class="form-group row">' +
                '<div class="col-md-12">' +
                '<div class="form-group has-custom m-b-5">' +
                '<label class="control-label">Amount</label>' +
                '<input type="number" placeholder="Enter Amount" class="form-control input-sm" required name="u_po_amount[]" id="input0565">' +
                '</div>' +
                '</div>' +
                '</div>' +
                '</div>';

            var discountField = '<div class="col-md-6">' +
                '<div class="form-group row">' +
                '<div class="col-md-12">' +
                '<div class="form-group has-custom m-b-5">' +
                '<label class="control-label">Update Discount</label>' +
                '<input type="number" placeholder="Enter Discount" class="form-control input-sm" required name="u_po_discount[]" id="input0575" >' +
                '</div>' +
                '</div>' +
                '</div>' +
                '</div>';

            var remarksField = '<div class="col-md-12">' +
                '<div class="form-group row">' +
                '<div class="col-md-12">' +
                '<div class="form-group has-custom m-b-10">' +
                '<label class="control-label">Update Remarks <small class="text-danger" style="font-size:11px;">(Optional)</small></label>' +
                '<textarea class="form-control" placeholder="Enter Remarks" rows="3" name="u_po_remarks[]"  id="input07" spellcheck="false"></textarea>' +
                '</div>' +
                '</div>' +
                '</div>' +
                '</div>';

                var netPayableField = '<div class="col-md-12 payable_amount" style="display:none;">' +
                '<div class="form-group has-custom m-b-5">' +
                '<label for="netPayableAmount">Net Payable Amount: </label>' +
                '<span id="netPayableAmount' + index + '" class="net_payable_amount">0.00</span>' +
                '</div>' +
                '</div>';

                $('.uduplicate').append('<div class="row pt-3 pb-1 po_details" style="border: 1px solid #939393;">' + brandField + qtyField + amountField + discountField + remarksField + '</div>');
                $('#u_po_brand' + index).select2();
        });
    }
});

$(document).on('click', '#uwo_addmore', function() {
    var lastRow = $('.wo_details').last();
    var isFilled = true;
    lastRow.find('input, textarea, select').each(function() {
        if ($(this).val() === "" || $(this).val() === null) {
            if ($(this).attr('name') !== 'u_wo_remarks[]') {
                $(this).addClass('requirefield');
                $(this).focus(function() {
                    $(this).removeClass("requirefield");
                });
                isFilled = false;
            }
        }
    });

    if(isFilled)
    {
        var particularsField = '<div class="col-md-6">' +
        '<div class="form-group row">' +
        '<div class="col-md-12">' +
        '<div class="form-group has-custom m-b-10">' +
        '<label class="control-label">Update Particulars</label>' +
        '<textarea class="form-control" placeholder="Enter Particulars" rows="1" name="u_wo_particulars[]" required id="input07" spellcheck="false"></textarea>' +
        '</div>' +
        '</div>' +
        '</div>' +
        '</div>';

        var amountField = '<div class="col-md-6">' +
            '<div class="form-group row">' +
            '<div class="col-md-12">' +
            '<div class="form-group has-custom m-b-5">' +
            '<label class="control-label">Amount</label>' +
            '<input type="number" placeholder="Enter Amount" class="form-control input-sm" required name="u_wo_amount[]" id="input0565">' +
            '</div>' +
            '</div>' +
            '</div>' +
            '</div>';

        var discountField = '<div class="col-md-6">' +
            '<div class="form-group row">' +
            '<div class="col-md-12">' +
            '<div class="form-group has-custom m-b-5">' +
            '<label class="control-label">Update Discount</label>' +
            '<input type="number" placeholder="Enter Discount" class="form-control input-sm" required name="u_wo_discount[]" id="input0575" >' +
            '</div>' +
            '</div>' +
            '</div>' +
            '</div>';

        var remarksField = '<div class="col-md-6">' +
            '<div class="form-group row">' +
            '<div class="col-md-12">' +
            '<div class="form-group has-custom m-b-10">' +
            '<label class="control-label">Update Remarks <small class="text-danger" style="font-size:11px;">(Optional)</small></label>' +
            '<textarea class="form-control" placeholder="Enter Remarks" rows="1" name="u_wo_remarks[]"  id="input07" spellcheck="false"></textarea>' +
            '</div>' +
            '</div>' +
            '</div>' +
            '</div>';

        $('.uwoduplicate').append('<div class="row pt-3 pb-1 wo_details" style="border: 1px solid #939393;">' + particularsField + amountField + discountField + remarksField +'</div>');
        }
});

$(document).on('click', '#urmc_addmore', function() {
    var lastRow = $('.rmc_details').last();
    var isFilled = true;
    lastRow.find('input, textarea, select').each(function() {
        if ($(this).val() === "" || $(this).val() === null) {
            $(this).addClass('requirefield');
            $(this).focus(function() {
                $(this).removeClass("requirefield");
            });
            isFilled = false;
        }
    });
    if(isFilled)
    {
        var index = ($('.uduplicate .rmc_details').length);
        fetchInventoryGenerics('#u_rmc_inv_generic' + index, 'medication', function(data) {
            var selectHtml = '<select class="form-control selecter p-0 u_rmc_inv_generic" name="u_rmc_inv_generic[]" id="u_rmc_inv_generic' + index + '" required style="color:#222d32">';
            if (data.length > 0) {
                $.each(data, function (key, value) {
                    selectHtml += `<option value="${value.id}">${value.name}</option>`;
                });
            }

            selectHtml += '</select>';

            var genericField = '<div class="col-md-6">' +
                        '<div class="form-group">' +
                        '<label class="control-label">Inventory Generic</label>' +
                        selectHtml +
                        '</div>' +
                        '</div>';

            var doseField = '<div class="col-md-6">' +
                    '<div class="form-group row">' +
                    '<div class="col-md-12">' +
                    '<div class="form-group has-custom m-b-5">' +
                    '<label class="control-label">Dose</label>' +
                    '<input type="number" class="form-control input-sm" placeholder="Enter Dose" required name="u_rmc_dose[]">' +
                    '</div>' +
                    '<span class="text-danger u_rmc_dose_error"></span>' +
                    '</div>' +
                    '</div>' +
                    '</div>';

            var daysField = '<div class="col-md-6">' +
                    '<div class="form-group row">' +
                    '<div class="col-md-12">' +
                    '<div class="form-group has-custom m-b-5">' +
                    '<label class="control-label">Days</label>' +
                    '<input type="number" class="form-control input-sm" placeholder="Enter Days" required name="u_rmc_days[]">' +
                    '</div>' +
                    '</div>' +
                    '</div>' +
                    '</div>';

            var routeField = '<div class="col-md-6">' +
                    '<div class="form-group">' +
                    '<label class="control-label">Update Route</label>' +
                    '<select class="form-control selecter p-0 u_rmc_route" name="u_rmc_route[]" id="u_rmc_route' + index + '" required style="color:#222d32">' +
                    '</select>' +
                    '</div>' +
                    '</div>';
            fetchMedicationRoute('#u_rmc_route' + index, function (data) {
                if (data.length > 0) {
                    $.each(data, function (key, value) {
                            $('#u_rmc_route' + index).append('<option value="' + value.id + '">' + value.name + '</option>');
                    });
                    $('#u_rmc_route' + index).select2();
                }
            });

            var frequencyField = '<div class="col-md-6">' +
            '<div class="form-group">' +
            '<label class="control-label">Update Frequency</label>' +
            '<select class="form-control selecter p-0 u_rmc_frequency" name="u_rmc_frequency[]" id="u_rmc_frequency' + index + '" required style="color:#222d32">' +
            '</select>' +
            '</div>' +
            '</div>';

            fetchMedicationFrequency('#u_rmc_frequency' + index, function (data) {
                if (data.length > 0) {
                    $.each(data, function (key, value) {
                        $('#u_rmc_frequency' + index).append('<option value="' + value.id + '">' + value.name + '</option>');
                    });
                    $('#u_rmc_frequency' + index).select2();
                }
            });

            $('.uduplicate').append('<div class="row pt-3 pb-1 rmc_details" style="border: 1px solid #939393;">' + genericField + doseField + routeField + frequencyField + daysField +'</div>');
            $('#u_rmc_inv_generic' + index).select2();
        });
    }
});

$(document).on('click', '#umc_addmore', function() {
    var lastRow = $('.mc_details').last();
    var isFilled = true;
    lastRow.find('input, textarea, select').each(function() {
        if ($(this).val() === "" || $(this).val() === null) {
            $(this).addClass('requirefield');
            $(this).focus(function() {
                $(this).removeClass("requirefield");
            });
            isFilled = false;
        }
    });
    if(isFilled)
    {
        var selectedMR = $('#u_mc_patient').val();
        var condition = (selectedMR !== null) ? 'material_medicine' : 'material';
        console.log('Condition for fetching generics:', condition);
        var index = ($('.uduplicate .mc_details').length);
        fetchInventoryGenerics('u_mc_itemgeneric' + index, condition, function(data) {
            var selectHtml = '<select class="form-control selecter p-0 u_mc_itemgeneric" name="u_mc_itemgeneric[]" id="u_mc_itemgeneric' + index + '" required style="color:#222d32">';
            if (data.length > 0) {
                $.each(data, function (key, value) {
                    selectHtml += `<option value="${value.id}">${value.name}</option>`;
                });
            }

            selectHtml += '</select>';

            var genericField = '<div class="col-md-6">' +
                        '<div class="form-group">' +
                        '<label class="control-label">Inventory Generic</label>' +
                        selectHtml +
                        '</div>' +
                        '</div>';

            var qtyField = '<div class="col-md-6">' +
                    '<div class="form-group row">' +
                    '<div class="col-md-12">' +
                    '<div class="form-group has-custom m-b-5">' +
                    '<label class="control-label">Demand Qty</label>' +
                    '<input type="number" class="form-control input-sm" placeholder="Enter Qty" required name="u_mc_qty[]">' +
                    '</div>' +
                    '</div>' +
                    '</div>' +
                    '</div>';


            $('.uduplicate').append('<div class="row pt-3 pb-1 mc_details" style="border: 1px solid #939393;">' + genericField + qtyField +'</div>');
            $('#u_mc_itemgeneric' + index).select2();
        });
    }
});

$(document).on('click', '#urmt_addmore', function() {
    var lastRow = $('.rmt_details').last();
    var isFilled = true;
    lastRow.find('input, textarea, select').each(function() {
        if ($(this).val() === "" || $(this).val() === null) {
            $(this).addClass('requirefield');
            $(this).focus(function() {
                $(this).removeClass("requirefield");
            });
            isFilled = false;
        }
    });
    if(isFilled)
    {
        var index = ($('.uduplicate .rmt_details').length);
        fetchInventoryGenerics('#u_rmt_itemgeneric' + index, 'material', function(data) {
            var selectHtml = '<select class="form-control selecter p-0 u_rmt_itemgeneric" name="u_rmt_itemgeneric[]" id="u_rmt_itemgeneric' + index + '" required style="color:#222d32">';
            if (data.length > 0) {
                $.each(data, function (key, value) {
                    selectHtml += `<option value="${value.id}">${value.name}</option>`;
                });
            }

            selectHtml += '</select>';

            var genericField = '<div class="col-md-6">' +
                        '<div class="form-group">' +
                        '<label class="control-label">Inventory Generic</label>' +
                        selectHtml +
                        '</div>' +
                        '</div>';

            var qtyField = '<div class="col-md-6">' +
                    '<div class="form-group row">' +
                    '<div class="col-md-12">' +
                    '<div class="form-group has-custom m-b-5">' +
                    '<label class="control-label">Demand Qty</label>' +
                    '<input type="number" class="form-control input-sm" placeholder="Enter Qty" required name="u_rmt_qty[]">' +
                    '</div>' +
                    '</div>' +
                    '</div>' +
                    '</div>';


            $('.uduplicate').append('<div class="row pt-3 pb-1 rmt_details" style="border: 1px solid #939393;">' + genericField + qtyField +'</div>');
            $('#u_rmt_itemgeneric' + index).select2();
        });
    }
});



// Event listener for the "Remove" button
$(document).on('click', '#uremoveBtn', function() {
    // Check if there's more than one section available to avoid removing everything
    if ($('.profiletimeline .sl-item').length > 1) {
        $('.profiletimeline .sl-item').last().remove();
        $('.profiletimeline hr').last().remove();
    }
    else {
        alert('You must have at least one more option.');
    }
});

$(document).on('click', '#upo_remove', function() {
    if ($('.uduplicate .po_details').length > 1) {
        $('.uduplicate .po_details').last().remove();
    }
    else {
        alert('You must have at least one more option.');
    }
});

$(document).on('click', '#uwo_remove', function() {
    if ($('.uwoduplicate .wo_details').length > 1) {
        $('.uwoduplicate .wo_details').last().remove();
    }
    else {
        alert('You must have at least one more option.');
    }
});

$(document).on('click', '#urmc_remove', function() {
    if ($('.uduplicate .rmt_details').length > 1) {
        $('.uduplicate .rmt_details').last().remove();
    }
    else {
        alert('You must have at least one more option.');
    }
});


$(document).on('click', '#umc_remove', function() {
    if ($('.uduplicate .mc_details').length > 1) {
        $('.uduplicate .mc_details').last().remove();
    }
    else {
        alert('You must have at least one more option.');
    }
});

$(document).on('click', '#urmt_remove', function() {
    if ($('.uduplicate .rmt_details').length > 1) {
        $('.uduplicate .rmt_details').last().remove();
    }
    else {
        alert('You must have at least one more option.');
    }
});

$(document).on('click', '#umedicalLicenseadd', function() {
    fetchQualificationLevel(0, '.u_qualification', function(data) {

        var newEntryHtml = `
            <div class="sl-item">
                <div class="row">
                    <div class="link col-lg-4">
                        <label class="control-label font-weight-bold">Medical License Description</label>
                        <div class="form-group has-custom m-b-5">
                            <input type="text" class="form-control input04" name="u_medicalLicense[]">
                        </div>
                    </div>

                    <div class="link col-lg-4">
                        <div class="form-group m-b-5">
                            <label class="control-label font-weight-bold">Ref No.</label>
                            <input type="text" class="form-control input06" name="u_refNo[]">
                        </div>
                    </div>

                    <div class="link col-lg-4">
                        <div class="form-group m-b-5">
                            <label class="control-label font-weight-bold">Expire Date</label>
                            <input type="date" class="form-control input06 dt" name="u_ed[]">
                        </div>
                    </div>
                </div>
            </div>
            <hr>
        `;
        // Append the constructed HTML to the container, right before the buttons
        $(newEntryHtml).insertBefore($('.ubuttons'));
    });
});

// Event listener for the "Remove" button
$(document).on('click', '#umedicalLicenseremove', function() {
    // Check if there's more than one section available to avoid removing everything
    if ($('.profiletimeline .sl-item').length > 1) {
        $('.profiletimeline .sl-item').last().remove();
        $('.profiletimeline hr').last().remove();
    }
});

function LoadEmployeeMedicalLicense(EmployeeId) {
    $.ajax({
        url: "/hr/viewmedical-license/" + EmployeeId,
        type: 'GET',
        dataType: 'json',
        beforeSend: function() {
            Swal.fire({
                title: "Processing",
                allowOutsideClick: false,
                willOpen: () => {
                    Swal.showLoading();
                },
                showConfirmButton: false
            });
        },
        success: function(response) {
            var medicalLicense = response.medicalLicense.split(",");
            var refNo = response.refNo.split(",");
            var expiryDate = response.expiryDate.split(",");
            var status;
            var StatusCode = response.status.split(",");
            var container = $(".profiletimeline");
            container.empty();

            const orgName = response.orgName;
            const headCountCC = response.headCountCC;
            const positionName = response.positionName;
            const SiteName = response.siteName;

            let entryHtml = `
                <div class="row">
                    <div class="col-md-6 p-1 text-center">
                        <b> Organization: <code>${orgName}</code></b>
                    </div>
                    <div class="col-md-6 p-1 text-center">
                        <b>Site: <code>${SiteName}</code></b>
                    </div>
                    <div class="col-md-6 p-1 text-center">
                        <b>HeadCount CC: <code>${headCountCC}</code></b>
                    </div>
                    <div class="col-md-6 p-1 text-center">
                        <b>Position: <code>${positionName}</code></b>
                    </div>

                </div>`;

            for (let i = 0; i < medicalLicense.length; i++) {
                if(StatusCode[i] == 1){

                    status = '<span class="label label-success pull-right">Active</span>';
                }
                else{
                    status = '<span class="label label-danger pull-right">Expired</span>';
                }
                entryHtml += `
                    <div class="sl-item">
                    ${status}
                    <br>
                    <input type="hidden" name="empId" value="${EmployeeId}">
                        <div class="row">
                            <div class="link col-lg-4">
                                <label class="control-label font-weight-bold">Medical License Description</label>
                                <div class="form-group has-custom m-b-5">
                                    <input type="text"  value="${medicalLicense[i]}" class="form-control input06" name="u_medicalLicense[]">
                                </div>
                            </div>
                            <div class="link col-lg-4">
                                <div class="form-group m-b-5">
                                    <label class="control-label font-weight-bold">Ref No.</label>
                                    <input type="text"  value="${refNo[i]}" class="form-control input06" name="u_refNo[]">
                                </div>
                            </div>
                            <div class="link col-lg-4">
                                <div class="form-group m-b-5">
                                    <label class="control-label font-weight-bold">Expire Date</label>
                                    <input type="date"  value="${expiryDate[i]}" class="form-control input06 dt" name="u_ed[]">
                                </div>
                            </div>
                        </div>
                    </div>
                    <hr>
                `;
                container.append(entryHtml);
            }

            var rights = response.rights.split(",");
            var edit = rights[2];
            if(edit == 1)
            {
                var entryHtmlBtns = `
                <div class="d-flex justify-content-center p-1 ubuttons">
                <button type="button" id="umedicalLicenseadd" class="btn btn-success mr-2">
                <i class="mdi mdi-plus"></i> Add More</button>
                <button type="button" id="umedicalLicenseremove"
                class="btn btn-danger mr-2""> <i class="mdi mdi-minus"></i> Remove</button>
                <button type="submit" class="btn btn-success waves-effect waves-light ml-auto">
                <span class="btn-label"><i class="fa fa-check"></i></span>Save</button>
                </div>`;
                container.append(entryHtmlBtns);
            }

            Swal.close();

        },
        error: function(error) {
            console.log(error);
        }
    });
}

function LoadEmployeeQualification(EmployeeId) {
    $.ajax({
        url: "/hr/viewqualification-setup/" + EmployeeId,
        type: 'GET',
        dataType: 'json',
        beforeSend: function() {
            Swal.fire({
                title: "Processing",
                allowOutsideClick: false,
                willOpen: () => {
                    Swal.showLoading();
                },
                showConfirmButton: false
            });
        },
        success: function(response) {
            fetchQualificationLevel(response.empqualificationLevelId, '.u_qualification', function(data) {
                var levelIds = response.empqualificationLevelId.split(",");
                var levelNames = response.empqualificationLevel.split(",");

                var container = $(".profiletimeline");
                container.empty();

                const orgName = response.orgName;
                const headCountCC = response.headCountCC;
                const positionName = response.positionName;
                const SiteName = response.siteName;

                let entryHtml = `
                <div class="row">
                    <div class="col-md-6 p-1 text-center">
                        <b> Organization: <code>${orgName}</code></b>
                    </div>
                    <div class="col-md-6 p-1 text-center">
                        <b>Site: <code>${SiteName}</code></b>
                    </div>
                    <div class="col-md-6 p-1 text-center">
                        <b>HeadCount CC: <code>${headCountCC}</code></b>
                    </div>
                    <div class="col-md-6 p-1 text-center">
                        <b>Position: <code>${positionName}</code></b>
                    </div>

                </div>`;

                for (let i = 0; i < levelIds.length; i++) {
                    var selectHtml = '<select class="form-control selecter u_qualification mb-2" name="u_ql[]">';
                    selectHtml += `<option selected value="${levelIds[i]}">${levelNames[i]}</option>`;
                    $.each(data, function(key, value) {
                        if (value.id != levelIds[i]) {
                            selectHtml += `<option style="text-transform: capitalize;" value="${value.id}">${value.name}</option>`;
                        }
                    });
                    selectHtml += '</select>';
                    entryHtml += `
                        <div class="sl-item">
                        <input type="hidden" name="empId" value="${EmployeeId}">
                            <div class="row">
                                <div class="link col-lg-4">
                                    <label class="control-label font-weight-bold">Qualification Level</label>
                                    <div class="form-group has-custom m-b-5" >
                                        ${selectHtml}
                                    </div>
                                </div>
                                <div class="link col-lg-4">
                                    <label class="control-label font-weight-bold">Qualification Description</label>
                                    <div class="form-group has-custom m-b-5">
                                        <textarea class="form-control mb-2" rows="3" style="text-transform: capitalize;" id="input04" name="u_qualificationDescription[]">${response.empqualificationName.split(",")[i]}
                                        </textarea>
                                    </div>
                                </div>
                                <div class="link col-lg-4">
                                    <div class="form-group m-b-5">
                                        <label class="control-label font-weight-bold">Qualification Date</label>
                                        <input type="date"  value="${response.empqualificationDate.split(",")[i]}" class="form-control input06 dt mb-2" name="u_qd[]">
                                    </div>
                                </div>
                            </div>
                        </div>
                        <hr>
                    `;
                    container.append(entryHtml);
                }
                var rights = response.rights.split(",");
                var edit = rights[2];
                if(edit == 1)
                {
                    var entryHtmlBtns = `
                    <div class="d-flex justify-content-center p-1 ubuttons">
                    <button type="button" id="uaddMoreBtn" class="btn btn-success mr-2">
                    <i class="mdi mdi-plus"></i> Add More</button>
                    <button type="button" id="uremoveBtn"
                    class="btn btn-danger mr-2""> <i class="mdi mdi-minus"></i> Remove</button>
                    <button type="submit" class="btn btn-success waves-effect waves-light ml-auto">
                    <span class="btn-label"><i class="fa fa-check"></i></span>Save</button>
                    </div>`;
                    container.append(entryHtmlBtns);
                }
                $('.u_qualification').select2();

                Swal.close();
            });
        },
        error: function(error) {
            console.log(error);
        }
    });
}

var uactiveRowServiceLocation;
var uselectedServiceLocations = {};

$(document).on('click', '.ulocation_ela_value', function () {
    uactiveRowServiceLocation = $(this).closest('.sl-item');
    var currentRowLocationSelect = uactiveRowServiceLocation.find('.location_ela_value'); // Find the cost center dropdown in the current row
    var locationValues = uactiveRowServiceLocation.find('input[name="ulocation_ela[]"]').val();
    var siteId = uactiveRowServiceLocation.find('.uinvSite').val();
    if(!siteId) {
        return;
    }
    var inventoryStatus = false;
    var empCheck = false;
    $('#umultiServicelocation').empty();
    $('#uempLocationAllocationModal').modal('show');
    fetchActiveSL(siteId, currentRowLocationSelect,inventoryStatus,empCheck, function(data) {
    // fetchServiceLocations(OrgId, '.ulocation_ela_value', function(data) {
        if (data && data.length > 0) {
            $('.ulocation_ela_value').prop('disabled', false);
            $('#umultiServicelocation').empty();

            if ($.fn.DataTable.isDataTable('#uemplocationallocationtable')) {
                $('#uemplocationallocationtable').DataTable().clear().destroy();
            }

            data.forEach(item => {
                var embedData = `
                    <tr style="font-size:14px;cursor:pointer;">
                        <td>
                            <div class="custom-control custom-checkbox p-1">
                                <input type="checkbox" name="uselectedServiceLocation[]" data-id="${item.location_id}" data-name="${item.name}" class="custom-control-input" id="uela_${item.location_id}">
                                <label class="custom-control-label" for="uela_${item.location_id}"></label>
                            </div>
                        </td>
                        <td>${item.name}</td>
                    </tr>`;
                $('#umultiServicelocation').append(embedData);
            });

            // if (locationValues) {
            //     var selectedLocations = locationValues.split(',');
            //     selectedLocations.forEach(function (location) {
            //         $('#umultiServicelocation input[name="uselectedServiceLocation[]"]').each(function () {
            //             if ($(this).data('name') === location.trim()) {
            //                 $(this).prop('checked', true);
            //             }
            //         });
            //     });
            // }

            // if (locationValues) {
            //     var selectedLocations = locationValues.split(',');
            //     selectedLocations.forEach(function (location) {
            //         $('#umultiServicelocation input[name="uselectedServiceLocation[]"]').each(function () {
            //             if ($(this).data('name') === location.trim()) {
            //                 $(this).prop('checked', true);
            //                 uselectedServiceLocations[$(this).data('id')] = $(this).data('name');
            //             }
            //         });
            //     });
            // }

            if (locationValues) {
                var selectedLocations = locationValues.split(',');
                selectedLocations.forEach(function (location) {
                    console.log(location);
                    $('#umultiServicelocation input[name="uselectedServiceLocation[]"]').each(function () {
                        if (parseInt($(this).data('id')) === parseInt(location.trim())) {
                            $(this).prop('checked', true);
                            uselectedServiceLocations[$(this).data('id')] = $(this).data('name');
                        }
                    });
                });
            }

            $('#umultiServicelocation').off('click', 'tr').on('click', 'tr', function(e) {
                let $checkbox = $(this).find('input[type="checkbox"]');
                $checkbox.prop('checked', !$checkbox.prop('checked')).trigger('change');
            });

            $('#uemplocationallocationtable').DataTable({
                paging: false,
                searching: true,
                ordering: true,
                columnDefs: [
                    { orderable: false, targets: [0] }
                ]
            });
        }
    });
});


// function updatedHiddenServiceLocations() {
//     var selectedIds = [];
//     var selectedNames = [];

//     $('#umultiServicelocation input[name="uselectedServiceLocation[]"]:checked').each(function () {
//         console.log($(this).data('id'), $(this).data('name'));
//         selectedIds.push($(this).data('id'));
//         selectedNames.push($(this).data('name'));
//     });

//     if (uactiveRowServiceLocation) {
//         uactiveRowServiceLocation.find('input[name="ulocation_ela_value"]').val(selectedNames.join(','));
//         uactiveRowServiceLocation.find('input[name="ulocation_ela[]"]').val(selectedIds.join(','));
//     }
// }

// $('#umultiServicelocation').on('change', 'input[name="uselectedServiceLocation[]"]', function () {
//     console.log('change');
//     updatedHiddenServiceLocations();
// });


function updatedHiddenServiceLocations() {
    var selectedIds = Object.keys(uselectedServiceLocations);
    var selectedNames = Object.values(uselectedServiceLocations);

    if (uactiveRowServiceLocation) {
        uactiveRowServiceLocation.find('input[name="ulocation_ela_value"]').val(selectedNames.join(','));
        uactiveRowServiceLocation.find('input[name="ulocation_ela[]"]').val(selectedIds.join(','));
    }
}

$('#umultiServicelocation').on('change', 'input[name="uselectedServiceLocation[]"]', function () {
    var id = $(this).data('id');
    var name = $(this).data('name');
    if ($(this).is(':checked')) {
        uselectedServiceLocations[id] = name;
    } else {    
        delete uselectedServiceLocations[id];
    }
    updatedHiddenServiceLocations();
});

$('#uemplocationallocationtable').on('draw.dt', function () {
    $.each(uselectedServiceLocations, function(id, name) {
        $('#uela_' + id).prop('checked', true);
    });
});


async function LoadEmpAllocatedLocation(EmployeeId) {
    try {
        let response = await $.ajax({
            url: "/hr/viewemp-location/" + EmployeeId,
            type: 'GET',
            dataType: 'json',
            beforeSend: function () {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            }
        });

        const orgId = response.orgID;
        const orgName = response.orgName;
        const headCountCC = response.headCountCC;
        const positionName = response.positionName;
        const locationSites = response.LocationSites;
        const SiteName = response.siteName;
        const status = response.status == 1 ? '<span class="label label-success pull-right">Active</span>' : '<span class="label label-danger pull-right">Inactive</span>';
        const edt = response.effective_timestamp;

        let container = $(".profiletimeline");
        container.empty();

        let entryHtml = `
            <div class="row">
                <div class="col-md-6 p-1 text-center">
                    <b> Organization: <code>${orgName}</code></b>
                </div>
                <div class="col-md-6 p-1 text-center">
                    <b>Site: <code>${SiteName}</code></b>
                </div>
                <div class="col-md-6 p-1 text-center">
                    <b>HeadCount CC: <code>${headCountCC}</code></b>
                </div>
                <div class="col-md-6 p-1 text-center">
                    <b>Position: <code>${positionName}</code></b>
                </div>
                <div class="col-md-6 mt-3" style="margin: 0 auto;border: 1px solid black;">
                    <div class="form-group">
                        <div class="form-group has-custom m-b-5 text-center">
                            <label class="control-label">Effective DateTime</label>
                            <input type="text" required id="date-format" class="form-control input06 u_ela_edt" value="${edt}" name="u_ela_edt">
                        </div>
                    </div>
                </div>
            </div>`;

        for (let siteIndex = 0; siteIndex < locationSites.length; siteIndex++) {
            let siteData = await fetchSitesPromise(orgId, '.uinvSite', locationSites[siteIndex].siteId);

            var selectSite = '<select class="form-control selecter uinvSite mb-2" required name="uinvSite[]">';
            selectSite += `<option selected value="${locationSites[siteIndex].siteId}">${locationSites[siteIndex].locationSiteName}</option>`;
            $.each(siteData, function (key, value) {
                if (value.id != locationSites[siteIndex].siteId) {
                    selectSite += `<option style="text-transform: capitalize;" value="${value.id}">${value.name}</option>`;
                }
            });
            selectSite += '</select>';
            // <input type="hidden" value="${orgId}" name="ulocationOrg">

            entryHtml += `
                <div class="sl-item">
                    ${status}
                    <br>
                    <input type="hidden" name="empId" value="${EmployeeId}">
                    <div class="row loademplocation">
                        <div class="link col-lg-6">
                            <label class="control-label font-weight-bold">Site</label>
                            ${selectSite}
                        </div>
                        <div class="link col-lg-6">
                            <label class="control-label font-weight-bold">Service Locations </label>
                            <input type="text" class="form-control cursor-pointer mb-2 ulocation_ela_value" required name="ulocation_ela_value" value="${locationSites[siteIndex].serviceLocations}" readonly>
                            <input type="hidden" name="ulocation_ela[]" required value="${locationSites[siteIndex].serviceLocationIds}">
                        </div>
                    </div>
                </div>
                <hr>`;
        }


        container.append(entryHtml);
        container.find('.selecter').select2();
        container.find('.u_ela_edt').bootstrapMaterialDatePicker({ format: 'dddd DD MMMM YYYY - hh:mm:ss A' });

         // Now append your buttons to the container
         var rights = response.rights.split(",");
         var edit = rights[2];
         if(edit == 1)
         {
             var entryHtmlBtns = `
             <div class="d-flex justify-content-center p-1 uempLocationbtns">
                 <button type="button" id="uaddMoreEmpLocation" data-orgid="${orgId}" class="btn btn-success mr-2">
                     <i class="mdi mdi-plus"></i> Add More
                 </button>
                 <button type="button" id="uremoveBtn" class="btn btn-danger mr-2">
                     <i class="mdi mdi-minus"></i> Remove
                 </button>
                 <button type="submit" class="btn btn-success waves-effect waves-light ml-auto">
                     <span class="btn-label"><i class="fa fa-check"></i></span>Save
                 </button>
             </div>`;
             container.append(entryHtmlBtns);
         }

        Swal.close();
    } catch (error) {
        console.error(error);
        Swal.close();
    }
}

$(document).on('click', '#uaddMoreEmpLocation', function() {
    var orgId = $(this).data('orgid');

    var lastRow = $('.sl-item').last();
    var isFilled = true;
    lastRow.find('input, textarea, select').each(function() {
        if ($(this).val() === "" || $(this).val() === null) {
            if ($(this).attr('name') !== 'u_po_remarks[]') {
                $(this).addClass('requirefield');
                $(this).focus(function() {
                    $(this).removeClass("requirefield");
                });
                isFilled = false;
            }
        }
    });
    if(isFilled)
    {
        fetchSites(orgId, '.uinvSite', function(siteData) {
            var selectSite = '<select class="form-control selecter uinvSite mb-2" name="uinvSite[]">';
            selectSite += `<option selected disabled>Select Site</option>`;
            $.each(siteData, function(key, value) {
                selectSite += `<option style="text-transform: capitalize;" value="${value.id}">${value.name}</option>`;
            });
            selectSite += '</select>';
            // <input type="hidden" value="${orgId}" name="ulocationOrg">

            // Add both the site and cost center dropdowns to the form
            var newEntryHtml = `
            <div class="sl-item">
                <div class="row">
                    <div class="link col-lg-6">
                        <label class="control-label font-weight-bold">Site</label>
                        ${selectSite}
                    </div>

                    <div class="link col-lg-6">
                        <label class="control-label font-weight-bold">Service Locations <code class="uemp_location">(Select a Site)</code></label>
                        <input type="text" class="form-control cursor-pointer mb-2 ulocation_ela_value" required placeholder="Select Service Locations" name="ulocation_ela_value" readonly>
                        <input type="hidden" name="ulocation_ela[]" required>
                    </div>
            </div>
            <hr>`;

            // Insert the new entry before the uempCCbtns section
            $(newEntryHtml).insertBefore($('.uempLocationbtns'));

            // Initialize select2 for the newly added select elements
            $(".profiletimeline").find('.selecter').select2();

            // Event listener for site selection to enable and populate cost center
            $(".profiletimeline").find('.uinvSite:last').on('change', function() {
                var selectedSiteId = $(this).val();
                var currentRow = $(this).closest('.sl-item');
            });

        });
    }

});


async function LoadEmployeeCostCenter(EmployeeId) {
    try {
        let response = await $.ajax({
            url: "/hr/viewemp-cc/" + EmployeeId,
            type: 'GET',
            dataType: 'json',
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            }
        });

        const orgId = response.orgID;
        const orgName = response.orgName;

        // const SiteId = response.siteID;
        // const SiteName = response.siteName;
        const headCountCC = response.headCountCC;

        const headCountSiteId = response.headCountSiteId;
        const HeadCountSite = response.HeadCountSite;

        const positionName = response.positionName;

        const CostCenterIds = response.ccID.split(",");
        const CostCenterName = response.CostCenter.split(",");

        // const headCountSiteIds = response.headCountSiteId.split(",");
        // const HeadCountSites = response.HeadCountSites.split(",");

        const siteIDs = response.siteID.split(",");
        const siteNames = response.siteName.split(",");

        const CostCenterPercentages = response.CCPercentage.split(",");
        var status;
        // const StatusCode = response.status.split(",");
        const Status = response.status;
        // const edt = response.effective_timestamp.split(",");
        const edt = response.effective_timestamp;

        let container = $(".profiletimeline");
        container.empty();
        var entryHtml = `<div class="row">
                            <div class="col-md-6 p-1 text-center">
                                <b> Organization: <code>${orgName}</code></b>
                            </div>

                            <div class="col-md-6 p-1 text-center">
                                <b>HeadCount Site: <code>${HeadCountSite}</code></b>
                            </div>

                            <div class="col-md-6 p-1 text-center">
                                <b>HeadCount CostCenter: <code>${headCountCC}</code></b>
                            </div>

                              <div class="col-md-6 p-1 text-center">
                                <b>Position: <code>${positionName}</code></b>
                            </div>

                            <div class="col-md-6 mt-3" style="margin: 0 auto;border: 1px solid black;">
                                <div class="form-group">
                                    <div class="form-group has-custom m-b-5 text-center">
                                        <label class="control-label">Effective DateTime</label>
                                        <input type="text" required id="date-format" class="form-control input06 ecct" value="${edt}" name="u_cced">
                                    </div>
                                </div>
                            </div>
                        </div>`;
            if(Status == 1){
                status = '<span class="label label-success pull-right">Active</span>';
            }
            else{
                status = '<span class="label label-danger pull-right">InActive</span>';
            }
        for (let CCIndex = 0; CCIndex < CostCenterIds.length; CCIndex++) {
            // let orgData = await fetchOrganizationsPromise('null', '', '.u_empcc_org');
            let CCData = await fetchActivatedCostCentersPromise(siteIDs[CCIndex], '.u_empcc', CostCenterIds[CCIndex]);
            let siteData = await fetchSitesPromise(orgId, '.u_empcc_site', siteIDs[CCIndex]);

            var selectSite = '<select class="form-control selecter u_empcc_site mb-2" required name="u_empcc_site[]">';
            selectSite += `<option selected value="${siteIDs[CCIndex]}">${siteNames[CCIndex]}</option>`;

            $.each(siteData, function(key, value) {
                if (value.id != siteIDs[CCIndex]) {
                    selectSite += `<option style="text-transform: capitalize;" value="${value.id}">${value.name}</option>`;
                }
            });
            selectSite += '</select>';

            // var selectOrg = '<select class="form-control u_empcc_org mb-2" name="u_empcc_org[]">';
            // selectOrg += `<option selected value="${orgIDS[orgIndex]}">${orgName[orgIndex]}</option>`;
            // $.each(orgData, function(key, value) {
            //     if (value.id != orgIDS[orgIndex]) {
            //         selectOrg += `<option style="text-transform: capitalize;" value="${value.id}">${value.organization}</option>`;
            //     }
            // });
            // selectOrg += '</select>';

            // <div class="link col-lg-4">
            //             <label class="control-label font-weight-bold">Organization</label>
            //             ${selectOrg}
            //         </div>

            //         <div class="link col-lg-4">
            //             <label class="control-label font-weight-bold">Site</label>
            //             ${selectSite}
            //         </div>

            // var selectSite = '<select class="form-control u_empcc mb-2" name="u_empcc[]">';
            // selectSite += `<option selected value="${CostCenterIds[CCIndex]}">${CostCenterName[CCIndex]}</option>`;
            // $.each(CCData, function(key, value) {
            //     if (value.id != CostCenterIds[CCIndex]) {
            //         selectSite += `<option style="text-transform: capitalize;" value="${value.id}">${value.name}</option>`;
            //     }
            // });
            // selectSite += '</select>';


            var selectCC = '<select class="form-control selecter u_empcc mb-2" required name="u_empcc[]">';
            selectCC += `<option selected value="${CostCenterIds[CCIndex]}">${CostCenterName[CCIndex]}</option>`;
            $.each(CCData, function(key, value) {
                if (value.id != CostCenterIds[CCIndex]) {
                    selectCC += `<option style="text-transform: capitalize;"  value="${value.id}">${value.name}</option>`;
                }
            });
            selectCC += '</select>';
            entryHtml += `
                <div class="sl-item">
                ${status}
                <br>
                <input type="hidden" name="empId" value="${EmployeeId}">
                <div class="row loadempcc">
                    <div class="link col-lg-4">
                        <label class="control-label font-weight-bold">Site</label>
                        ${selectSite}
                    </div>
                    <div class="link col-lg-5">
                        <label class="control-label font-weight-bold">CostCenter</label>
                        ${selectCC}
                    </div>
                    <div class="link col-lg-3">
                        <label class="control-label font-weight-bold">Cost Center Percentage</label>
                        <div class="form-group has-custom m-b-5">
                            <input type="number" class="form-control required  input-sm mb-2" value="${CostCenterPercentages[CCIndex]}" name="u_ecc_percent[]" max="100" min="0" step="0.01" id="input0112">
                        </div>
                    </div>
                </div>
            </div>
            <hr>`;
        }
        container.append(entryHtml);
        container.find('.selecter').select2();
        container.find('.ecct').bootstrapMaterialDatePicker({ format : 'dddd DD MMMM YYYY - hh:mm:ss A' });
        // Now append your buttons to the container
        var rights = response.rights.split(",");
        var edit = rights[2];
        if(edit == 1)
        {
            var entryHtmlBtns = `
            <div class="d-flex justify-content-center p-1 uempCCbtns">
                <button type="button" id="uaddMoreEmpCC" data-orgid="${orgId}" class="btn btn-success mr-2">
                    <i class="mdi mdi-plus"></i> Add More
                </button>
                <button type="button" id="uremoveBtn" class="btn btn-danger mr-2">
                    <i class="mdi mdi-minus"></i> Remove
                </button>
                <button type="submit" class="btn btn-success waves-effect waves-light ml-auto">
                    <span class="btn-label"><i class="fa fa-check"></i></span>Save
                </button>
            </div>`;
            container.append(entryHtmlBtns);
        }
        Swal.close();

    } catch (error) {
        console.error(error);
        Swal.close();
    }
}

$(document).on('click', '#uaddMoreEmpCC', function() {
    var orgId = $(this).data('orgid');
    fetchSites(orgId, '.u_empcc_site', function(siteData) {
        var selectSite = '<select class="form-control selecter u_empcc_site mb-2" name="u_empcc_site[]">';
        selectSite += `<option selected disabled>Select Site</option>`;
        $.each(siteData, function(key, value) {
            selectSite += `<option style="text-transform: capitalize;" value="${value.id}">${value.name}</option>`;
        });
        selectSite += '</select>';

        // Initially, create the disabled Cost Center dropdown
        var selectCC = '<select class="form-control selecter u_empcc mb-2" name="u_empcc[]" disabled>';
        selectCC += `<option selected disabled>Select Cost Center</option>`;
        selectCC += '</select>';

        // Add both the site and cost center dropdowns to the form
        var newEntryHtml = `
        <div class="sl-item">
            <div class="row">
                <div class="link col-lg-4">
                    <label class="control-label font-weight-bold">Site</label>
                    ${selectSite}
                </div>
                <div class="link col-lg-5">
                    <label class="control-label font-weight-bold">Cost Center</label>
                    ${selectCC}
                </div>

                <div class="link col-lg-3">
                    <label class="control-label font-weight-bold">Cost Center Percentage</label>
                    <div class="form-group has-custom m-b-5">
                        <input type="number" class="form-control input-sm mb-2" placeholder="Enter Percentage" required name="u_ecc_percent[]" max="100" min="0" id="input0112">
                    </div>
                </div>
            </div>
        </div>
        <hr>`;

        // Insert the new entry before the uempCCbtns section
        $(newEntryHtml).insertBefore($('.uempCCbtns'));

        // Initialize select2 for the newly added select elements
        $(".profiletimeline").find('.selecter').select2();

        // Event listener for site selection to enable and populate cost center
        $(".profiletimeline").find('.u_empcc_site:last').on('change', function() {
            var selectedSiteId = $(this).val();
            var currentRow = $(this).closest('.sl-item');
            var costCenterDropdown = currentRow.find('.u_empcc');

            // Fetch cost centers based on the selected site and populate the dropdown
            fetchActivatedCostCenters(selectedSiteId, '.u_empcc', function(CCData) {
                costCenterDropdown.empty();
                costCenterDropdown.append('<option selected disabled>Select Cost Center</option>');
                $.each(CCData, function(key, value) {
                    costCenterDropdown.append('<option value="' + value.id + '">' + value.name + '</option>');
                });
                costCenterDropdown.prop('disabled', false);  // Enable the dropdown once the data is fetched
            });
        });

    });
});

function fetchOrganizationsPromise(orgID, arg1, arg2) {
    return new Promise((resolve, reject) => {
        fetchOrganizations(orgID, arg1, arg2, data => {
            resolve(data);
        });
    });
}

function fetchActivatedCostCentersPromise(siteID, arg1, ccID) {


    return new Promise((resolve, reject) => {
        fetchActivatedCostCenters(siteID, arg1, data => {
            resolve(data);
        }, err => {
            reject(err);
        }, ccID);
    });
}

function fetchSitesPromise(orgID, arg1, ccID) {
    return new Promise((resolve, reject) => {
        fetchSites(orgID, arg1, data => {
            resolve(data);
        }, ccID);
    });
}

// function doneTyping() {
//     $('#ajax-loader').show();
//     var mrNumber = $("#enterMR").val();
//     if (mrNumber === "") {
//         $("#pio_mr_error").text("MR # cannot be empty!");
//         $("#booking-status").hide();
//         $("#patientArrivalDetails").hide();
//         $('#ajax-loader').hide();
//     }
//     else
//     {
//         $("#pio_mr_error").text("");
//         $('#add_patientinout').find('.requirefield').removeClass('requirefield');
//         $(".text-danger").text("");
//         $("#amount_received").val("");
//         $("#pio_payMode option:first").prop("selected", true);
//         $("#pio_payMode").change();
//         $("#date-format").val("");

//         $('#pio_serviceMode').html("<option selected disabled>Select Service Mode</option>").prop('disabled',true);
//         $('#pio_service').html("<option selected disabled>Select Service</option>").prop('disabled',true);
//         var url = 'patient/pad_details/' + mrNumber;
//         $.ajax({
//             url: url,
//             type: 'GET',
//             dataType: 'json',
//             success: function(response) {
//                 $("#booking-status").show();
//                 $("#patientArrivalDetails").show();
//                 if(response.info)
//                 {
//                     $('#pio_mr_error').html(response.info);
//                     $("#booking-status").hide();
//                     $("#patientArrivalDetails").hide();
//                     $('#ajax-loader').hide();
//                     return;
//                 }
//                 else if(response.error && response.error == '404')
//                 {
//                     $("#scheduleOrg").hide();
//                     $("#scheduleSite").hide();
//                     $("#schedulePatientStatus").hide();
//                     $("#schedulePatientPriority").hide();
//                     $("#scheduleServiceSchedule").hide();
//                     $("#scheduleServiceLocation").hide();
//                     $("#schedulephysician").hide();
//                     $('input[name="booking_id"]').val('0');
//                     $("#booking-status .text-right code").text("UNBOOKED");
//                     $("#booking-status .text-left code").text("");
//                     $("#pio_remarks").show();
//                     $('textarea[name="pio_remarks"]').val('');
//                     $('#pio_emp').html("<option selected disabled>Select Physician</option>").prop('disabled',true);
//                     $('#pio_org').prop('disabled',false);
//                     $('#pio_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled',false);

//                     var orgId = $('#pio_org').val();
//                     if(orgId)
//                     {
//                         fetchOrganizationSites(orgId, '#pio_site', function(data) {
//                             $('#pio_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', false);
//                             $.each(data, function(key, value) {
//                                 $('#pio_site').append('<option value="' + value.id + '">' + value.name + '</option>');
//                             });
//                         });
//                         fetchServiceLocations(orgId, '#pio_serviceLocation', function(data) {
//                             $('#pio_serviceLocation').html("<option selected disabled value=''>Select Service Location</option>").prop('disabled', false);
//                             $.each(data, function(key, value) {
//                                 $('#pio_serviceLocation').append('<option value="' + value.id + '">' + value.name + '</option>');
//                             });
//                         });
//                     }
//                     else{
//                         $('#pio_site').html("<option selected disabled>Select Site</option>").prop('disabled',true);

//                         $('#pio_org').html("<option selected disabled>Select Organization</option>").prop('disabled',false);
//                         fetchOrganizations(null,null,'#pio_org', function(data) {
//                             var options = ["<option selected disabled value=''>Select Organization</option>"];
//                             $.each(data, function(key, value) {
//                                 options.push('<option value="' + value.id + '">' + value.organization + '</option>');
//                             });
//                             $('#pio_org').html(options.join('')).trigger('change').prop('disabled', false); // This is for Select2
//                         });
//                     }
//                     $('#pio_status').html("<option selected disabled>Select Patient Status</option>").prop('disabled',false);
//                     $('#pio_priority').html("<option selected disabled>Select Patient Priority</option>").prop('disabled',false);
//                     $('#pio_billingCC').html("<option selected disabled>Select Billing Cost Center</option>").prop('disabled',true);
//                     var patientStatusOptions = [
//                         {value: "new", label: "New"},
//                         {value: "follow up", label: "Follow Up"}
//                     ];
//                     patientStatusOptions.forEach(function(option) {
//                         $("#pio_status").append(new Option(option.label, option.value));
//                     });
//                     var patientPriorityOptions = [
//                         {value: "routine", label: "Routine"},
//                         {value: "urgent", label: "Urgent"},
//                         {value: "emergency", label: "Emergency"}

//                     ];
//                     patientPriorityOptions.forEach(function(option) {
//                         $("#pio_priority").append(new Option(option.label, option.value));
//                     });
//                     $('#pio_serviceLocation').html("<option selected disabled>Select Service Location</option>").prop('disabled',true);
//                     $('#pio_serviceSchedule').html("<option selected disabled>Select Service Location Schedule</option>").prop('disabled',true);
//                     $('#DateTime, #scheduleDatetime').hide();
//                 }
//                 else{
//                     $("#booking-status .text-right code").text("BOOKED");
//                     $("#booking-status .text-left code").text(response.remarks);
//                     $('textarea[name="pio_remarks"]').val(response.remarks);
//                     $('input[name="booking_id"]').val(response.id);

//                     $("#scheduleOrg").show();
//                     $('#pio_org').siblings('.select2-container').find('.select2-selection__arrow').hide();
//                     $('#pio_org').html("<option selected value='"+ response.org_id + "'> "+ response.orgName + "</option>").prop('disabled',true);

//                     $("#scheduleSite").show();
//                     $('#pio_site').siblings('.select2-container').find('.select2-selection__arrow').hide();
//                     $('#pio_site').html("<option selected value='"+ response.site_id + "'> "+ response.siteName + "</option>").prop('disabled',true);

//                     $("#schedulePatientStatus").show();
//                     $('#pio_status').siblings('.select2-container').find('.select2-selection__arrow').hide();
//                     $('#pio_status').html("<option selected value='"+ response.patient_status + "'> "+ capitalizeFirstLetterOfEachWord(response.patient_status) + "</option>").prop('disabled',true);

//                     $("#schedulePatientPriority").show();
//                     $('#pio_priority').siblings('.select2-container').find('.select2-selection__arrow').hide();
//                     $('#pio_priority').html("<option selected value='"+ response.patient_priority + "'> "+ capitalizeFirstLetterOfEachWord(response.patient_priority) + "</option>").prop('disabled',true);

//                     $("#scheduleServiceSchedule").show();
//                     $('#pio_serviceLocation').siblings('.select2-container').find('.select2-selection__arrow').hide();
//                     $('#pio_serviceLocation').html("<option selected value='"+ response.service_location_id + "'> "+ capitalizeFirstLetterOfEachWord(response.locationName) + "</option>").prop('disabled',true);

//                     $("#scheduleServiceLocation").show();
//                     $('#pio_serviceSchedule').siblings('.select2-container').find('.select2-selection__arrow').hide();
//                     $('#pio_serviceSchedule').html("<option selected value='"+ response.schedule_id + "'> "+ capitalizeFirstLetterOfEachWord(response.LocationSchedule) + "</option>").prop('disabled',true);

//                     var startFormatted = moment.unix(response.start_timestamp).format('MM/DD/YYYY h:mm A');
//                     var endFormatted = moment.unix(response.end_timestamp).format('MM/DD/YYYY h:mm A');
//                     $('#DateTime, #scheduleDatetime').show();
//                     $('#pio_scheduleDatetime').data('daterangepicker').setStartDate(startFormatted);
//                     $('#pio_scheduleDatetime').data('daterangepicker').setEndDate(endFormatted);
//                     $('#pio_scheduleDatetime').prop('disabled',true);
//                     $("#scheduleDatetime").text("Calendar Day & Time (Start - End)");

//                     $("#schedulephysician").show();
//                     $('#pio_emp').siblings('.select2-container').find('.select2-selection__arrow').hide();
//                     $('#pio_emp').html("<option selected value='"+ response.emp_id + "'> "+ capitalizeFirstLetterOfEachWord(response.empName) + "</option>").prop('disabled',true);
//                     var siteId = response.site_id;
//                     var serviceSelector = '#pio_service';
//                     fetchSiteServices(siteId, serviceSelector, function(data) {
//                         const $Service = $(serviceSelector);
//                         if (data && data.length > 0) {
//                             $Service.empty()
//                                  .append('<option selected disabled value="">Select Service</option>')
//                                  .append(data.map(({id, name}) => `<option value="${id}">${name}</option>`).join(''))
//                                  .prop('disabled', false)
//                                  .find('option:contains("Loading...")').remove();
//                                  $Service.trigger('change');
//                         } else {
//                                 Swal.fire({
//                                     text: 'Services are not Activated for selected Site',
//                                     icon: 'error',
//                                     confirmButtonText: 'OK',
//                                     allowOutsideClick: false
//                                 }).then((result) => {
//                                     if (result.isConfirmed) {
//                                         $Service.prop('disabled', true);
//                                     }
//                                 });
//                         }
//                     });
//                     $("#pio_remarks").hide();
//                 }
//                 $('#ajax-loader').hide();
//             },
//             error: function(jqXHR, textStatus, errorThrown) {
//                 $('#ajax-loader').hide();
//                 console.log(textStatus, errorThrown);
//             }
//         });

//     }
// }

function doneTyping() {
    $('#ajax-loader').show();
    var mrNumber = $("#enterMR").val();

    if (mrNumber === "") {
        $("#pio_mr_error").text("MR # cannot be empty!");
        $("#patientArrivalDetails").hide();
        $('#ajax-loader').hide();
    }
    else
    {
        $("#pio_mr_error").text("");
        $('#add_patientinout').find('.requirefield').removeClass('requirefield');
        $("#amount_received").val("");
        $("#pio_payMode option:first").prop("selected", true);
        $("#pio_payMode").change();
        $("#date-format").val("");
        // $('#pio_serviceMode').html("<option selected disabled>Select Service Mode</option>").prop('disabled',true);
        // $('#pio_service').html("<option selected disabled>Select Service</option>").prop('disabled',true);

        $("#pio_remarks").show();
        // $('textarea[name="pio_remarks"]').val('');
        // $('#pio_emp').html("<option selected disabled>Select Physician</option>").prop('disabled',true);
        // $('#pio_org').prop('disabled',false);
        // $('#pio_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled',false);

        var orgId = $('#pio_org').val();
        if(orgId)
        {
            // fetchOrganizationSites(orgId, '#pio_site', function(data) {
            //     $('#pio_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', false);
            //     $.each(data, function(key, value) {
            //         $('#pio_site').append('<option value="' + value.id + '">' + value.name + '</option>');
            //     });
            // });
            // fetchServiceLocations(orgId, '#pio_serviceLocation', function(data) {
            //     $('#pio_serviceLocation').html("<option selected disabled value=''>Select Service Location</option>").prop('disabled', false);
            //     $.each(data, function(key, value) {
            //         $('#pio_serviceLocation').append('<option value="' + value.id + '">' + value.name + '</option>');
            //     });
            // });
        }
        else{
            $('#pio_site').html("<option selected disabled>Select Site</option>").prop('disabled',true);

            $('#pio_org').html("<option selected disabled>Select Organization</option>").prop('disabled',false);
            fetchOrganizations(null,null,'#pio_org', function(data) {
                var options = ["<option selected disabled value=''>Select Organization</option>"];
                $.each(data, function(key, value) {
                    options.push('<option value="' + value.id + '">' + value.organization + '</option>');
                });
                $('#pio_org').html(options.join('')).trigger('change').prop('disabled', false); // This is for Select2
            });
        }

        // $('#pio_status').html("<option selected disabled>Select Patient Status</option>").prop('disabled',false);
        // $('#pio_priority').html("<option selected disabled>Select Patient Priority</option>").prop('disabled',false);
        // // $('#pio_billingCC').html("<option selected disabled>Select Billing Cost Center</option>").prop('disabled',true);
        // var patientStatusOptions = [
        //     {value: "new", label: "New"},
        //     {value: "follow up", label: "Follow Up"}
        // ];
        // patientStatusOptions.forEach(function(option) {
        //     $("#pio_status").append(new Option(option.label, option.value));
        // });
        // var patientPriorityOptions = [
        //     {value: "routine", label: "Routine"},
        //     {value: "urgent", label: "Urgent"},
        //     {value: "emergency", label: "Emergency"}

        // ];
        // patientPriorityOptions.forEach(function(option) {
        //     $("#pio_priority").append(new Option(option.label, option.value));
        // });
        // $('#pio_serviceLocation').html("<option selected disabled>Select Service Location</option>").prop('disabled',true);
        // $('#pio_serviceSchedule').html("<option selected disabled>Select Service Location Schedule</option>").prop('disabled',true);
        $("#patientArrivalDetails").show();
        setTimeout(function() {$('#ajax-loader').hide();}, 500);
    }
}

async function generateAdditionalFields(level, strategyId, existingData) {
    var fieldsHtml = '';

    for (var j = 2; j <= level; j++) {
        var parentCol = `parent_level${j-1}_id`;
        var parentName = `parent_level${j-1}_name`;
        await new Promise((resolve, reject) => {
            $.ajax({
                url: `/finance/accountleveloptions/${level}/${strategyId}`, // Updated the URL based on your requirement
                method: 'GET',
                success: function (response) {
                    var optionsHtml = '';
                    if(existingData)
                    {
                        var disabledSelect = '';
                        optionsHtml += `<option selected value="${existingData[parentCol]}">${existingData[parentName]}</option>`;
                    }
                    else
                    {
                        var disabledSelect = 'disabled';
                        optionsHtml += `<option selected disabled value=" ">Select Level ${j - 1} Account</option>`;
                    }

                    $.each(response['level' + (j - 1)], function (key, value) {
                         if (!existingData || key !== existingData[parentCol]) {
                            optionsHtml += `<option value="${key}">${value}</option>`;
                        }
                    });
                    fieldsHtml += `
                        <div class="col-md-6">
                            <div class="form-group row m-b-5">
                                <div class="col-md-12">
                                    <div class="form-group m-b-5">
                                        <label class="control-label">Select Level ${j - 1} Account </label>
                                        <select class="form-control account_levels selecter p-0 acnt_lvl${j - 1}" name="acnt_lvl${j - 1}[]" style="color:#222d32" ${j > 2 ? `${disabledSelect}` : ''}>
                                            ${optionsHtml}
                                        </select>
                                        <span class="text-danger acnt_lvl${j - 1}_error"></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
                    resolve();
                },
                error: function (error) {
                    console.log(error);
                    reject();
                }
            });
        });
    }
    return fieldsHtml;
}

async function showLevel(currentLevel, maxLevel, accountStrategyId) {
    $("#basic-form").empty();
    $("#compulsory-form").empty();
    $("#compulsory-form-one").empty();

    $("#compulsory-form").append(`
        <div class="col-md-12 mb-3" style="text-align: center;background-color: #d5d1d1;padding: 5px;">
            <h3 class="m-b-0 m-t-0">Level ${currentLevel}</h3>
        </div>
        <input type="hidden" value="${currentLevel}" name="account_level" />
        <input type="hidden" value="${accountStrategyId}" name="strategyId" />
    `);
    var existingAccountLevelData = await fetchExistingAccountLevelData(accountStrategyId, currentLevel);

    if (existingAccountLevelData && existingAccountLevelData.some(data => data.names))
    {
        $("#compulsory-form").append(`
            <input type="hidden" value="0" name="initial_setup" />
        `);
        if (currentLevel === maxLevel) {
            let effectiveTimestamp = existingAccountLevelData[0].effective_timestamp;
            if(effectiveTimestamp != '')
            {
                let formattedDateTime = moment(effectiveTimestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $("#compulsory-form").append(`
                    <div class="col-md-6" style="margin:0 auto;">
                        <div class="form-group row">
                            <div class="col-md-12">
                                <div class="form-group has-custom m-b-5">
                                    <label class="control-label">Effective DateTime</label>
                                    <input type="text" id="date-format2" value="${formattedDateTime}" name="account_edt" class="form-control input06 dt">
                                </div>
                                <span class="text-danger" id="account_edt_error"></span>
                            </div>
                        </div>
                    </div>
                `);
            }
            else
            {
                $("#compulsory-form").append(`
                    <div class="col-md-6" style="margin:0 auto;">
                        <div class="form-group row">
                            <div class="col-md-12">
                                <div class="form-group has-custom m-b-5">
                                    <label class="control-label">Effective DateTime</label>
                                    <input type="text" id="date-format2" name="account_edt" class="form-control input06 dt" placeholder="Select Effective Date & Time">
                                </div>
                                <span class="text-danger" id="account_edt_error"></span>
                            </div>
                        </div>
                    </div>
                `);
            }

            $('#date-format2').bootstrapMaterialDatePicker({ format : 'dddd DD MMMM YYYY - hh:mm:ss A' });
        }
        for (let data of existingAccountLevelData) {

            let additionalFieldsHtml = await generateAdditionalFields(currentLevel, accountStrategyId, data);
            $("#basic-form").append(`
                <div class="cloned-form row col-lg-12">
                    ${additionalFieldsHtml}
                    <div class="col-md-6">
                        <div class="form-group row m-b-5">
                            <div class="col-md-12">
                                <div class="form-group m-b-5">
                                    <label class="control-label">Enter Level ${currentLevel} Account Description </label>
                                    <div class="tags-default">
                                        <input type="text" data-role="tagsinput" class="account_desc" value="${data.names}" name="account_desc[]" placeholder="Assets, Funds, Liabilities, etc" />
                                        <span class="text-danger account_desc_error"></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `);
        }
        var btnTxt = `Next`;
    }
    else{
        $("#compulsory-form").append(`
            <input type="hidden" value="1" name="initial_setup" />
        `);
        if (currentLevel === maxLevel) {
            $("#compulsory-form").append(`
                <div class="col-md-6" style="margin:0 auto;">
                    <div class="form-group row">
                        <div class="col-md-12">
                            <div class="form-group has-custom m-b-5">
                                <label class="control-label">Effective DateTime</label>
                                <input type="text" id="date-format2" name="account_edt" class="form-control input06 dt" placeholder="Select Effective Date & Time">
                            </div>
                            <span class="text-danger" id="account_edt_error"></span>
                        </div>
                    </div>
                </div>
            `);
            $('#date-format2').bootstrapMaterialDatePicker({ format : 'dddd DD MMMM YYYY - hh:mm:ss A' });
        }

        $("#basic-form").append(`
            <div class="cloned-form row col-lg-12">
                ${await generateAdditionalFields(currentLevel, accountStrategyId)}
                <div class="col-md-6">
                    <div class="form-group row m-b-5">
                        <div class="col-md-12">
                            <div class="form-group m-b-5">
                                <label class="control-label">Enter Level ${currentLevel} Account Description </label>
                                <div class="tags-default">
                                    <input type="text" data-role="tagsinput" class="account_desc" name="account_desc[]" placeholder="Assets, Funds, Liabilities, etc" />
                                    <span class="text-danger account_desc_error"></span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `);


        var btnTxt = `Click Here to Configure Level ${currentLevel + 1}`;
    }



    setupDropdownChangeHandlers(currentLevel);

    if(currentLevel > 1)
    {
        var Clonedcount = $(".cloned-form").length;
        if(Clonedcount >= 1){
            var showNone = "style='display:block'";
        }
        else{
            var showNone = "style='display:none'";
        }
        $("#compulsory-form-one").append(`
            <div class="col-md-12">
                <div class="d-flex p-1">
                    <button type="button" id="cloneaccountlvl" class="btn btn-success mr-2">
                        <i class="mdi mdi-plus"></i> Add More
                    </button>
                    <button type="button" id="removeaccountlvl" ${showNone} class="btn btn-danger mr-2">
                        <i class="mdi mdi-minus"></i> Remove
                    </button>
                </div>
            </div>
        `);
    }

    $('input[data-role="tagsinput"]').tagsinput();
    // $('.dt').bootstrapMaterialDatePicker({ format: 'dddd DD MMMM YYYY - hh:mm:ss A' });

    $("#compulsory-form-one").append(`
        <div class="col-md-12 text-right">
            ${currentLevel < maxLevel
                ? `<button type="submit" class="btn btn-default exit_al" data-dismiss="modal">Exit</button>
                   <button type="submit" class="btn btn-primary" id="btnNext" data-level="${currentLevel + 1}">${btnTxt}</button>`
                : `<button type="submit" class="btn btn-default exit_al" data-dismiss="modal">Exit</button> <button type="submit" class="btn btn-success" id="btnNext">Submit</button>`}
        </div>
    `);


    $('#btnNext').on('click', async function (event) {
        event.preventDefault();
        var form = $("#setup_accountLevel");
        var nextLevel = $(this).data('level');
        var data = form.serializeArray();
        if (validateAccountLevelForm()) {
            data.push({ name: 'maxlevel', value: maxLevel });
            $.ajax({
                url: "/finance/setupaccountlevel",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function () {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function (response) {
                    if ('success' in response) {
                        Swal.fire({
                            text: response.success,
                            icon: 'success',
                            allowOutsideClick: false,
                            confirmButtonText: response.btntext
                        }).then((result) => {
                            if (result.isConfirmed) {
                                showLevel(nextLevel, maxLevel, accountStrategyId);
                                $('#setup-accountLevel').modal({
                                    backdrop: 'static',
                                    keyboard: false,
                                });
                                $('#setup-accountLevel').find('.close').hide();
                            }
                        });
                        $('#setup-accountLevel').modal('hide');
                    }
                    else if ('info' in response) {
                        Swal.fire({
                            text: response.info,
                            icon: 'info',
                            confirmButtonText: "Ok"
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#basic-form').empty();
                                $('#setup-accountLevel').modal('hide');
                                $('#view-accountStrategySetup').DataTable().ajax.reload();
                            }
                        });
                    }
                    else if ('finalize' in response) {
                        Swal.fire({
                            text: response.finalize,
                            icon: 'success',
                            confirmButtonText: response.btntext
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#basic-form').empty();
                                $('#setup-accountLevel').modal('hide');
                                $('#view-accountStrategySetup').DataTable().ajax.reload();
                            }
                        });
                    }
                },
                error: function (error) {
                    console.log(error);
                }
            });
        }
    });

    $('#cloneaccountlvl').on('click', function () {
        if (!validateAccountLevelForm()) {
            return;
        }
        var Clonedcount = $(".cloned-form").length;
        if(Clonedcount >= 1)
        {
            $('#removeaccountlvl').show();
        }
        else{
            $('#removeaccountlvl').hide();
        }
        var clonedForm = $(".cloned-form:last").clone();
        clonedForm.find('input').val('');
        clonedForm.find('.bootstrap-tagsinput').remove();
        clonedForm.find('select').each(function () {
            if ($(this).hasClass('acnt_lvl1')) {
                $(this).prop('disabled', false);
            } else {
                $(this).prop('disabled', true);
            }
        });
        $("#basic-form").append(clonedForm);
        clonedForm.find('input[data-role="tagsinput"]').tagsinput();
        setupDropdownChangeHandlers(currentLevel, clonedForm);

    });

    $('#removeaccountlvl').on('click', function () {
        var Clonedcount = $(".cloned-form").length;
        if(Clonedcount == 2)
        {
            $('#removeaccountlvl').hide();
        }
        else{
            $('#removeaccountlvl').show();
        }
        var formCount = $(".cloned-form").length;
        if (formCount > 1) {
            $("#basic-form .cloned-form:last").remove();
        }
    });


}

function validateAccountLevelForm(validateLastClonedForm) {
    var lastClonedForm = $(".cloned-form").last();
    var validateData = lastClonedForm.find('input').serializeArray();
    var selects = lastClonedForm.find('select');
    var resp = true;
    $(validateData).each(function (i, field) {
        if ((field.value == '') || (field.value == null)) {
            var FieldName = field.name;
            var FieldClass = '.' + field.name.replace(/\[\]/g, '') + "_error";
            lastClonedForm.find(FieldClass).text("This field is required");
            var a = (lastClonedForm.find('input[name="' + FieldName + '"]').prev());
            var innerInput = a.children('input[type="text"]');
            lastClonedForm.find('input[name="' + FieldName + '"]').prev().addClass('requirefield');
            innerInput.focus(function () {
                lastClonedForm.find(FieldClass).text("");
                lastClonedForm.find('input[name="' + FieldName + '"]').prev().removeClass("requirefield");
            });
            resp = false;
        }
    });
    selects.each(function () {
        var select = $(this);
        if (select.val() == '' || select.val() == null) { // Check if value is empty or placeholder
            var selectName = select.attr('name');
            var selectErrorClass = '.' + selectName.replace(/\[\]/g, '') + "_error";
            lastClonedForm.find(selectErrorClass).text("This field is required");
            select.addClass('requirefield');
            select.focus(function () {
                lastClonedForm.find(selectErrorClass).text("");
                select.removeClass("requirefield");
            });
            resp = false;
        }
    });

    var effectiveDateTimeField = $('input[name="account_edt"]');

    if (effectiveDateTimeField.length > 0) {
        var effectiveDateTimeValue = effectiveDateTimeField.val();
        if (!effectiveDateTimeValue) {
            $('#account_edt_error').text("Effective DateTime is required");
            effectiveDateTimeField.addClass('requirefield');
            effectiveDateTimeField.focus(function () {
                $('#account_edt_error').text("");
                effectiveDateTimeField.removeClass("requirefield");
            });
            resp = false;
        }
    }

    return resp;
}

function setupDropdownChangeHandlers(level, context = document) {
    for (let i = 3; i <= level; i++) {
        $(context).find(`.acnt_lvl${i - 2}`).off('change').on('change', function() {
            let levelId = $(this).val();
            let colmn = `parent_level${i - 2}_id`;
            $(context).find(`.acnt_lvl${i-1}`).prop('disabled', false);
            var nextDropdown = $(context).find(`.acnt_lvl${i-1}`);

            $.ajax({
                url: `/finance/getchildlevel/${levelId}/${colmn}/${i-1}`,
                method: 'GET',
                success: function(response) {
                    if (response && response.length > 0) {
                    populateDropdown(nextDropdown, response);
                    } else {
                        Swal.fire({
                            text: 'Account Level are not available for selected options',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                        nextDropdown.prop('disabled', true);
                    }
                }
            });
        });
    }
}

function populateDropdown(dropdownSelector, data) {
    let accountLevel = data.length > 0 ? data[0].account_level : null;
    let optionsHtml = '';

    if (accountLevel !== null) {
        optionsHtml += `<option selected disabled>Select Level ${accountLevel} Account</option>`;
    }
    // optionsHtml += `<option selected disabled>Select Level ${item.account_level} Account</option>`;
    data.forEach(function(item) {
        optionsHtml += `<option value="${item.id}">${item.name}</option>`;
    });
    $(dropdownSelector).html(optionsHtml);
}

async function fetchExistingAccountLevelData(strategyId, level) {
    var result = null;
    await $.ajax({
        url: `/finance/getaccountleveldata/${strategyId}/${level}`,
        method: 'GET',
        success: function (data) {
            result = data;
        },
        error: function (error) {
            console.log('Error fetching existing data:', error);
            result = null;
        }
    });
    return result;
}

function updateNestableLoop(data) {
    var nestableList = $('#nestable').find('.dd-list');
    nestableList.empty();
    $.each(data, function (index, item) {
        var listItem = $('<li class="dd-item" data-id="' + item.id + '"><div class="dd-handle1">' + item.name + '</div></li>');
        if (item.children && item.children.length > 0) {
            var nestedList = $('<ol class="dd-list"></ol>');
            updateNestedList(item.children, nestedList);
            listItem.append(nestedList);
        }
        nestableList.append(listItem);
    });

    $('#nestable').nestable();
}

function updateNestedList(children, nestedList) {
    $.each(children, function (index, item) {
        var listItem = $('<li class="dd-item" data-id="' + item.id + '"><div class="dd-handle1">' + item.name + '</div></li>');
        if (item.children && item.children.length > 0) {
            var nestedChildList = $('<ol class="dd-list"></ol>');
            updateNestedList(item.children, nestedChildList);
            listItem.append(nestedChildList);
        }
        nestedList.append(listItem);
    });
}

function updateHiddenCostCenter() {
    var selectedIds = [];
    var selectedNames = [];
    $('input[name="selectedCC[]"]:checked').each(function() {
        selectedIds.push($(this).data('id'));
        selectedNames.push($(this).data('name'));
    });
    $('input[name="cc_value"]').val(selectedNames.join(','));
    $('input[name="cc_name[]"]').val(selectedIds.join(','));
}

function updateHiddenServiceLocation() {
    var selectedIds = [];
    var selectedNames = [];
    $('input[name="selectedSL[]"]:checked').each(function() {
        selectedIds.push($(this).data('id'));
        selectedNames.push($(this).data('name'));
    });
    $('input[name="sl_value"]').val(selectedNames.join(','));
    $('input[name="sl_name[]"]').val(selectedIds.join(','));
}

let activeLocationType = null; // 'source' or 'destination'
let slUiBuilt = false;
$('#source_locations_value').on('click', function() {
    activeLocationType = 'source';
    // FetchAllServiceLocation('#source_locations_value', '#add_invtransactiontype');
    if (!slUiBuilt) {
        FetchAllServiceLocation('#source_locations_value', '#add_invtransactiontype');
        slUiBuilt = true;
    } else {
        syncModalFromActiveField();
    }

});

$('#destination_locations_value').on('click', function() {
    activeLocationType = 'destination';
    // FetchAllServiceLocation('#destination_locations_value', '#add_invtransactiontype');
     if (!slUiBuilt) {
        FetchAllServiceLocation('#destination_locations_value', '#add_invtransactiontype');
        slUiBuilt = true;
    } else {
        syncModalFromActiveField();
    }

});

function syncModalFromActiveField() {
  // Uncheck everything first
  $('input[name="selectedSL[]"]').prop('checked', false);

  // Get CSV from the appropriate hidden input and check those
  const csv = (activeLocationType === 'destination')
    ? $('input[name="destination_locations[]"]').val()
    : $('input[name="source_locations[]"]').val();

  const ids = (csv || '').split(',').filter(Boolean);

  ids.forEach(id => {
    $('#sl_' + id).prop('checked', true);
  });

  // Update "Select All" switches to reflect current state
  const invTotal = $('.inventory-sl').length;
  const invChecked = $('.inventory-sl:checked').length;
  $('#selectAllInventory').prop('checked', invTotal > 0 && invTotal === invChecked);

  const nonInvTotal = $('.non-inventory-sl').length;
  const nonInvChecked = $('.non-inventory-sl:checked').length;
  $('#selectAllNonInventory').prop('checked', nonInvTotal > 0 && nonInvTotal === nonInvChecked);
}

function updateHiddenAllServiceLocation() {
    var selectedIds = [];
    var selectedNames = [];
    $('input[name="selectedSL[]"]:checked').each(function() {
        selectedIds.push($(this).data('id'));
        selectedNames.push($(this).data('name'));
    });

    if (activeLocationType === 'source') {
        $('#source_locations_value').val(selectedNames.join(', '));
        $('input[name="source_locations[]"]').val(selectedIds.join(','));
    } 
    else if (activeLocationType === 'destination') {
        $('#destination_locations_value').val(selectedNames.join(', '));
        $('input[name="destination_locations[]"]').val(selectedIds.join(','));
    }

}

// function updateHiddenAllServiceLocation() {
//     var selectedIds = [];
//     var selectedNames = [];
//     $('input[name="selectedSL[]"]:checked').each(function() {
//         selectedIds.push($(this).data('id'));
//         selectedNames.push($(this).data('name'));
//     });
//     $('input[name="source_locations_value"]').val(selectedNames.join(','));
//     $('input[name="source_locations[]"]').val(selectedIds.join(','));
// }



function updateHiddenServiceModes() {
    var selectedIds = [];
    var selectedNames = [];
    $('input[name="selectedSM[]"]:checked').each(function() {
        selectedIds.push($(this).data('id'));
        selectedNames.push($(this).data('name'));
    });
    $('input[name="servicemode_value"]').val(selectedNames.join(','));
    $('input[name="act_s_mode[]"]').val(selectedIds.join(','));
}

var preCheckedServices = {};
function updateHiddenServices() {
    // var selectedIds = [];
    // var selectedNames = [];
    var selectedIds = Object.keys(preCheckedServices);
    var selectedNames = Object.values(preCheckedServices);

    // $('input[name="selectedServices[]"]:checked').each(function() {
    //     selectedIds.push($(this).data('id'));
    //     selectedNames.push($(this).data('name'));
    // });
    $('input[name="service_sa_value"]').val(selectedNames.join(','));
    $('input[name="service_sa[]"]').val(selectedIds.join(','));
}

// var activeRowServiceLocation;

// // When the modal is triggered, store the active row
// $('.duplicate').on('click', '.location_ela_value', function() {
//     activeRowServiceLocation = $('.duplicate').last(); // Store the reference to the last duplicate row
// });

// function updateHiddenServiceLocations() {
//     var selectedIds = [];
//     var selectedNames = [];
//     $('input[name="selectedServiceLocation[]"]:checked').each(function() {
//         selectedIds.push($(this).data('id'));
//         selectedNames.push($(this).data('name'));
//     });
//     $('input[name="location_ela_value"]').val(selectedNames.join(','));
//     $('input[name="location_ela[]"]').val(selectedIds.join(','));
// }

// function updateHiddenServiceLocations() {
//     var selectedIds = [];
//     var selectedNames = [];

//     var lastRow = $('.duplicate').last();

//     $('input[name="selectedServiceLocation[]"]:checked').each(function() {
//         selectedIds.push($(this).data('id'));
//         selectedNames.push($(this).data('name'));
//     });

//     lastRow.find('input[name="location_ela_value"]').val(selectedNames.join(','));
//     lastRow.find('input[name="location_ela[]"]').val(selectedIds.join(','));
// }




var activeRowServiceLocation;

$(document).on('click', '.location_ela_value', function () {
    activeRowServiceLocation = $(this).closest('.duplicate');
    var locationValues = activeRowServiceLocation.find('input[name="location_ela_value"]').val();

    $('#multiServicelocation input[name="selectedServiceLocation[]"]').prop('checked', false);
    if (locationValues) {
        var selectedLocations = locationValues.split(',');
        selectedLocations.forEach(function (location) {
            $('#multiServicelocation input[name="selectedServiceLocation[]"]').each(function () {
                if ($(this).data('name') === location.trim()) {
                    $(this).prop('checked', true);
                }
            });
        });
    }
    $('#empLocationAllocationModal').modal('show');
});

// function updateHiddenServiceLocations() {
//     var selectedIds = [];
//     var selectedNames = [];

//     $('#multiServicelocation input[name="selectedServiceLocation[]"]:checked').each(function () {
//         selectedIds.push($(this).data('id'));
//         selectedNames.push($(this).data('name'));
//     });

//     if (activeRowServiceLocation) {
//         activeRowServiceLocation.find('input[name="location_ela_value"]').val(selectedNames.join(','));
//         activeRowServiceLocation.find('input[name="location_ela[]"]').val(selectedIds.join(','));
//     }
// }

// $('#multiServicelocation').on('change', 'input[name="selectedServiceLocation[]"]', function () {
//     updateHiddenServiceLocations();
// });
var selectedServiceLocations = {};
function updateHiddenServiceLocations() {
    var selectedIds = Object.keys(selectedServiceLocations);
    var selectedNames = Object.values(selectedServiceLocations);

    if (activeRowServiceLocation) {
        activeRowServiceLocation.find('input[name="location_ela_value"]').val(selectedNames.join(','));
        activeRowServiceLocation.find('input[name="location_ela[]"]').val(selectedIds.join(','));
    }
}

$('#multiServicelocation').on('change', 'input[name="selectedServiceLocation[]"]', function () {
    var id = $(this).data('id');
    var name = $(this).data('name');

    if ($(this).is(':checked')) {
        selectedServiceLocations[id] = name;
    } else {
        delete selectedServiceLocations[id];
    }
    updateHiddenServiceLocations();
});

$('#emplocationallocationtable').on('draw.dt', function () {
    $.each(selectedServiceLocations, function(id, name) {
        $('#ela_' + id).prop('checked', true);
    });
});

function updateHiddenServicesForActivation() {
    var selectedIds = [];
    var selectedNames = [];
    $('input[name="activationServices[]"]:checked').each(function() {
        selectedIds.push($(this).data('id'));
        selectedNames.push($(this).data('name'));
    });
    $('.activationMsg,.s_modeMsg').hide();
    $('#servicemode_value').prop('disabled', false);
    $('input[name="service_name"]').val(selectedNames.join(','));
    $('input[name="act_s_service[]"]').val(selectedIds.join(','));

}


function updateHiddenCCForServiceActivation() {
    var billingccGroupedByService = {};
    var performingccGroupedByService = {};
    var servicemodesGroupedByService = {};

    // Group billing cost centers by service ID and service name
    $('input[name="service_billingCC[]"]:checked').each(function() {
        var serviceId = $(this).data('service-id');
        var serviceName = $(this).data('service-name');
        var costCenterName = $(this).data('name');
        var costCenterId = $(this).data('id');

        if (!billingccGroupedByService[serviceId]) {
            billingccGroupedByService[serviceId] = { name: serviceName, costCenters: [] };
        }
        billingccGroupedByService[serviceId].costCenters.push({ id: costCenterId, name: costCenterName });
    });

    // Group performing cost centers by service ID and service name
    $('input[name="service_performingCC[]"]:checked').each(function() {
        var serviceId = $(this).data('service-id');
        var serviceName = $(this).data('service-name');
        var costCenterName = $(this).data('name');
        var costCenterId = $(this).data('id');
        if (!performingccGroupedByService[serviceId]) {
            performingccGroupedByService[serviceId] = { name: serviceName, costCenters: [] };
        }
        performingccGroupedByService[serviceId].costCenters.push({ id: costCenterId, name: costCenterName });
    });

    $('input[name="service_modes[]"]:checked').each(function() {
        var serviceId = $(this).data('service-id');
        var serviceName = $(this).data('service-name');
        var serviceModeName = $(this).data('name');
        var serviceModeId = $(this).data('id');


        if (!servicemodesGroupedByService[serviceId]) {
            servicemodesGroupedByService[serviceId] = { name: serviceName, serviceModes: [] };
        }
        servicemodesGroupedByService[serviceId].serviceModes.push({ id: serviceModeId, name: serviceModeName });
    });

    // Format the results into arrays for each service, using service names
    var billingccDisplayArray = [];
    var billingccIdArray = {};
    var performingccDisplayArray = [];
    var performingccIdArray = {};
    var serviceModeDisplayArray = [];
    var serviceModeIdArray = {};

    for (var serviceId in billingccGroupedByService) {
        var billingArray = billingccGroupedByService[serviceId].costCenters.map(cc => cc.name);
        var billingIdArray = billingccGroupedByService[serviceId].costCenters.map(cc => cc.id);
        billingccDisplayArray.push(`${billingccGroupedByService[serviceId].name}: [${billingArray.join(', ')}]`);
        billingccIdArray[serviceId] = billingIdArray;
    }

    for (var serviceId in performingccGroupedByService) {
        var performingArray = performingccGroupedByService[serviceId].costCenters.map(cc => cc.name);
        var performingIdArray = performingccGroupedByService[serviceId].costCenters.map(cc => cc.id);
        performingccDisplayArray.push(`${performingccGroupedByService[serviceId].name}: [${performingArray.join(', ')}]`);
        performingccIdArray[serviceId] = performingIdArray;
    }

    for (var serviceId in servicemodesGroupedByService) {
        var serviceModeArray = servicemodesGroupedByService[serviceId].serviceModes.map(sm => sm.name);
        var modeIdArray = servicemodesGroupedByService[serviceId].serviceModes.map(sm => sm.id);
        serviceModeDisplayArray.push(`${servicemodesGroupedByService[serviceId].name}: [${serviceModeArray.join(', ')}]`);
        serviceModeIdArray[serviceId] = modeIdArray;
    }
    $('input[name="s_billing_cc"]').val(billingccDisplayArray.join(', '));
    $('input[name="act_s_billingcc[]"]').val(JSON.stringify(billingccIdArray));

    $('input[name="s_performing_cc"]').val(performingccDisplayArray.join(', '));
    $('input[name="act_s_performingcc[]"]').val(JSON.stringify(performingccIdArray));

    $('input[name="servicemode_value"]').val(serviceModeDisplayArray.join(', '));
    $('input[name="act_s_mode[]"]').val(JSON.stringify(serviceModeIdArray));
}



function updateHiddenUpdatedServiceModes() {
    var selectedIds = [];
    var selectedNames = [];
    $('input[name="uselectedSM[]"]:checked').each(function() {
        selectedIds.push($(this).data('id'));
        selectedNames.push($(this).data('name'));
    });
    $('input[name="u_ssm[]"]').val(selectedIds.join(','));
    $('input[name="uservicemode_value"]').val(selectedNames.join(','));
}


function updateHiddenUpdatedBillingCC() {
    var selectedIds = [];
    var selectedNames = [];
    $('input[name="uselectedbillingCC[]"]:checked').each(function() {
        selectedIds.push($(this).data('id'));
        selectedNames.push($(this).data('name'));
    });
    $('input[name="ubillingcc_id[]"]').val(selectedIds.join(','));
    $('input[name="ubillingcc_value"]').val(selectedNames.join(','));
}

function updateHiddenUpdatedPerformingCC() {
    var selectedIds = [];
    var selectedNames = [];
    $('input[name="uselectedperformingCC[]"]:checked').each(function() {
        selectedIds.push($(this).data('id'));
        selectedNames.push($(this).data('name'));
    });
    $('input[name="uperformingcc_id[]"]').val(selectedIds.join(','));
    $('input[name="uperformingcc_value"]').val(selectedNames.join(','));
}

function updateHiddenUpdatedSourceLocation() {
    var selectedIds = [];
    var selectedNames = [];
    $('input[name="uselectedSL[]"]:checked').each(function() {
        selectedIds.push($(this).data('id'));
        selectedNames.push($(this).data('name'));
    });
    $('input[name="u_source_locations[]"]').val(selectedIds.join(','));
    $('input[name="u_source_locations_value"]').val(selectedNames.join(','));
}

function updateHiddenUpdatedDestinationLocation() {
    var selectedIds = [];
    var selectedNames = [];
    $('input[name="uselectedDL[]"]:checked').each(function() {
        selectedIds.push($(this).data('id'));
        selectedNames.push($(this).data('name'));
    });
    $('input[name="u_destination_locations[]"]').val(selectedIds.join(','));
    $('input[name="u_destination_locations_value"]').val(selectedNames.join(','));
}

var upreCheckedServices = {};

function updateHiddenUpdatedServices() {
    // var selectedIds = [];
    // var selectedNames = [];
    var selectedIds = Object.keys(upreCheckedServices);
    var selectedNames = Object.values(upreCheckedServices);

    // $('input[name="uselectedServices[]"]:checked').each(function() {
    //     selectedIds.push($(this).data('id'));
    //     selectedNames.push($(this).data('name'));
    // });
    $('input[name="u_saservice[]"]').val(selectedIds.join(','));
    $('input[name="uservice_value"]').val(selectedNames.join(','));
}

function handleRequisitionEPISubmission(formId,modalId) {
    var form = $(formId);
    // var data = form.serializeArray();
    var data = SerializeForm(form);
    var actionType = form.find('[name="action"]').val();

    var resp = true;
    let act = form.find('[name="action"]').val();

    // First validate each duplicate row individually (only if duplicate divs exist in this form)
    if (form.find(".duplicate").length > 0) {
        form.find(".duplicate").each(function() {
            var row = $(this);
            row.find('input, textarea, select').each(function() {
                var elem = $(this);
                var value = elem.val();
                var fieldName = elem.attr('name');
                
                if (fieldName && typeof fieldName === 'string') {
                    var cleanFieldName = fieldName.replace(/[\[\]]/g, '');
                    var errorField = row.find('.' + cleanFieldName + '_error');
                    
                    if (!value || value === "" || (elem.is('select') && value === null)) {
                        errorField.text("This field is required");
                        if (elem.is('select')) {
                            elem.next('.select2-container').find('.select2-selection').addClass('requirefield');
                            elem.on('select2:open', function() {
                                errorField.text("");
                                elem.next('.select2-container').find('.select2-selection').removeClass("requirefield");
                            });
                        } else {
                            elem.addClass('requirefield');
                            elem.focus(function() {
                                errorField.text("");
                                elem.removeClass("requirefield");
                            });
                        }
                        resp = false;
                    } else {
                        errorField.text("");
                        if (elem.is('select')) {
                            elem.next('.select2-container').find('.select2-selection').removeClass('requirefield');
                        } else {
                            elem.removeClass('requirefield');
                        }
                    }
                }
            });
        });
    }

    $(data).each(function(i, field) {
        // if (((field.value == '') || (field.value == null)) && (field.name != 'repi_remarks')) {
        if ((field.value === '' || field.value === null) && field.name !== 'repi_remarks' && !(field.name === 'physician' && actionType === 'e'))
        {
            var FieldName = field.name;
            
            // Check if FieldName exists and is a string
            if (FieldName && typeof FieldName === 'string') {
                // Skip validation for service and service mode fields if duplicate divs exist (handled above)
                if (form.find(".duplicate").length > 0 && (FieldName === 'sevice_id[]' || FieldName === 'servicemode_id[]')) {
                    return; // Skip this field - already handled by duplicate validation
                }
                
                // Clean the field name for CSS selector (remove [] and escape special characters)
                var cleanFieldName = FieldName.replace(/[\[\]]/g, '');
                var FieldClass = '.' + cleanFieldName + "_error";
                var FieldSelector = '[name="' + FieldName + '"]';

                // Show error message
                $(FieldClass).text("This field is required");

                // Handle input and textarea
                form.find('input' + FieldSelector + ', textarea' + FieldSelector).each(function () {
                    $(this).addClass('requirefield').on('focus', function () {
                        $(FieldClass).text("");
                        $(this).removeClass("requirefield");
                    });
                });

                // Handle select2 dropdown
                form.find('select' + FieldSelector).each(function () {
                    var $select = $(this);
                    $select.next('.select2-container').find('.select2-selection').addClass('requirefield');

                    // Clear error when select2 is opened (or use 'change' if preferred)
                    $select.on('select2:open', function () {
                        $(FieldClass).text("");
                        $select.next('.select2-container').find('.select2-selection').removeClass('requirefield');
                    });
                });
            } else {
                console.warn('Field name is undefined or not a string:', field);
            }

            resp = false;
        }
    });

    if (resp) {
        $.ajax({
            url: "/medicalrecord/addreqepi",
            method: "POST",
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: data,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function(response) {
                let successMessageShown = false;
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                }
                if (fieldName == 'error') {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    });
                } else if (fieldName == 'info') {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    });
                    // .then((result) => {
                    //     if (result.isConfirmed) {
                    //         form[0].reset();
                    //         form.find('select').each(function() {
                    //             $(this).trigger('change');
                    //         });
                    //     }
                    // });
                } else if (fieldName == 'success') {
                    if (!successMessageShown) {
                        let tableSelector;
                        if (actionType === 'e') {
                            tableSelector = '#view-reqe';
                        } else if (actionType === 'p') {
                            tableSelector = '#view-reqp';
                        } else if (actionType === 'i') {
                            tableSelector = '#view-reqi';
                        } else {
                            tableSelector = null;
                        }
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                form[0].reset();
                                form.find('select').each(function() {
                                    $(this).trigger('change');
                                  });
                                if (tableSelector) {
                                    $(tableSelector).DataTable().ajax.reload();
                                }
                                $('.text-danger').hide();
                            }
                        });

                        successMessageShown = true;
                    }
                }
            },
            error: function(error) {
                if (error.responseJSON && error.responseJSON.errors) {
                    $('.text-danger').show();
                    var errors = error.responseJSON.errors;
                    for (var fieldName in errors) {
                        var fieldErrors = errors[fieldName];
                        var fieldId = '#' + fieldName + '_error';
                        $(fieldId).text(fieldErrors);
                    }
                    Swal.close();
                }
            }
        });
    }
}

$(document).ready(function () {
    let isFilterVisible = true;
    $('.filterToggle').on('click', function () {
        if (isFilterVisible) {
            $('.filterData').slideUp('slow');
        } else {
            $('.filterData').slideDown('slow');
        }
        isFilterVisible = !isFilterVisible;
    });
});

var typingTimer;
var doneTypingInterval = 200;
function openPatientInOutModal(mrNumber = '', billedamount = '', orgname = '', orgid = '', sitename = '', siteid = '', servicemode = '', servicemodeId = '', empname = '', empId = '', service = '', serviceId = '', billingcc = '', billingccId = '',patientstatusval = '',patientstatus = '',patientpriorityval = '', patientpriority = '',  locationname = '',  locationid = '',  schedulename = '',  scheduleid = '', scheduleStartTime = '', scheduleEndTime = '', pattern = '', remarks = '') {
    var orgId = orgid || $('#pio_org').val();

    $('#enterMR').val('');
    $('#enterMR').select2({
        placeholder: 'Select MR #',
        allowClear: true
    });

    $('#patientArrivalDetails').hide();
    $("#pio_remarks").hide();

    if (mrNumber && billedamount && orgid && orgname && siteid && sitename && servicemodeId && service && serviceId && empname && empId && billingcc && billingccId && (!patientstatusval || !patientpriorityval || !locationid || !scheduleid)) {
        $('#enterMR').val(mrNumber).trigger('change').prop('disabled', true);
        $('#pio_org').html('<option value="' + orgid + '" selected>' + orgname + '</option>').prop('disabled', true);
        $('#pio_site').html('<option value="' + siteid + '" selected>' + sitename + '</option>').prop('disabled', true);
        $('#pio_service').html('<option value="' + serviceId + '" selected>' + service + '</option>').prop('disabled', true);
        $('#pio_serviceMode').html('<option value="' + servicemodeId + '" selected>' + servicemode + ' (Rs ' + billedamount + ' )</option>').prop('disabled', true);
        $('#pio_emp').html('<option value="' + empId + '" selected>' + empname + '</option>').prop('disabled', true);
        $('#pio_billingCC').html('<option value="' + billingccId + '" selected>' + billingcc + '</option>').prop('disabled', true);
        $('textarea[name="pio_remarks"]').val(remarks || '').prop('disabled', !!remarks);

        fetchActiveSL(siteid, '#pio_serviceLocation', false, false, function(data) {
            const $serviceLocation = $('#pio_serviceLocation');
            if (data && data.length > 0) {
                $.each(data, function(key, value) {
                    $('#pio_serviceLocation').append('<option value="' + value.location_id + '">' + value.name + '</option>');
                });
            }
            $('#pio_serviceLocation').find('option:contains("Loading...")').remove();
            $('#pio_serviceLocation').prop('disabled', false);
        });

        
        $('#pio_serviceLocation').html("<option selected disabled value=''>Select Service Location</option>").prop('disabled', true);
        SiteChangeActivatedServiceLocation('#pio_site','#pio_serviceLocation', '#add_patientinout',false, false );

        // $('#pio_serviceLocation').html("<option selected disabled value=''>Select Service Location</option>").prop('disabled', true);
        // SiteChangeActivatedServiceLocation('#pio_site','#pio_serviceLocation', '#add_patientinout',false, false );

        $('#pio_serviceSchedule').html("<option selected disabled value=''>Select Service Schedule</option>").prop('disabled', true);
        LocationChangeServiceScheduling('#pio_serviceLocation', '#pio_site', '#pio_serviceSchedule', '#add_patientinout');

        // Now only enable and fetch those missing ones
        // if (!locationid) {
        //     $('#pio_serviceLocation').html("<option selected disabled value=''>Select Service Location</option>").prop('disabled', false);
        //     fetchServiceLocations(orgid, '#pio_serviceLocation', function(data) {
        //         $.each(data, function(key, value) {
        //             $('#pio_serviceLocation').append('<option value="' + value.id + '">' + value.name + '</option>');
        //         });
        //     });
        // } else {
        //     $('#pio_serviceLocation').html('<option value="' + locationid + '" selected>' + locationname + '</option>').prop('disabled', true);
        // }

        // if (!scheduleid) {
        //     $('#pio_serviceSchedule').html("<option selected disabled value=''>Select Schedule</option>").prop('disabled', false);
        //     LocationChangeServiceScheduling('#pio_serviceLocation', '#pio_site', '#pio_serviceSchedule', '#add_patientinout');
        // } else {
        //     $('#pio_serviceSchedule').html('<option value="' + scheduleid + '" selected>' + schedulename + '</option>').prop('disabled', true);
        // }

        $('#add-patientinout .close, #add-patientinout .close_bottom').hide();
        $('#add-patientinout').modal({
            backdrop: 'static',
            keyboard: false
        });
    }
    else if (mrNumber && billedamount && orgid && orgname && siteid && sitename && servicemodeId && service && serviceId && billingcc && billingccId && (!patientstatusval || !patientpriorityval || !locationid || !scheduleid || !empId)) {
        
        $('#enterMR').val(mrNumber).trigger('change').prop('disabled', true);
        $('#pio_org').html('<option value="' + orgid + '" selected>' + orgname + '</option>').prop('disabled', true);
        $('#pio_site').html('<option value="' + siteid + '" selected>' + sitename + '</option>').prop('disabled', true);
        $('#pio_service').html('<option value="' + serviceId + '" selected>' + service + '</option>').prop('disabled', true);
        $('#pio_serviceMode').html('<option value="' + servicemodeId + '" selected>' + servicemode + ' (Rs ' + billedamount + ' )</option>').prop('disabled', true);
        // $('#pio_emp').html('<option value="' + empId + '" selected>' + empname + '</option>').prop('disabled', true);
        $('#pio_billingCC').html('<option value="' + billingccId + '" selected>' + billingcc + '</option>').prop('disabled', true);
        $('textarea[name="pio_remarks"]').val(remarks || '').prop('disabled', !!remarks);

        fetchServiceLocations(orgId, '#pio_serviceLocation', function(data) {
            $('#pio_serviceLocation').html("<option selected disabled value=''>Select Service Location</option>").prop('disabled', false);
            $.each(data, function(key, value) {
                $('#pio_serviceLocation').append('<option value="' + value.id + '">' + value.name + '</option>');
            });
        });

        fetchActiveSL(siteid, '#pio_serviceLocation', false, false, function(data) {
            if (data && data.length > 0) {
                $('#pio_serviceLocation').html("<option selected disabled value=''>Select Service Location</option>").prop('disabled', false);
                $.each(data, function(key, value) {
                    $('#pio_serviceLocation').append('<option value="' + value.location_id + '">' + value.name + '</option>');
                });
            }
            else{
                $('#pio_serviceLocation').html("<option selected disabled value=''>No Service Location Found</option>").prop('disabled', true);
            }
        });

        fetchPhysicians(siteid, '#pio_emp', function(data) {
            const $emp = $('#pio_emp');
            if (data && data.length > 0) {
                $emp.empty()
                    .append('<option selected disabled value="">Select Physician</option>')
                    .append(data.map(({id, name}) => `<option value="${id}">${name}</option>`).join(''))
                    .prop('disabled', false)
                    .find('option:contains("Loading...")').remove();
                    $emp.trigger('change');
            } else {
                    Swal.fire({
                        text: 'There are no physicians available for this location.',
                        icon: 'error',
                        confirmButtonText: 'OK',
                        allowOutsideClick: false
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $emp.off('change');
                        }
                    });
            }
        });
        $('#pio_serviceLocation').html("<option selected disabled value=''>Select Service Location</option>").prop('disabled', true);
        OrgChangeServiceLocation('#pio_org', '#pio_serviceLocation', '#add_patientinout');

        $('#pio_serviceSchedule').html("<option selected disabled value=''>Select Service Schedule</option>").prop('disabled', true);
        LocationChangeServiceScheduling('#pio_serviceLocation', '#pio_site', '#pio_serviceSchedule', '#add_patientinout');

        // Now only enable and fetch those missing ones
        // if (!locationid) {
        //     $('#pio_serviceLocation').html("<option selected disabled value=''>Select Service Location</option>").prop('disabled', false);
        //     fetchServiceLocations(orgid, '#pio_serviceLocation', function(data) {
        //         $.each(data, function(key, value) {
        //             $('#pio_serviceLocation').append('<option value="' + value.id + '">' + value.name + '</option>');
        //         });
        //     });
        // } else {
        //     $('#pio_serviceLocation').html('<option value="' + locationid + '" selected>' + locationname + '</option>').prop('disabled', true);
        // }

        // if (!scheduleid) {
        //     $('#pio_serviceSchedule').html("<option selected disabled value=''>Select Schedule</option>").prop('disabled', false);
        //     LocationChangeServiceScheduling('#pio_serviceLocation', '#pio_site', '#pio_serviceSchedule', '#add_patientinout');
        // } else {
        //     $('#pio_serviceSchedule').html('<option value="' + scheduleid + '" selected>' + schedulename + '</option>').prop('disabled', true);
        // }

        $('#add-patientinout .close, #add-patientinout .close_bottom').hide();
        $('#add-patientinout').modal({
            backdrop: 'static',
            keyboard: false
        });
    }
    else if (mrNumber && (!billedamount || !orgid || !orgname || !siteid || !sitename || !servicemodeId || !service || !serviceId || !empname || !empId || !billingcc || !billingccId || !patientstatusval || !patientstatus || !patientpriorityval || !patientpriority || !locationname || !locationid || !schedulename || !scheduleid) ) {
        // if (mrNumber && (!patientstatusval || !patientstatus || !patientpriorityval || !patientpriority || !locationname || !locationid || !schedulename || !scheduleid) ) {
        // $('#enterMR').val(mrNumber).trigger('change').prop('disabled', true);
        // $('#enterMR').val(mrNumber).prop('disabled', true);
        $('#enterMR').html(`<option value="${mrNumber}" selected>${mrNumber}</option>`).prop('disabled', true);
        // $('#pio_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', false);
        // typingTimer = setTimeout(doneTyping, doneTypingInterval);
        // $('#add-patientinout .close').hide();
        $('textarea[name="pio_remarks"]').val('');

        $('#add-patientinout .close, #add-patientinout .close_bottom').hide();

        $('#add-patientinout').modal({
            backdrop: 'static',
            keyboard: false
        });


    }
    else if (mrNumber && billedamount && orgid && orgname && siteid && sitename && servicemodeId && service && serviceId && empname && empId && billingcc && billingccId && patientstatusval && patientstatus && patientpriorityval && patientpriority && locationname && locationid && schedulename && scheduleid && scheduleStartTime && scheduleEndTime && pattern) {
       
        // if (orgId) {
        //     fetchOrganizationSites(orgId, '#pio_site', function(data) {
        //         $('#pio_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', false);
        //         $.each(data, function(key, value) {
        //             $('#pio_site').append('<option value="' + value.id + '">' + value.name + '</option>');
        //         });
        //     });
        //     fetchServiceLocations(orgId, '#pio_serviceLocation', function(data) {
        //         $('#pio_serviceLocation').html("<option selected disabled value=''>Select Service Location</option>").prop('disabled', false);
        //         $.each(data, function(key, value) {
        //             $('#pio_serviceLocation').append('<option value="' + value.id + '">' + value.name + '</option>');
        //         });
        //     });
        // } else {
        //     $('#pio_org').empty();
        //     $('#pio_org').select2();
        //     fetchOrganizations(null, null, '#pio_org', function(data) {
        //         var options = ["<option selected disabled value=''>Select Organization</option>"];
        //         $.each(data, function(key, value) {
        //             options.push('<option value="' + value.id + '">' + value.organization + '</option>');
        //         });
        //         $('#pio_org').html(options.join('')).trigger('change');
        //     });
        //     $('#pio_site').empty();
        //     $('#pio_site').select2();
        //     $('#pio_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', true);
        //     OrgChangeSites('#pio_org', '#pio_site', '#add_patientinout');
        // }


        $('#enterMR').val(mrNumber).trigger('change').prop('disabled', true);
        $('#pio_org').html('<option value="' + orgid + '" selected>' + orgname + '</option>').prop('disabled', true);
        $('#pio_site').html('<option value="' + siteid + '" selected>' + sitename + '</option>').prop('disabled', true);
        $('#pio_service').html('<option value="' + serviceId + '" selected>' + service + '</option>').prop('disabled', true);
        $('#pio_serviceMode').html('<option value="' + servicemodeId + '" selected>' + servicemode + ' (Rs ' + billedamount + ' )</option>').prop('disabled', true);
        $('#pio_emp').html('<option value="' + empId + '" selected>' + empname + '</option>').prop('disabled', true);
        $('#pio_billingCC').html('<option value="' + billingccId + '" selected>' + billingcc + '</option>').prop('disabled', true);
        $('#pio_status').html('<option value="' + patientstatusval + '" selected>' + patientstatus + '</option>').prop('disabled', true);
        $('#pio_priority').html('<option value="' + patientpriorityval + '" selected>' + patientpriority + '</option>').prop('disabled', true);
        $('#pio_serviceLocation').html('<option value="' + locationid + '" selected>' + locationname + '</option>').prop('disabled', true);
        $('#pio_serviceSchedule').html('<option value="' + scheduleid + '" selected>' + schedulename + '- Start Time: '+ scheduleStartTime +' - End Time: '+ scheduleStartTime +' - ' + pattern + '</option>').prop('disabled', true);
        $('textarea[name="pio_remarks"]').val(remarks || '').prop('disabled', !!remarks);

        // typingTimer = setTimeout(doneTyping, doneTypingInterval);
        // $('#add-patientinout .close').hide();
        $('#add-patientinout .close, #add-patientinout .close_bottom').hide();

        $('#add-patientinout').modal({
            backdrop: 'static',
            keyboard: false
        });
    }
    else{
        if (orgId) {
            fetchOrganizationSites(orgId, '#pio_site', function(data) {
                $('#pio_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', false);
                $.each(data, function(key, value) {
                    $('#pio_site').append('<option value="' + value.id + '">' + value.name + '</option>');
                });
            });
            // fetchServiceLocations(orgId, '#pio_serviceLocation', function(data) {
            //     $('#pio_serviceLocation').html("<option selected disabled value=''>Select Service Location</option>").prop('disabled', false);
            //     $.each(data, function(key, value) {
            //         $('#pio_serviceLocation').append('<option value="' + value.id + '">' + value.name + '</option>');
            //     });
            // });
        } else {
            $('#pio_org').empty();
            $('#pio_org').select2();
            fetchOrganizations(null, null, '#pio_org', function(data) {
                var options = ["<option selected disabled value=''>Select Organization</option>"];
                $.each(data, function(key, value) {
                    options.push('<option value="' + value.id + '">' + value.organization + '</option>');
                });
                $('#pio_org').html(options.join('')).trigger('change');
            });
            $('#pio_site').empty();
            $('#pio_site').select2();
            $('#pio_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', true);
            OrgChangeSites('#pio_org', '#pio_site', '#add_patientinout');

            // $('#pio_serviceLocation').html("<option selected disabled value=''>Select Service Location</option>").prop('disabled', true);
            // OrgChangeServiceLocation('#pio_org', '#pio_serviceLocation', '#add_patientinout');
        }

        $('#pio_serviceLocation').html("<option selected disabled value=''>Select Service Location</option>").prop('disabled', true);
        SiteChangeActivatedServiceLocation('#pio_site','#pio_serviceLocation', '#add_patientinout',false, false );

        $('#pio_service').html("<option selected disabled value=''>Select Service</option>").prop('disabled', true);
        SiteChangeService('#pio_site', '#pio_service', '#add_patientinout');

        $('#pio_serviceMode').html("<option selected disabled value=''>Select Service Mode</option>").prop('disabled', true);
        ServiceChangeServiceModes('#pio_site', '#pio_service', '#pio_serviceMode', '#add_patientinout');

        $('#pio_billingCC').html("<option selected disabled value=''>Select Speciality (Billing CC)</option>").prop('disabled', true);
        ServiceChangeCostCenter('#pio_site', '#pio_service', '#pio_billingCC', '#add_patientinout');

        $('#pio_emp').html("<option selected disabled value=''>Select Designated Physician</option>").prop('disabled', true);
        SiteChangeEmployees('#pio_site', '#pio_emp', '#add_patientinout');

        $('#pio_serviceSchedule').html("<option selected disabled value=''>Select Service Schedule</option>").prop('disabled', true);
        LocationChangeServiceScheduling('#pio_serviceLocation', '#pio_site', '#pio_serviceSchedule', '#add_patientinout');
        $('textarea[name="pio_remarks"]').val('');
        $('#add-patientinout').modal('show');
    }
}

// function fetchVitalSignData(mrNumber) {
//     console.log(mrNumber);
//     viewVitalSign =  $('#view-vitalsign').DataTable({
//         processing: true,
//         serverSide: true,
//         ajax: '/medicalrecord/viewvitalsign/' + mrNumber,
//         order: [[0, 'desc']],
//         searching: false,
//         paging: false,
//         ordering: false,
//         columns: [
//             { data: 'id_raw', name: 'id_raw', visible: false },
//             { data: 'dateTime', name: 'dateTime'},
//             { data: 'mode_group', name: 'mode_group'},
//             { data: 'sbp', name: 'sbp' },
//             { data: 'dbp', name: 'dbp' },
//             { data: 'pulse', name: 'pulse' },
//             { data: 'temp', name: 'temp' },
//             { data: 'r_rate', name: 'r_rate' },
//             { data: 'weight', name: 'weight' },
//             { data: 'height', name: 'height' },
//             { data: 'score', name: 'score' },
//             { data: 'age', name: 'age' },
//             { data: 'details', name: 'details' },
//             { data: 'status', name: 'status' },
//             { data: 'update', name: 'update' },
//             { data: 'log', name: 'log' }
//         ],
//         columnDefs: [
//             {
//                 targets: 1,
//                 width: "170px"
//             },
//             {
//                 targets: 6,
//                 width: "80px"
//             },
//             {
//                 targets: 8,
//                 width: "70px"
//             },
//             {
//                 targets: 9,
//                 width: "70px"
//             },
//             {
//                 targets: 3,
//                 width: "100px"
//             },
//             {
//                 targets: 4,
//                 width: "100px"
//             },
//             {
//                 targets: 2,
//                 width: "200px"
//             }
//         ]
//     });
//     viewVitalSign.on('draw.dt', function() {
//         $('[data-toggle="popover"]').popover({
//             html: true
//         });
//     });
//     viewVitalSign.on('preXhr.dt', function() {
//         $('#ajax-loader').show();
//     });
//     viewVitalSign.on('xhr.dt', function() {
//         $('#ajax-loader').hide();
//     });
//     // View Vital Sign
// }

function fetchVitalSignData(mrNumber) {
    if ($.fn.DataTable.isDataTable('#view-vitalsign')) {
        // If DataTable is already initialized, reload the data
        viewVitalSign.ajax.url('/medicalrecord/viewvitalsign/' + mrNumber).load();
    } else {
        // Initialize the DataTable
        viewVitalSign = $('#view-vitalsign').DataTable({
            processing: true,
            serverSide: true,
            ajax: '/medicalrecord/viewvitalsign/' + mrNumber,
            order: [[0, 'desc']],
            searching: false,
            paging: false,
            ordering: false,
            columns: [
                { data: 'id_raw', name: 'id_raw', visible: false },
                { data: 'dateTime', name: 'dateTime'},
                { data: 'mode_group', name: 'mode_group'},
                { data: 'sbp', name: 'sbp' },
                { data: 'dbp', name: 'dbp' },
                { data: 'pulse', name: 'pulse' },
                { data: 'temp', name: 'temp' },
                { data: 'r_rate', name: 'r_rate' },
                { data: 'weight', name: 'weight' },
                { data: 'height', name: 'height' },
                { data: 'score', name: 'score' },
                { data: 'o2_saturation', name: 'o2_saturation' },
                { data: 'bmi', name: 'bmi' },
                { data: 'bsa', name: 'bsa' },
                { data: 'age', name: 'age' },
                { data: 'details', name: 'details' },
                { data: 'status', name: 'status' },
                { data: 'update', name: 'update' },
                { data: 'log', name: 'log' }
            ],
            columnDefs: [
                {
                    targets: 1,
                    width: "170px"
                },
                {
                    targets: 6,
                    width: "80px"
                },
                {
                    targets: 8,
                    width: "70px"
                },
                {
                    targets: 12,
                    width: "150px"
                },
                {
                    targets: 9,
                    width: "70px"
                },
                {
                    targets: 3,
                    width: "100px"
                },
                {
                    targets: 4,
                    width: "100px"
                },
                {
                    targets: 2,
                    width: "200px"
                }
            ]
        });

        // Event Listeners for DataTable
        viewVitalSign.on('draw.dt', function() {
            $('[data-toggle="popover"]').popover({
                html: true
            });
        });

        viewVitalSign.on('preXhr.dt', function() {
            $('#ajax-loader').show();
        });

        viewVitalSign.on('xhr.dt', function() {
            $('#ajax-loader').hide();
        });
    }
}

function fetchLatestVitalSignRecord(mrNumber) {
    $.ajax({
        url: '/medicalrecord/viewlatestvitalsign/' + mrNumber,
        type: 'GET',
        dataType: 'json',
        // success: function(response) {
        //     $('#ep_sbp').val(response.sbp + '(mmhg)');
        //     $('#ep_dbp').val(response.dbp + '(mmhg)');
        //     $('#ep_pulse').val(response.pulse + ' / min');
        //     $('#ep_temp').val(response.temp + ' F ');
        //     $('#ep_rrate').val(response.r_rate + ' / min');
        //     $('#ep_weight').val(response.weight + ' Kg ');
        //     $('#ep_height').val(response.height + ' cm ');
        //     $('#ep_score').val(response.score);
        //     $('#ep_bmi').val(response.bmi);
        //     $('#ep_bsa').val(response.bsa ? response.bsa + ' m²' : '');
        //     $('#ep_o2saturation').val(response.o2_saturation + '%');
        //     $('#ep_nursingnotes').val(response.nursing_notes ? response.nursing_notes : 'N/A');
        //     // $('#ajax-loader').hide();
        // },
        success: function(response) {
            $('#ep_sbp').val(response.sbp ? response.sbp + ' (mmHg)' : 'N/A');
            $('#ep_dbp').val(response.dbp ? response.dbp + ' (mmHg)' : 'N/A');
            $('#ep_pulse').val(response.pulse ? response.pulse + ' / min' : 'N/A');
            $('#ep_temp').val(response.temp ? response.temp + ' F' : 'N/A');
            $('#ep_rrate').val(response.r_rate ? response.r_rate + ' / min' : 'N/A');
            $('#ep_weight').val(response.weight ? response.weight + ' Kg' : 'N/A');
            $('#ep_height').val(response.height ? response.height + ' cm' : 'N/A');
            $('#ep_score').val(response.score ? response.score : 'N/A');
            $('#ep_bmi').val(response.bmi ? response.bmi : 'N/A');
            $('#ep_bsa').val(response.bsa ? response.bsa + ' m²' : 'N/A');
            $('#ep_o2saturation').val(response.o2_saturation ? response.o2_saturation + '%' : 'N/A');
            $('#ep_nursingnotes').val(response.nursing_notes ? response.nursing_notes : 'N/A');
        },
        error: function(jqXHR, textStatus, errorThrown) {
            $('#ajax-loader').hide();
            console.log(textStatus, errorThrown);
        }
    });
}

var viewMedicalDiagnosis = null;
var viewAllergiesHistory = null;
var viewImmunizationHistory = null;
var viewDrugHistory = null;
var viewPastHistory = null;
var viewObstericHistory = null;
var viewSocialHistory = null;
var viewVisitBasedDetails = null;

function fetchMedicalHistory(mrNumber) {
    if ($.fn.DataTable.isDataTable('#view-mdh')) {
        viewMedicalDiagnosis.ajax.url('/medicalrecord/viewmedicaldiagnosis/' + mrNumber).load();
    }
    else{
        viewMedicalDiagnosis =  $('#view-mdh').DataTable({
            processing: true,
            serverSide: true,
            // ajax: '/medicalrecord/viewmedicaldiagnosis/' + mrNumber,
            ajax: {
                url: '/medicalrecord/viewmedicaldiagnosis/' + mrNumber, // Pass MR number in the URL
                dataSrc: function (json) {
                    $('#ajax-loader').hide();
                    return json.data;
                }
            },
            order: [[0, 'desc']],
            pageLength: 3,
            dom: 'tip',
            searching: false,
            columns: [
                { data: 'id_raw', name: 'id_raw', visible: false },
                { data: 'ICDCode', name: 'ICDCode'},
                { data: 'ICDDesc', name: 'ICDDesc'},
                { data: 'since_date', name: 'since_date'},
                { data: 'till_date', name: 'till_date'}
            ],
            columnDefs: [
                {
                    targets: 1,
                    width: "75px"
                },
                {
                    targets: 2,
                    width: "200px"
                },
                {
                    targets: 3,
                    width: "75px"
                },
                {
                    targets: 4,
                    width: "75px"
                }
            ]
                            });
        viewMedicalDiagnosis.on('draw.dt', function() {
            $('[data-toggle="popover"]').popover({
                html: true
            });
        });
        viewMedicalDiagnosis.on('preXhr.dt', function() {
            $('#ajax-loader').show();
        });
        viewMedicalDiagnosis.on('xhr.dt', function() {
            $('#ajax-loader').hide();
        });
    }

}

function fetchAllergyHistory(mrNumber) {
    if (viewAllergiesHistory) {
        viewAllergiesHistory.destroy();
    }
    viewAllergiesHistory =  $('#view-al').DataTable({
        processing: true,
        serverSide: true,
        // ajax: '/medicalrecord/viewallergieshistory/' + mrNumber,
        ajax: {
            url: '/medicalrecord/viewallergieshistory/' + mrNumber,
            dataSrc: function (json) {
                $('#ajax-loader').hide();
                return json.data;
            }
        },
        order: [[0, 'desc']],
        pageLength: 3,
        dom: 'tip',
        searching: false,
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'AllergyHistory', name: 'AllergyHistory'},
            { data: 'since_date', name: 'since_date'}
        ]
    });
    viewAllergiesHistory.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    viewAllergiesHistory.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    viewAllergiesHistory.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });

}

function fetchImmunizationHistory(mrNumber) {
    if (viewImmunizationHistory) {
        viewImmunizationHistory.destroy();
    }
    viewImmunizationHistory =  $('#view-ih').DataTable({
        processing: true,
        serverSide: true,
        // ajax: '/medicalrecord/viewimmunizationhistory/' + mrNumber,
        ajax: {
            url: '/medicalrecord/viewimmunizationhistory/' + mrNumber,
            dataSrc: function (json) {
                $('#ajax-loader').hide();
                return json.data;
            }
        },
        order: [[0, 'desc']],
        pageLength: 3,
        dom: 'tip',
        searching: false,
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'ImmunizationHistory', name: 'ImmunizationHistory'},
            { data: 'date', name: 'date'}
        ]
    });
    viewImmunizationHistory.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    viewImmunizationHistory.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    viewImmunizationHistory.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
}

function fetchDrugHistory(mrNumber) {
    if (viewDrugHistory) {
        viewDrugHistory.destroy();
    }
    viewDrugHistory =  $('#view-dh').DataTable({
        processing: true,
        serverSide: true,
        // ajax: '/medicalrecord/viewdrughistory/' + mrNumber,
        ajax: {
            url: '/medicalrecord/viewdrughistory/' + mrNumber,
            dataSrc: function (json) {
                $('#ajax-loader').hide();
                return json.data;
            }
        },
        order: [[0, 'desc']],
        pageLength: 3,
        dom: 'tip',
        searching: false,
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'drugHistory', name: 'drugHistory'},
            { data: 'dose', name: 'dose'}
        ]
    });
    viewDrugHistory.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    viewDrugHistory.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    viewDrugHistory.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
}

function fetchPastHistory(mrNumber) {
    if (viewPastHistory) {
        viewPastHistory.destroy();
    }
    viewPastHistory =  $('#view-ph').DataTable({
        processing: true,
        serverSide: true,
        // ajax: '/medicalrecord/viewpasthistory/' + mrNumber,
        ajax: {
            url: '/medicalrecord/viewpasthistory/' + mrNumber,
            dataSrc: function (json) {
                $('#ajax-loader').hide();
                return json.data;
            }
        },
        order: [[0, 'desc']],
        pageLength: 3,
        dom: 'tip',
        searching: false,
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'pastHistory', name: 'pastHistory'},
            { data: 'date', name: 'date'}
        ]
    });
    viewPastHistory.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    viewPastHistory.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    viewPastHistory.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
}

function fetchObstericHistory(mrNumber) {
    if (viewObstericHistory) {
        viewObstericHistory.destroy();
    }
    viewObstericHistory =  $('#view-oh').DataTable({
        processing: true,
        serverSide: true,
        // ajax: '/medicalrecord/viewobsterichistory/' + mrNumber,
        ajax: {
            url: '/medicalrecord/viewobsterichistory/' + mrNumber,
            dataSrc: function (json) {
                $('#ajax-loader').hide();
                return json.data;
            }
        },
        order: [[0, 'desc']],
        pageLength: 3,
        dom: 'tip',
        searching: false,
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'obstericHistory', name: 'obstericHistory'},
            { data: 'date', name: 'date'}
        ]
    });
    viewObstericHistory.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    viewObstericHistory.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    viewObstericHistory.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
}

function fetchSocialHistory(mrNumber) {
    if (viewSocialHistory) {
        viewSocialHistory.destroy();
    }
    viewSocialHistory =  $('#view-sh').DataTable({
        processing: true,
        serverSide: true,
        // ajax: '/medicalrecord/viewsocialhistory/' + mrNumber,
        ajax: {
            url: '/medicalrecord/viewsocialhistory/' + mrNumber,
            dataSrc: function (json) {
                $('#ajax-loader').hide();
                return json.data;
            }
        },
        order: [[0, 'desc']],
        pageLength: 3,
        dom: 'tip',
        searching: false,
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'socialHistory', name: 'socialHistory'},
            { data: 'date', name: 'date'}
        ]
    });
    viewSocialHistory.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    viewSocialHistory.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    viewSocialHistory.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
}

function fetchVisitBasedDetails(mrNumber) {
    if (viewVisitBasedDetails) {
        viewVisitBasedDetails.destroy();
    }
    viewVisitBasedDetails =  $('#view-vbd').DataTable({
        processing: true,
        serverSide: true,
        // ajax: '/medicalrecord/viewvisitbaseddetails/' + mrNumber,
        ajax: {
            url: '/medicalrecord/viewvisitbaseddetails/' + mrNumber,
            dataSrc: function (json) {
                $('#ajax-loader').hide();
                return json.data;
            }
        },
        order: [[0, 'desc']],
        pageLength: 3,
        dom: 'tip',
        searching: false,
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'date', name: 'date'},
            { data: 'ServiceModeGroup', name: 'ServiceModeGroup'},
            { data: 'summary', name: 'summary'},
            { data: 'speciality', name: 'speciality'},
            { data: 'physician', name: 'physician'},
            { data: 'action', name: 'action'},
            { data: 'logs', name: 'logs'}
        ],
        columnDefs: [
            {
                targets: 3,
                width: "250px"
            }
        ]
    });
    viewVisitBasedDetails.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    viewVisitBasedDetails.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    viewVisitBasedDetails.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
}

function clearDataTable(tableSelector) {
    const table = $(tableSelector).DataTable();
    table.clear().draw();
}

function loadPatientAttachmentDataTable(mrNumber) {
    $('#view-pattachment').DataTable({
        processing: true,
        serverSide: true,
        ajax: {
            url: '/medicalrecord/viewpatientattachment/' + mrNumber, // Pass MR number in the URL
            dataSrc: function (json) {
                $('#ajax-loader').hide();
                return json.data;
            }
        },
        order: [[0, 'desc']],
        pageLength: 3,
        dom: 'tip',
        searching: false,
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'mr', name: 'mr' },
            { data: 'description', name: 'description' },
            { data: 'date', name: 'date' },
            { data: 'physician', name: 'physician' },
            { data: 'attachments', name: 'attachments' }
        ],
        columnDefs: [
            {
                targets: 3,
                width: "250px"
            }
        ]
    });
}

function toggleDuplicateFieldsBasedOnMR(selectedMR) {
    if (!selectedMR) {
        $('.duplicate .mr-dependent').hide();
    } else {
        $('.duplicate .mr-dependent').show();
    }
}

// Sidebar Investigation Tracking functionality
$(document).ready(function() {
    
    // Manual trigger for investigation tracking modal
    $(document).on('click', '.sidebar-investigation-tracking', function(e) {
        e.preventDefault();
        
        // Check if modal exists
        if ($('#mr-selection-modal').length) {
            
            // Try different methods to show the modal
            try {
                // Method 1: Bootstrap 4/5
                if (typeof $.fn.modal === 'function') {
                    $('#mr-selection-modal').modal('show');
                } 
                
                // Method 2: Manual show if Bootstrap fails
                setTimeout(function() {
                    if (!$('#mr-selection-modal').hasClass('show')) {
                        $('#mr-selection-modal').addClass('show');
                        $('body').addClass('modal-open');
                        
                        // Create backdrop manually if needed
                        if ($('.modal-backdrop').length === 0) {
                            $('body').append('<div class="modal-backdrop fade show"></div>');
                        }
                    }
                }, 500);
                
            } catch (error) {
                console.error('Error showing modal:', error);
            }
        } else {
            console.error('Modal not found in DOM');
        }
    });
    
    // Load patients when modal opens
    $('#mr-selection-modal').on('show.bs.modal', function() {
        setTimeout(function() {
            loadPatientsForSidebar();
        }, 100);
    });
    
    // Handle modal hidden event to clean up
    $('#mr-selection-modal').on('hidden.bs.modal', function() {
        var $select = $('#sidebar-mr-select');
        $select.html('<option selected disabled>Select MR #</option>');
        // Destroy Select2 if it exists
        if ($.fn.select2 && $select.hasClass('select2-hidden-accessible')) {
            $select.select2('destroy');
        }
    });
    
    // Manual close button handlers
    $(document).on('click', '#mr-selection-modal .close, #mr-selection-modal .btn-secondary', function() {
        $('#mr-selection-modal').removeClass('show');
        $('body').removeClass('modal-open');
        $('.modal-backdrop').remove();
    });

    // Handle proceed button click
    $('#proceed-investigation-tracking').on('click', function() {
        console.log('Proceed button clicked');
        var selectedMR = $('#sidebar-mr-select').val();
        
        if (selectedMR && selectedMR !== 'Select MR #') {
            // Navigate to investigation tracking page
            console.log('Navigating to investigation tracking for MR:', selectedMR);
            window.location.href = '/investigationtracking/' + selectedMR;
        } else {
            // Show error message
            Swal.fire({
                text: 'Please select a patient MR number',
                icon: 'warning',
                confirmButtonText: 'OK'
            });
        }
    });
});

function loadPatientsForSidebar() {
    
    // Show loading in the modal
    var $select = $('#sidebar-mr-select');
    $select.html('<option selected disabled>Loading patients...</option>');
    
    $.ajax({
        url: '/medicalrecord/get-patients-for-sidebar',
        type: 'GET',
        dataType: 'json',
        success: function(response) {
            if (response.success && response.patients && response.patients.length > 0) {
                // Clear the loading option and add the default option
                $select.html('<option selected disabled>Select MR #</option>');
                
                // Add all patients
                response.patients.forEach(function(patient) {
                    var optionText = patient.mr_code + ' - ' + patient.name;
                    if (patient.cell_no) {
                        optionText += ' - ' + patient.cell_no;
                    }
                    $select.append('<option value="' + patient.mr_code + '">' + optionText + '</option>');
                });
                
                
                // Initialize Select2 after populating options
                if ($.fn.select2) {
                    // Destroy existing Select2 instance if it exists
                    if ($select.hasClass('select2-hidden-accessible')) {
                        $select.select2('destroy');
                    }
                    
                    $select.select2({
                        placeholder: 'Select MR #',
                        allowClear: true,
                        width: '100%'
                    });
                    console.log('Select2 initialized');
                } else {
                    console.log('Select2 plugin not available');
                }
            } else {
                $select.html('<option selected disabled>No patients found</option>');
                console.log('No patients returned from API');
            }
        },
        error: function(xhr, status, error) {
            console.error('AJAX Error:', xhr.responseText);
            $select.html('<option selected disabled>Error loading patients</option>');
            Swal.fire({
                text: 'Error loading patients. Please try again.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        }
    });
}


