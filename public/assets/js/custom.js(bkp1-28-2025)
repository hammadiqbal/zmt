
$(function () {
    "use strict";
    $(function () {
        $(".preloader").fadeOut();
    });
    jQuery(document).on('click', '.mega-dropdown', function (e) {
        e.stopPropagation()
    });
    // ==============================================================
    // This is for the top header part and sidebar part
    // ==============================================================
    var set = function () {
            var width = (window.innerWidth > 0) ? window.innerWidth : this.screen.width;
            var topOffset = 70;
            if (width < 1170) {
                $("body").addClass("mini-sidebar");
                $('.navbar-brand span').hide();
                $(".scroll-sidebar, .slimScrollDiv").css("overflow-x", "visible").parent().css("overflow", "visible");
                $(".sidebartoggler i").addClass("ti-menu");
            }
            else {
                $("body").removeClass("mini-sidebar");
                $('.navbar-brand span').show();
                //$(".sidebartoggler i").removeClass("ti-menu");
            }

            var height = ((window.innerHeight > 0) ? window.innerHeight : this.screen.height) - 1;
            height = height - topOffset;
            if (height < 1) height = 1;
            if (height > topOffset) {
                $(".page-wrapper").css("min-height", (height) + "px");
            }

    };
    $(window).ready(set);
    $(window).on("resize", set);
    // ==============================================================
    // Theme options
    // ==============================================================
    $(".sidebartoggler").on('click', function () {
        if ($("body").hasClass("mini-sidebar")) {
            $("body").trigger("resize");
            $(".scroll-sidebar, .slimScrollDiv").css("overflow", "hidden").parent().css("overflow", "visible");
            $("body").removeClass("mini-sidebar");
            $('.navbar-brand span').show();
            //$(".sidebartoggler i").addClass("ti-menu");
        }
        else {
            $("body").trigger("resize");
            $(".scroll-sidebar, .slimScrollDiv").css("overflow-x", "visible").parent().css("overflow", "visible");
            $("body").addClass("mini-sidebar");
            $('.navbar-brand span').hide();
            //$(".sidebartoggler i").removeClass("ti-menu");
        }
    });
    // topbar stickey on scroll

    $(".fix-header .topbar").stick_in_parent({});


    // this is for close icon when navigation open in mobile view
    $(".nav-toggler").click(function () {
        $("body").toggleClass("show-sidebar");
        $(".nav-toggler i").toggleClass("mdi mdi-menu");
        $(".nav-toggler i").addClass("mdi mdi-close");
    });

    $(".search-box a, .search-box .app-search .srh-btn").on('click', function () {
        $(".app-search").toggle(200);
    });
    // ==============================================================
    // Right sidebar options
    // ==============================================================
    $(".right-side-toggle").click(function () {
        $(".right-sidebar").slideDown(50);
        $(".right-sidebar").toggleClass("shw-rside");
    });

    $('.floating-labels .form-control').on('focus blur', function (e) {
        $(this).parents('.form-group').toggleClass('focused', (e.type === 'focus' || this.value.length > 0));
    }).trigger('blur');

    // ==============================================================
    // Auto select left navbar
    // ==============================================================
    $(function () {
        var url = window.location;
        var element = $('ul#sidebarnav a').filter(function () {
            return this.href == url;
        }).addClass('active').parent().addClass('active');
        while (true) {
            if (element.is('li')) {
                element = element.parent().addClass('in').parent().addClass('active');
            }
            else {
                break;
            }
        }

    });
    // ==============================================================
    //tooltip
    // ==============================================================
    $(function () {
            $('[data-toggle="tooltip"]').tooltip()
    })
    // ==============================================================
    //Popover
    // ==============================================================
    $(function () {
            $('[data-toggle="popover"]').popover()
        })
    // ==============================================================
    // Sidebarmenu
    // ==============================================================
    $(function () {
        $('#sidebarnav').metisMenu();
    });

    // ==============================================================
    // Slimscrollbars
    // ==============================================================
    $('.scroll-sidebar').slimScroll({
        position: 'left'
        , size: "5px"
        , height: '100%'
        , color: '#dcdcdc'
    });
    $('.message-center').slimScroll({
        position: 'right'
        , size: "5px"

        , color: '#dcdcdc'
    });


    $('.aboutscroll').slimScroll({
        position: 'right'
        , size: "5px"
        , height: '80'
        , color: '#dcdcdc'
    });
    $('.message-scroll').slimScroll({
        position: 'right'
        , size: "5px"
        , height: '570'
        , color: '#dcdcdc'
    });
    $('.chat-box').slimScroll({
        position: 'right'
        , size: "5px"
        , height: '470'
        , color: '#dcdcdc'
    });

    $('.slimscrollright').slimScroll({
        height: '100%'
        , position: 'right'
        , size: "5px"
        , color: '#dcdcdc'
    });

    // ==============================================================
    // Resize all elements
    // ==============================================================
    $("body").trigger("resize");
    // ==============================================================
    // To do list
    // ==============================================================
    $(".list-task li label").click(function () {
        $(this).toggleClass("task-done");
    });

    // ==============================================================
    // Login and Recover Password
    // ==============================================================
    $('#to-recover').on("click", function () {
        $("#loginform").slideUp();
        $("#recoverform").fadeIn();
    });

    // ==============================================================
    // Collapsable cards
    // ==============================================================
        $('a[data-action="collapse"]').on('click',function(e){
            e.preventDefault();
            $(this).closest('.card').find('[data-action="collapse"] i').toggleClass('ti-minus ti-plus');
            $(this).closest('.card').children('.card-body').collapse('toggle');

        });
        // Toggle fullscreen
        $('a[data-action="expand"]').on('click',function(e){
            e.preventDefault();
            $(this).closest('.card').find('[data-action="expand"] i').toggleClass('mdi-arrow-expand mdi-arrow-compress');
            $(this).closest('.card').toggleClass('card-fullscreen');
        });

        // Close Card
        $('a[data-action="close"]').on('click',function(){
            $(this).closest('.card').removeClass().slideUp('fast');
        });

        $('.userOrganization').hide();

        $('#division_name').prop('disabled', true);
        ProvinceChangeDivision('#province_name', '#division_name', '#add_district');
});

function goBack() {
    window.history.back();
}

document.addEventListener('keydown', function (event) {
    var isEnterKey = event.key === 'Enter' || event.keyCode === 13;
    if (isEnterKey) {
        // Trigger a click on the OK button
        Swal.clickConfirm();
    }
});

$(document).ready(function() {
    $(".password-toggle").click(function() {
      var passwordField = $(".showpwd");
      var passwordFieldType = passwordField.attr("type");

      if (passwordFieldType === "password") {
        passwordField.attr("type", "text");
        $(".password-toggle i").removeClass("fa-eye-slash").addClass("fa-eye");
      } else {
        passwordField.attr("type", "password");
        $(".password-toggle i").removeClass("fa-eye").addClass("fa-eye-slash");
      }
    });

    $(".password-toggle1").click(function() {
        console.log('click');
      var passwordField = $(".showpwd");
      var passwordFieldType = passwordField.attr("type");

      if (passwordFieldType === "password") {
        passwordField.attr("type", "text");
        $(".password-toggle1 i").removeClass("fa-eye-slash").addClass("fa-eye");
      } else {
        passwordField.attr("type", "password");
        $(".password-toggle1 i").removeClass("fa-eye").addClass("fa-eye-slash");
      }
    });
});


// Role and Rights
$(document).ready(function() {
    //Add ROle
    $('#add_role').submit(function(e) {
        e.preventDefault(); // Prevent the form from submitting normally
        var data = $(this).serializeArray();
            $(data).each(function(i, field){
                if(field.value == '')
                {
                    var FieldName = field.name;
                    var FieldID = '#'+FieldName + "_error";
                    $(FieldID).text("This field is required");
                    $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                    $( 'input[name= "' +FieldName +'"' ).focus(function() {
                        $(FieldID).text("");
                        $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                    })
                    $( 'textarea[name= "' +FieldName +'"' ).focus(function() {
                        $(FieldID).text("");
                        $('textarea[name= "' +FieldName +'"' ).removeClass("requirefield");
                    })
                    $( 'textarea[name= "' +FieldName +'"' ).addClass('requirefield');
                    resp = false;
                }
                else{
                    resp = true;
                }
                // console.log('up');
            });
            if(resp != false)
            {
                $.ajax({
                    url: "/roles/addrole",
                    method: "POST",
                    headers: {
                        'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                    },
                    data: data,
                    beforeSend: function() {
                        Swal.fire({
                            title: "Processing",
                            allowOutsideClick: false,
                            willOpen: () => {
                                Swal.showLoading();
                            },
                            showConfirmButton: false
                        });
                    },
                    success: function(response) {
                        for (var fieldName in response) {
                            var fieldErrors = response[fieldName];
                            var fieldName = fieldName;
                        }
                        if (fieldName == 'error')
                        {
                            Swal.fire({
                                text: fieldErrors,
                                icon: fieldName,
                                confirmButtonText: 'OK'
                            })
                        }
                        else if (fieldName == 'success')
                        {
                            Swal.fire({
                                text: fieldErrors,
                                icon: fieldName,
                                allowOutsideClick: false,
                                confirmButtonText: 'OK'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    $('#add-user').modal('hide');
                                    $('#view-roles').DataTable().ajax.reload(); // Refresh DataTable
                                    $('#add_role')[0].reset();
                                    $('.text-danger').hide();
                                }
                            });
                        }
                        else if (fieldName == 'info')
                        {
                            Swal.fire({
                                text: fieldErrors,
                                icon: fieldName,
                                confirmButtonText: 'OK'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    $('#add_role')[0].reset();
                                }
                            });
                        }

                    },
                    error: function(error) {
                        if (error.responseJSON && error.responseJSON.errors) {
                            $('.text-danger').show();
                            var errors = error.responseJSON.errors;
                            for (var fieldName in errors) {
                                var fieldErrors = errors[fieldName];
                                for (var i = 0; i < fieldErrors.length; i++) {
                                    fieldName = '#'+fieldName + '_error';
                                    $(fieldName).text(fieldErrors[i]);
                                }
                            }
                            Swal.close();
                        }
                    }
                });
            }
    });
    //Add Role

    // VieW Role
    var viewrole =  $('#view-roles').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/roles/data',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            { data: 'role', name: 'role', render: function(data, type, row) {
                return data.charAt(0).toUpperCase() + data.slice(1);
            }},
            { data: 'remarks', name: 'remarks' },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 3,
                width: "250px"
            },
            {
                targets: 5,
                width: "300px"
            }
        ]
    });

    viewrole.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });


    // Show the loader before an AJAX request is made
    viewrole.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    viewrole.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Role

    // Update Status
    $(document).on('click', '.role_status', function() {
            var id = $(this).data('id');
            var status = $(this).data('status');
            var data = {id: id,status: status};

            $.ajax({
                url: '/roles/update-status', // Replace with the actual URL for updating the status
                method: 'GET',
                data: data,
                beforeSend: function() {
                    $('#ajax-loader').show();
                },
                success: function(response,textStatus, xhr) {
                var status = xhr.status;
                if(status == 200)
                {
                    $('#view-roles').DataTable().ajax.reload(); // Refresh DataTable
                }
                },
                error: function(xhr, status, error) {
                // Handle any AJAX errors
                console.log(error);
                }
            });

    });
    // Update Status

    //Rights Setup
    $('#rights_setup').submit(function(e) {
        e.preventDefault(); 
        var groupedValues = {};
        $('.tab-pane').each(function(){
            var tabName = $(this).attr('id');
            var checkboxes = $(this).find('input[type="checkbox"]');
            checkboxes.each(function(){
                var name = $(this).attr('name');
                var value = $(this).is(':checked') ? 1 : 0;
                if (!groupedValues.hasOwnProperty(name)) {
                    groupedValues[name] = [];
                }
                groupedValues[name].push(value);            
            });
        });
        var roleId = $('#role_id').val();

        var formData = {
            role_id: roleId,
        };
        for (var key in groupedValues) {
            formData[key] = groupedValues[key].join(',');
        }

        $.ajax({
            url: "/rights-setup/assignrights",
            method: "POST",
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function(response) {
            for (var fieldName in response) {
                var fieldErrors = response[fieldName];
                var fieldName = fieldName;
            }

                if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('.text-danger').hide();
                            window.location.href = '/user-roles';
                        }
                    });
                }
            },
            error: function(error) {
                if (error.responseJSON && error.responseJSON.errors) {
                    $('.text-danger').show();
                    var errors = error.responseJSON.errors;
                    for (var fieldName in errors) {
                        var fieldErrors = errors[fieldName];
                        for (var i = 0; i < fieldErrors.length; i++) {
                            fieldName = '#'+fieldName + '_error';
                            $(fieldName).text(fieldErrors[i]);
                        }
                    }
                    Swal.close();
                }
            }
        });
        // }
    });
    //Rights Setup

    //Update Rights
    $('#update_rights').submit(function(e) {
        e.preventDefault(); 
        var groupedValues = {};
        $('.tab-pane').each(function(){
            var tabName = $(this).attr('id');
            var checkboxes = $(this).find('input[type="checkbox"]');
            checkboxes.each(function(){
                var name = $(this).attr('name');
                var value = $(this).is(':checked') ? 1 : 0;
                if (!groupedValues.hasOwnProperty(name)) {
                    groupedValues[name] = [];
                }
                groupedValues[name].push(value);            
            });
        });
        var roleId = $('#role_id').val();

        var formData = {
            role_id: roleId,
        };
        for (var key in groupedValues) {
            formData[key] = groupedValues[key].join(',');
        }

        $.ajax({
            url: "/rights/updaterights",
            method: "POST",
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function(response) {
            for (var fieldName in response) {
                var fieldErrors = response[fieldName];
                var fieldName = fieldName;
            }

                if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('.text-danger').hide();
                            window.location.reload();
                        }
                    });
                }
            },
            error: function(error) {
                if (error.responseJSON && error.responseJSON.errors) {
                    $('.text-danger').show();
                    var errors = error.responseJSON.errors;
                    for (var fieldName in errors) {
                        var fieldErrors = errors[fieldName];
                        for (var i = 0; i < fieldErrors.length; i++) {
                            fieldName = '#'+fieldName + '_error';
                            $(fieldName).text(fieldErrors[i]);
                        }
                    }
                    Swal.close();
                }
            }
        });
        // }
    });
    //Update Rights

    //Update Role Modal
    $(document).on('click', '.edit-role', function() {
        var roleId = $(this).data('role-id');
        $('#ajax-loader').show();
        var url = '/roles/' + roleId;
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                $('#ajax-loader').hide();
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.edt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('.role-id').val(response.id);
                $('.role-name').val(response.role);  // Adjust these based on the actual structure of your response data
                $('.update-remark').val(response.remarks);
                $('#edit-role').modal('show');
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Role Modal

    //Update Role
    $('#update_role').on('submit', function (event) {
        event.preventDefault();
        var formData = $(this).serializeArray();
        var roleId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'role-id') {
                roleId = formData[i].value;
                break;
            }
        }
        var url = '/update-role/' + roleId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-role').modal('hide');
                            $('#view-roles').DataTable().ajax.reload(); // Refresh DataTable
                            $('#update_role')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Role

});// Role and Rights

// Territory
$(document).ready(function() {
    //Add Province
    $('#add_province').submit(function(e) {
        e.preventDefault(); // Prevent the form from submitting normally
        var data = $(this).serializeArray();
            $(data).each(function(i, field){
                if(field.value == '')
                {
                    var FieldName = field.name;
                    var FieldID = '#'+FieldName + "_error";
                    $(FieldID).text("This field is required");
                    $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                    $( 'input[name= "' +FieldName +'"' ).focus(function() {
                        $(FieldID).text("");
                        $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                    })
                    resp = false;
                }
                else{
                    resp = true;
                }
                // console.log('up');
            });
            if(resp != false)
            {
                $.ajax({
                    url: "/territory/addprovince",
                    method: "POST",
                    headers: {
                        'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                    },
                    data: data,
                    beforeSend: function() {
                        Swal.fire({
                            title: "Processing",
                            allowOutsideClick: false,
                            willOpen: () => {
                                Swal.showLoading();
                            },
                            showConfirmButton: false
                        });
                    },
                    success: function(response) {

                        for (var fieldName in response) {
                            var fieldErrors = response[fieldName];
                            var fieldName = fieldName;
                        }
                        if (fieldName == 'error')
                        {
                            Swal.fire({
                                text: fieldErrors,
                                icon: fieldName,
                                confirmButtonText: 'OK'
                            })
                        }
                        else if (fieldName == 'success')
                        {
                            Swal.fire({
                                text: fieldErrors,
                                icon: fieldName,
                                allowOutsideClick: false,
                                confirmButtonText: 'OK'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    $('#add-province').modal('hide');
                                    $('#view-province').DataTable().ajax.reload(); // Refresh DataTable
                                    $('#add_province')[0].reset();
                                    $('.text-danger').hide();
                                }
                            });
                        }
                        else if (fieldName == 'info')
                        {
                            Swal.fire({
                                text: fieldErrors,
                                icon: fieldName,
                                confirmButtonText: 'OK'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    $('#add_province')[0].reset();
                                }
                            });
                        }

                    },
                    error: function(error) {
                        if (error.responseJSON && error.responseJSON.errors) {
                            $('.text-danger').show();
                            var errors = error.responseJSON.errors;
                            for (var fieldName in errors) {
                                var fieldErrors = errors[fieldName];
                                for (var i = 0; i < fieldErrors.length; i++) {
                                    fieldName = '#'+fieldName + '_error';
                                    $(fieldName).text(fieldErrors[i]);
                                }
                            }
                            Swal.close();
                        }
                    }
                });
            }
    });
    //Add Province

    //Add Division
    $('#add_division').submit(function(e) {
        e.preventDefault(); // Prevent the form from submitting normally
        var data = $(this).serializeArray();
        var selectedValue = $('#p_name').val();
        data.push({ name: 'province', value: selectedValue });
            $(data).each(function(i, field){
                if (field.value == '' || field.value == null)
                {
                    var FieldName = field.name;
                    var FieldID = '#'+FieldName + "_error";
                    $(FieldID).text("This field is required");
                    $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                    $( 'input[name= "' +FieldName +'"' ).focus(function() {
                        $(FieldID).text("");
                        $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                    })

                    $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                    $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                        $(FieldID).text("");
                        $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                    });

                    resp = false;
                }
                else{
                    resp = true;
                }
            });
            if(resp != false)
            {
                $.ajax({
                    url: "/territory/adddivision",
                    method: "POST",
                    headers: {
                        'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                    },
                    data: data,
                    beforeSend: function() {
                        Swal.fire({
                            title: "Processing",
                            allowOutsideClick: false,
                            willOpen: () => {
                                Swal.showLoading();
                            },
                            showConfirmButton: false
                        });
                    },
                    success: function(response) {
                        for (var fieldName in response) {
                            var fieldErrors = response[fieldName];
                            var fieldName = fieldName;
                        }
                        if (fieldName == 'error')
                        {
                            Swal.fire({
                                text: fieldErrors,
                                icon: fieldName,
                                confirmButtonText: 'OK'
                            })
                        }
                        else if (fieldName == 'success')
                        {
                            Swal.fire({
                                text: fieldErrors,
                                icon: fieldName,
                                allowOutsideClick: false,
                                confirmButtonText: 'OK'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    $('#add-division').modal('hide');
                                    $('#view-division').DataTable().ajax.reload();
                                    $('#add_division').find('select').val($('#add_division').find('select option:first').val()).trigger('change');
                                    $('#add_division')[0].reset();
                                    $('.text-danger').hide();
                                }
                            });
                        }
                        else if (fieldName == 'info')
                        {
                            Swal.fire({
                                text: fieldErrors,
                                icon: fieldName,
                                confirmButtonText: 'OK'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    $('#add_division').find('select').val($('#add_division').find('select option:first').val()).trigger('change');
                                    $('#add_division')[0].reset();
                                }
                            });
                        }

                    },
                    error: function(error) {
                        if (error.responseJSON && error.responseJSON.errors) {
                            $('.text-danger').show();
                            var errors = error.responseJSON.errors;
                            for (var fieldName in errors) {
                                var fieldErrors = errors[fieldName];
                                for (var i = 0; i < fieldErrors.length; i++) {
                                    fieldName = '#'+fieldName + '_error';
                                    $(fieldName).text(fieldErrors[i]);
                                }
                            }
                            Swal.close();
                        }
                    }
                });
            }
    });
    //Add Division

    //Add District
    $('#add_district').submit(function(e) {
        e.preventDefault(); // Prevent the form from submitting normally
        var data = $(this).serializeArray();
        var provinceValue = $('#province_name').val();
        var divisionValue = $('#district_division').val();
        data.push({ name: 'province', value: provinceValue });
        data.push({ name: 'division', value: divisionValue });
            $(data).each(function(i, field){
                if (field.value == '' || field.value == null)
                {
                    var FieldName = field.name;
                    var FieldID = '#'+FieldName + "_error";
                    $(FieldID).text("This field is required");
                    $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                    $( 'input[name= "' +FieldName +'"' ).focus(function() {
                        $(FieldID).text("");
                        $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                    })
                    $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                    $('select[name= "' +FieldName +'"' ).on('select2:open', function() {

                        $(FieldID).text("");
                        $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                    });
                    resp = false;
                }
                else{
                    resp = true;
                }
            });
            if(resp != false)
            {
                $.ajax({
                    url: "/territory/adddistrict",
                    method: "POST",
                    headers: {
                        'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                    },
                    data: data,
                    beforeSend: function() {
                        Swal.fire({
                            title: "Processing",
                            allowOutsideClick: false,
                            willOpen: () => {
                                Swal.showLoading();
                            },
                            showConfirmButton: false
                        });
                    },
                    success: function(response) {
                        for (var fieldName in response) {
                            var fieldErrors = response[fieldName];
                            var fieldName = fieldName;
                        }
                        if (fieldName == 'error')
                        {
                            Swal.fire({
                                text: fieldErrors,
                                icon: fieldName,
                                confirmButtonText: 'OK'
                            })
                        }
                        else if (fieldName == 'success')
                        {
                            Swal.fire({
                                text: fieldErrors,
                                icon: fieldName,
                                allowOutsideClick: false,
                                confirmButtonText: 'OK'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    $('#add-district').modal('hide');
                                    $('#view-district').DataTable().ajax.reload(); 
                                    $('#add_district').find('select').val($('#add_district').find('select option:first').val()).trigger('change');
                                    $('#add_district')[0].reset();
                                    $('.text-danger').hide();
                                }
                            });
                        }
                        else if (fieldName == 'info')
                        {
                            Swal.fire({
                                text: fieldErrors,
                                icon: fieldName,
                                confirmButtonText: 'OK'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    $('#add_district').find('select').val($('#add_district').find('select option:first').val()).trigger('change');
                                    $('#add_district')[0].reset();
                                }
                            });
                        }

                    },
                    error: function(error) {
                        if (error.responseJSON && error.responseJSON.errors) {
                            $('.text-danger').show();
                            var errors = error.responseJSON.errors;
                            for (var fieldName in errors) {
                                var fieldErrors = errors[fieldName];
                                for (var i = 0; i < fieldErrors.length; i++) {
                                    fieldName = '#'+fieldName + '_error';
                                    $(fieldName).text(fieldErrors[i]);
                                }
                            }
                            Swal.close();
                        }
                    }
                });
            }
    });
    //Add District

    //Open Add District Setup
    $(document).on('click', '.adddistrict', function() {
        $('#district_division').html("<option selected disabled value=''>Select District</option>").prop('disabled', true);
        ProvinceChangeDivision('#province_name', '#district_division', '#add_district');
        $('#add-district').modal('show');

    });
    //Open Add District Setup
        $('#district_division').html("<option selected disabled value=''>Select District</option>").prop('disabled', true);
    

    // VieW Province
    var viewprovince =  $('#view-province').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/territory/province',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            {
                "data": 'name',
                "render": function(data, type, row) {
                    return data.replace(/\b\w/g, function(char) { return char.toUpperCase(); });
                }
            },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 2,
                width: "300px"
            },
            {
                targets: 3,
                width: "200px"
            }
        ]
    });

    viewprovince.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    viewprovince.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    viewprovince.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Province


    // VieW Division
    var viewdivision =  $('#view-division').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/territory/division',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            {
                "data": 'name',
                "render": function(data, type, row) {
                    return data.replace(/\b\w/g, function(char) { return char.toUpperCase(); });
                }
            },
            { data: 'province_name', name: 'province_name',render: function(data, type, row) {
                return data.charAt(0).toUpperCase() + data.slice(1);
            }},
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 2,
                width: "300px"
            },
            {
                targets: 3,
                width: "200px"
            }
        ]
    });

    viewdivision.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    viewdivision.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    viewdivision.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Division

     // View District
    var viewdistrict =  $('#view-district').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/territory/district',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            { data: 'name', name: 'name' ,render: function(data, type, row) {
                return data.charAt(0).toUpperCase() + data.slice(1);
            }},
            { data: 'division_name', name: 'division_name',render: function(data, type, row) {
                return data.charAt(0).toUpperCase() + data.slice(1);
            } },
            { data: 'province_name', name: 'province_name',render: function(data, type, row) {
                return data.charAt(0).toUpperCase() + data.slice(1);
            } },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "200px"
            },
            {
                targets: 6,
                width: "300px"
            }
        ]
    });

    viewdistrict.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    viewdistrict.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    viewdistrict.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View District

    // Update Province Status
    $(document).on('click', '.province_status', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/territory/province/update-status', // Replace with the actual URL for updating the status
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
            var status = xhr.status;
            if(status == 200)
            {
                $('#view-province').DataTable().ajax.reload(); // Refresh DataTable
            }
            },
            error: function(xhr, status, error) {
            // Handle any AJAX errors
            console.log(error);
            }
        });

    });
    // Update Province Status

    // Update Division Status
    $(document).on('click', '.division_status', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/territory/division/update-status', // Replace with the actual URL for updating the status
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
            var status = xhr.status;
            if(status == 200)
            {
                $('#view-division').DataTable().ajax.reload(); // Refresh DataTable
            }
            },
            error: function(xhr, status, error) {
            // Handle any AJAX errors
            console.log(error);
            }
        });

    });
    // Update Division Status

    // Update District Status
    $(document).on('click', '.district_status', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/territory/district/update-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
            var status = xhr.status;
            if(status == 200)
            {
                $('#view-district').DataTable().ajax.reload();
            }
            },
            error: function(xhr, status, error) {
            console.log(error);
            }
        });

    });
    // Update District Status

    //Update Province Modal
    $(document).on('click', '.edit-province', function() {
        var provinceId = $(this).data('province-id');
        $('#ajax-loader').show();
        var url = '/territory/province/' + provinceId;
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                $('#ajax-loader').hide();
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.edt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('.province-id').val(response.id);
                $('.province-name').val(response.name);  // Adjust these based on the actual structure of your response data
                $('#edit-province').modal('show');
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Province Modal

    //Update Division Modal
    $(document).on('click', '.edit-division', function() {
        var divisionId = $(this).data('division-id');
        $('#ajax-loader').show();
        var url = '/territory/division/' + divisionId;
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                $('#ajax-loader').hide();
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                var province_name = response.province_name;
                var provinceId = response.province_id;
                $('.province_name').html("<option selected value='"+provinceId+"'>" + province_name + "</option>");
                if (provinceId) {
                    $.ajax({
                        url: 'territory/updateprovince',
                        type: 'GET',
                        data: {
                            provinceId: provinceId,
                        },
                        success: function(resp) {

                            $.each(resp, function(key, value) {
                                $('.province_name').append('<option value="' + value.id + '">' + value.name + '</option>');
                            });
                        },
                        error: function(xhr, status, error) {
                            $('#ajax-loader').hide();
                            console.log(error);
                        }
                    });
                }
                $('.edt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('.division-id').val(response.id);
                $('.division-name').val(response.name);
                $('#edit-division').modal('show');
            },
            error: function(jqXHR, textStatus, errorThrown) {
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Division Modal

    //Update District Modal
    $(document).on('click', '.edit-district', function() {

        var districtId = $(this).data('district-id');
        var url = '/territory/district/' + districtId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                $('#ajax-loader').hide();
                var province_name = response.province_name;
                var provinceId = response.province_id;
                var divisionName = response.division_name;
                var divisionId = response.division_id;

                $('.u_province_name').html("<option selected value='"+provinceId+"'>" + province_name + "</option>");
                $('.u_district_division').html("<option selected value='"+divisionId+"'>" + divisionName + "</option>");

                if (provinceId) {
                    $.ajax({
                        url: 'territory/updateprovince',
                        type: 'GET',
                        data: {
                            provinceId: provinceId,
                        },
                        success: function(resp) {

                            $.each(resp, function(key, value) {
                                $('.u_province_name').append('<option value="' + value.id + '">' + value.name + '</option>');
                            });
                        },
                        error: function(xhr, status, error) {
                            console.log(error);
                        }
                    });
                    $.ajax({
                        url: 'territory/updatedivision',
                        type: 'GET',
                        data: {
                            provinceId: provinceId,
                            divisionId: divisionId,
                        },
                        beforeSend: function() {
                            $('.u_district_division').append('<option>Loading...</option>');
                        },
                        success: function(resp) {
                            $.each(resp, function(key, value) {
                                $('.u_district_division').find('option:contains("Loading...")').remove(); // Remove the loading option
                                $('.u_district_division').append('<option value="' + value.id + '">' + value.name + '</option>');
                            });
                        },
                        error: function(xhr, status, error) {
                            console.log(error);
                        }
                    });

                    $('.u_province_name').change(function() {
                        var province_id = $(this).val();
                        $.ajax({
                            url: 'territory/updatedivision',
                            type: 'GET',
                            data: {
                                provinceId: province_id,
                            },
                            success: function(resp) {
                                 $('.u_district_division').html("<option selected disabled value=''>Select Division</option>");
                                $.each(resp, function(key, value) {
                                    $('.u_district_division').append('<option value="' + value.id + '">' + value.name + '</option>');
                                });
                                // $('#district_division').prop('disabled', false);
                            },
                            error: function(xhr, status, error) {
                                console.log(error);
                            }
                        });
                    });
                }//

                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.edt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('.district-id').val(response.id);
                $('.district-name').val(response.name);
                $('#edit-district').modal('show');
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update District Modal

    //Update Province
    $('#update_province').on('submit', function (event) {
        event.preventDefault();
        var formData = $(this).serializeArray();
        var provinceId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'province-id') {
                provinceId = formData[i].value;
                break;
            }
        }
        var url = '/update-province/' + provinceId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-province').modal('hide');
                            $('#view-province').DataTable().ajax.reload(); // Refresh DataTable
                            $('#update_province')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Province

    //Update Division
    $('#update_division').on('submit', function (event) {
        event.preventDefault();
        var formData = $(this).serializeArray();
        var divisionId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'division-id') {
                divisionId = formData[i].value;
                break;
            }
        }
        var url = '/update-division/' + divisionId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-division').modal('hide');
                            $('#view-division').DataTable().ajax.reload(); // Refresh DataTable
                            $('#update_division')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Division

    //Update District
    $('#update_district').on('submit', function (event) {
        event.preventDefault();
        var formData = $(this).serializeArray();
        var districtId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'district-id') {
                districtId = formData[i].value;
                break;
            }
        }
        var url = '/update-district/' + districtId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-district').modal('hide');
                            $('#view-district').DataTable().ajax.reload(); // Refresh DataTable
                            $('#district')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update District
});// Territory

//Logs
$(document).ready(function() {
    $(document).on('click', '.logs-modal', function() {
        const logId = $(this).data('log-id');
        const modal = $('#logs');
        const modalBody = modal.find('.modal-body .row');
        modalBody.empty();
        $('#ajax-loader').show();

        if (!logId) {
            modalBody.append($('<div class="col-12 m-t-10">').text('No logs available'));
            modal.modal('show');
            $('#ajax-loader').hide();
            return;
        }
        const url = '/viewlogs/' + logId;
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                $('#ajax-loader').hide();

                if (response.length > 0) {
                    response.forEach(log => {
                        const moduleTitle = log.module.toUpperCase();
                        modal.find('.modal-title').text(moduleTitle);

                        const card = $('<div class="card">')
                            .append($('<div class="card-header">').text(log.timestamp))
                            .append($('<div class="card-body">').html(`<p class="card-text">${log.content}</p>`));

                        modalBody.append($('<div class="col-12 m-t-10">').append(card));
                    });
                } else {
                    modalBody.append($('<div class="col-12 m-t-10">').text('Logs not found'));
                }
                modal.modal('show');
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
});
//Logs

//Organization
$(document).ready(function() {
    //Add Organization
    $('#add_organization').submit(function(e) {
        e.preventDefault();
        var formData = new FormData($('#add_organization')[0]);
        var provinceValue = $('#province_name').val();
        var divisionValue = $('#division_name').val();
        var districtValue = $('#district_name').val();
        var logoValue = $('#org_logo')[0].files[0];
        var bannerValue = $('#org_banner')[0].files[0];
        formData.append('org_province', provinceValue);
        formData.append('org_division', divisionValue);
        formData.append('org_district', districtValue);
        formData.append('org_logo', logoValue);
        formData.append('org_banner', bannerValue);
        var resp = true;

        formData.forEach(function(value, key) {
            var fieldName = key;
            var fieldValue = value;
            if ((fieldValue == '' || fieldValue == null || fieldValue === 'undefined') && (fieldName != 'org_gps'))
            {
                var FieldName = fieldName;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $( 'textarea[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('textarea[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $( 'textarea[name= "' +FieldName +'"' ).addClass('requirefield');

                $('input[name="' + FieldName + '"][type="file"]').parent().addClass('requirefield');
                $( 'input[name="' + FieldName + '"][type="file"]').focus(function() {
                    $(FieldID).text("");

                    $('input[name="' + FieldName + '"][type="file"]').parent().removeClass('requirefield');
                })
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                resp = false;

            }

        });
        if(resp != false)
        {
            $.ajax({
                url: "/orgSetup/addorganization",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: formData,
                processData: false,
                contentType: false,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {
                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-organization').modal('hide');
                                $('#view-organization').DataTable().ajax.reload(); // Refresh DataTable
                                $('#add_organization').find('select').val($('#add_organization').find('select option:first').val()).trigger('change');
                                $('#add_organization')[0].reset();
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                var logoReset = $('#org_logo').dropify();
                                var logoBanner = $('#org_banner').dropify();
                                logoReset = logoReset.data('dropify');
                                logoReset.resetPreview();
                                logoReset.clearElement();
                                logoBanner = logoBanner.data('dropify');
                                logoBanner.resetPreview();
                                logoBanner.clearElement();
                                $('#add_organization').find('select').val($('#add_organization').find('select option:first').val()).trigger('change');
                                $('#add_organization')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                       Swal.close();
                    }
                }
            });
        }
    });
    //Add Organization

    // Show District according to Division
    $('#district_name').prop('disabled', true);
    DivisionChangeDistrict('#division_name', '#district_name', '#add_organization');


    // $('#division_name').change(function() {
    //     var divisionId = $(this).val();
    //     $('#district_name').html("<option selected disabled value=''>Select District</option>").prop('disabled', true);
    //     if (divisionId) {
    //         $.ajax({
    //             url: 'orgSetup/getdistrict',
    //             type: 'GET',
    //             data: {
    //                 divisionId: divisionId
    //             },
    //             success: function(response) {
    //                 if (response.length > 0) {
    //                     $.each(response, function(key, value) {
    //                         $('#district_name').append('<option value="' + value.id + '">' + value.name + '</option>');
    //                     });
    //                     $('#district_name').prop('disabled', false);
    //                 }
    //                 else{
    //                     Swal.fire({
    //                         text: 'Division are not available for selected Province',
    //                         icon: 'error',
    //                         confirmButtonText: 'OK'
    //                     }).then((result) => {
    //                         if (result.isConfirmed) {
    //                             $('#add_organization')[0].reset();
    //                         }
    //                     });

    //                 }
    //             },
    //             error: function(xhr, status, error) {
    //                 console.log(error);
    //             }
    //         });
    //     }
    // });
    // Show District according to Division

    // View Organization
    var vieworganization =  $('#view-organization').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/orgSetup/vieworganization',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'code', name: 'code' },
            { data: 'name', name: 'name' ,render: function(data, type, row) {
                return data.charAt(0).toUpperCase() + data.slice(1);
            }},
            { data: 'remarks', name: 'remarks' ,render: function(data, type, row) {
                return data.charAt(0).toUpperCase() + data.slice(1);
            } },
            { data: 'address', name: 'address'  },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "200px"
            },
            {
                targets: 6,
                width: "250px"
            }
        ]
    });

    vieworganization.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    vieworganization.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    vieworganization.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Organization

    // Update Organization Status
    $(document).on('click', '.organization_status', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/orgSetup/update-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {

                var status = xhr.status;
                if(status == 200)
                {
                    $('#view-organization').DataTable().ajax.reload();
                }
            },
            error: function(xhr, status, error) {
                console.log(error);
            }
        });

    });
    // Update Organization Status

    //Organization Detail Modal
    $(document).on('click', '.organization-detail', function() {
        var organizationId = $(this).data('org-id');
        var url = '/orgSetup/detail/' + organizationId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                $('#ajax-loader').hide();
                var contact = response.cell_no + '/' + response.landline_no;
                var logoPath = response.logo;
                var bannerPath = response.banner;
                $('#orglogo').attr('src', logoPath);
                $('#orgBanner').attr('src', bannerPath);
                $('#userOrg').text(response.name);
                $('#orgcode').text(response.code);
                $('#orgemail').text(response.email);
                $('#orgcontact').text(contact);
                $('#orgprovince').text(response.province_name);
                $('#orgdivision').text(response.division_name);
                $('#orgdistrict').text(response.district_name);
                $('#orgpersonname').text(response.person_name);
                $('#orgwebsite a').attr('href', response.website).attr('target', '_blank');
                $('#orgwebsite a').text(response.website);
                $('#orgaddress').text(response.address);
                $('#orgremarks').text(response.remarks);
                $('#organization-detail').modal('show');
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Organization Detail Modal

    // Update Organization Modal
    $(document).on('click', '.edit-organization', function() {
        var organizationId = $(this).data('organization-id');
        $('#edit_org')[0].reset();
        $('#ajax-loader').show();
        var url = '/orgSetup/updatemodal/' + organizationId;
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                $('#ajax-loader').hide();
                var province_name = response.province_name;
                var provinceId = response.province_id;
                var divisionName = response.division_name;
                var divisionId = response.division_id;
                var districtName = response.district_name;
                var districtId = response.district_id;
                var org_logo = response.org_logo;
                var org_banner = response.org_banner;
                var logoname = org_logo.substring(org_logo.lastIndexOf('/') + 1);
                var bannername = org_banner.substring(org_banner.lastIndexOf('/') + 1);

                var org_logo_input = $('#u_org_logo');
                var org_banner_input = $('#u_org_banner');
                var dropifyRenderLogo = org_logo_input.closest('.dropify-wrapper').find('.dropify-render');
                var dropifyRenderBanner = org_banner_input.closest('.dropify-wrapper').find('.dropify-render');

                dropifyRenderLogo.find('img').attr('src', org_logo);
                dropifyRenderBanner.find('img').attr('src', org_banner);

                var bannerdropifyInfos = org_banner_input.closest('.dropify-wrapper').find('.dropify-infos');
                var bannerfilenameInner = bannerdropifyInfos.find('.dropify-filename-inner');
                bannerfilenameInner.text(logoname); //

                var logodropifyInfos = org_logo_input.closest('.dropify-wrapper').find('.dropify-infos');
                var logofilenameInner = logodropifyInfos.find('.dropify-filename-inner');
                logofilenameInner.text(bannername); //

                org_logo_input.attr('data-default-file', org_logo);
                org_banner_input.attr('data-default-file', org_banner);

                org_logo_input.dropify('destroy');
                org_banner_input.dropify('destroy');

                org_logo_input.dropify();
                org_banner_input.dropify();

                $('#u_org_province').html("<option selected value='"+provinceId+"'>" + province_name + "</option>");
                $('#u_org_division').html("<option selected value='"+divisionId+"'>" + divisionName + "</option>");
                $('#u_org_district').html("<option selected value='"+districtId+"'>" + districtName + "</option>");
                $('.u_org_name').val(response.org_name);
                $('.u-org-id').val(response.id);

                $('.u_org_remarks').val(response.org_remarks);
                $('.u_org_address').val(response.org_address);
                $('.u_org_person_name').val(response.org_personname);
                $('.u_org_person_email').val(response.org_email);
                $('.u_org_website').val(response.org_website);
                $('.u_org_gps').val(response.org_gps);
                $('.u_org_cell').val(response.org_cell_no);
                $('.u_org_landline').val(response.org_landline_no);

                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.u_org_edt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });

                if (provinceId) {
                    $.ajax({
                        url: 'territory/updateprovince',
                        type: 'GET',
                        data: {
                            provinceId: provinceId,
                        },
                        beforeSend: function() {
                            $('#u_org_province').append('<option>Loading...</option>');
                        },
                        success: function(resp) {
                            $('#u_org_province').find('option:contains("Loading...")').remove(); // Remove the loading option
                            $.each(resp, function(key, value) {
                                $('#u_org_province').append('<option value="' + value.id + '">' + value.name + '</option>');
                            });


                        },
                        error: function(xhr, status, error) {
                            console.log(error);
                        }
                    });

                    $.ajax({
                        url: 'territory/updatedivision',
                        type: 'GET',
                        data: {
                            provinceId: provinceId,
                            divisionId: divisionId,
                        },
                        beforeSend: function() {
                            $('#u_org_division').append('<option>Loading...</option>');
                        },
                        success: function(resp) {
                            $('#u_org_division').find('option:contains("Loading...")').remove(); // Remove the loading option
                            $.each(resp, function(key, value) {
                                $('#u_org_division').append('<option value="' + value.id + '">' + value.name + '</option>');
                            });
                        },
                        error: function(xhr, status, error) {
                            console.log(error);
                        }
                    });

                    $('#u_org_province').change(function() {
                        var province_id = $(this).val();
                        $.ajax({
                            url: 'territory/updatedivision',
                            type: 'GET',
                            data: {
                                provinceId: province_id,
                                divisionId: divisionId,
                            },
                            beforeSend: function() {
                                $('#u_org_division').append('<option>Loading...</option>');
                            },
                            success: function(resp) {
                                 $('#u_org_division').html("<option selected disabled value=''>Select Division</option>");
                                $.each(resp, function(key, value) {
                                    $('#u_org_division').append('<option value="' + value.id + '">' + value.name + '</option>');
                                });
                            },
                            error: function(xhr, status, error) {
                                console.log(error);
                            }
                        });
                    });

                    $('#u_org_division').change(function() {
                        var org_divisionid = $(this).val();
                        $.ajax({
                            url: 'territory/updatedistrict',
                            type: 'GET',
                            data: {
                                divisionid: org_divisionid,
                            },
                            beforeSend: function() {
                                $('#u_org_district').append('<option>Loading...</option>');
                            },
                            success: function(resp) {
                                 $('#u_org_district').html("<option selected disabled value=''>Select District</option>");
                                $.each(resp, function(key, value) {
                                    $('#u_org_district').append('<option value="' + value.id + '">' + value.name + '</option>');
                                });
                            },
                            error: function(xhr, status, error) {
                                console.log(error);
                            }
                        });
                    });
                }//

                $('#edit-organization').modal('show');
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    // Update Organization Modal

    //Update Organization
    $('#edit_org').on('submit', function (event) {
        event.preventDefault();
        var formData = new FormData($('#edit_org')[0]);
        var provinceValue = $('#u_org_province').val();
        var divisionValue = $('#u_org_division').val();
        var districtValue = $('#u_org_district').val();
        var orgId = $('.u-org-id').val();

        var logoValue = $('#u_org_logo')[0].files[0];
        var bannerValue = $('#u_org_banner')[0].files[0];
        if(logoValue != 'undefined')
        {
            formData.append('u_org_logo', logoValue);
        }

        if(bannerValue != 'undefined')
        {
            formData.append('u_org_banner', bannerValue);
        }


        formData.append('u_org_province', provinceValue);
        formData.append('u_org_division', divisionValue);
        formData.append('u_org_district', districtValue);

        var url = '/edit-org/' + orgId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            processData: false,
            contentType: false,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-organization').modal('hide');
                            $('#view-organization').DataTable().ajax.reload(); // Refresh DataTable
                            $('#edit_org')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Organization

});
//Organization

//Users
$('#isEmployee').on('switchChange.bootstrapSwitch', function(event, state) {
    if (state) {
        $('#userEmployee').show();
        $('#userDetails').hide();
        $('#useremail_error').hide();
        $('#username_error').hide();
        $('#userEmp').val($('#userEmp option:first').val()).change();
        $('#empStatus').val('on');
    } else {
        $('#userDetails').show();
        $('#userEmployee').hide();
        $('#username_error').show();
        $('input[name="username"]').val('').attr('readonly', false);
        $('#useremail_error').show();
        $('input[name="useremail"]').val('').attr('readonly', false);
        $('#empStatus').val('off');
    }
});
$('#userEmp').html("<option selected disabled value=''>Select Employee</option>").prop('disabled', true);

$(document).on('change', '#userOrg', function() {
    var orgId = $(this).val();
    fetchOrganizationEmployees(orgId, '#userEmp', function(data) {
        if (data.length > 0) {
            $('#userEmp').empty();
            $('#userEmp').html("<option selected disabled value=''>Select Employee</option>").prop('disabled', false);
            $.each(data, function(key, value) {
                $('#userEmp').append('<option value="' + value.id + '">' + value.name + '</option>');
            });
        }
        else {
            Swal.fire({
                text: 'No employees are currently available for the selected organization.',
                icon: 'error',
                confirmButtonText: 'OK'
            }).then((result) => {
                if (result.isConfirmed) {
                    $('#userEmp').html("<option selected disabled value=''>N/A</option>").prop('disabled', true);
                    // $('#add-user').modal('hide');
                }
            });
        }
    }, function(error) {
        console.log(error);
    });
});

//Open Add User Setup
$(document).on('click', '.adduser', function() {
    var orgId = $('#usereOrg').val();
    $('#add-user').modal('show');
    if (orgId) {

    fetchOrganizationEmployees(orgId, '#userEmp', function(data) {
        if (data.length > 0) {
            $('#userEmp').empty();
            $('#userEmp').html("<option selected disabled value=''>Select Employee</option>").prop('disabled', false);
            $.each(data, function(key, value) {
                $('#userEmp').append('<option value="' + value.id + '">' + value.name + '</option>');
            });
        }
        else {
            $('#userEmp').html("<option selected disabled value=''>N/A</option>").prop('disabled', true);
            Swal.fire({
                text: 'Employees are not available for your Organization',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        }
    }, function(error) {
        console.log(error);
    });
}
});
//Open Add User Setup

$('#userEmp').change(function() {
    var empId = $(this).val();
    fetchEmployeeDetails(empId, '#userEmp', function(data) {
        $.each(data, function(key, value) {
            $('#userDetails').show();
            $('#nameLabel').hide();
            $('input[name="username"]').val(value.name).attr('readonly', true);
            $('#emailLabel').hide();
            $('input[name="useremail"]').val(value.email).attr('readonly', true);
        });

    }, function(error) {
        console.log(error);
    });
});

$(document).ready(function() {
    //Add User
    $('#add_user').submit(function(e) {
        e.preventDefault();
        var data = SerializeForm(this);
        var resp = true;
        $(data).each(function(i, field){
            if ((field.value == '') || (field.value == null))
            {
                var FieldName = field.name;
                if((FieldName != 'userEmp') && (FieldName != 'username') && (FieldName != 'useremail'))
                {
                    var FieldID = '#'+FieldName + "_error";
                    $(FieldID).text("This field is required");
                    $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                    $( 'input[name= "' +FieldName +'"' ).focus(function() {
                        $(FieldID).text("");
                        $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                    })
                    $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                    $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                        $(FieldID).text("");
                        $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                    });
                    resp = false;
                }

            }

        });

        if(resp != false)
        {
            $.ajax({
                url: "/user/adduser",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {
                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                        var fieldName = fieldName;
                        var errorElemId = '#' + fieldName + '_error';
                        $(errorElemId).text(fieldErrors);
                        $('select[name= "' +fieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                        (function(currentFieldName, currentErrorElemId) {
                            $('select[name= "' + currentFieldName +'"' ).on('select2:open', function() {
                                $(currentErrorElemId).text("");
                                $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                            });
                        })(fieldName, errorElemId);
                        Swal.close();
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                location.reload();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                location.reload();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add User

    // VieW User
    var viewuser =  $('#view-user').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/user/data',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            { data: 'name', name: 'name', render: function(data, type, row) {
                return data.charAt(0).toUpperCase() + data.slice(1);
            }},
            { data: 'email', name: 'email' },
            { data: 'rolename', name: 'rolename',render: function(data, type, row) {
                return data.charAt(0).toUpperCase() + data.slice(1);
            }},
            { data: 'empname', name: 'empname',render: function(data, type, row) {
                if (data === null) {
                    return "N/A";
                } else {
                    return data.charAt(0).toUpperCase() + data.slice(1);
                }
            }},
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        language: {
            emptyTable: "No data available"
        },
        columnDefs: [
            {
                targets: 1,
                width: "300px"
            },
            {
                targets: 7,
                width: "300px"
            }
        ]
    });

    viewuser.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });

    // Show the loader before an AJAX request is made
    viewuser.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    viewuser.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View User

    // Update Status
    $(document).on('click', '.user_status', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};
        $.ajax({
            url: '/user/update-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
                var status = xhr.status;
                if(status == 200)
                {
                    $('#view-user').DataTable().ajax.reload();
                }
            },
            error: function(xhr, status, error) {
                console.log(error);
            }
        });
    });
    // Update Status

    //Update User Modal
    $(document).on('click', '.edit-user', function() {
        $('#ajax-loader').show();
        var userId = $(this).data('user-id');
        var url = '/user/editdata/' + userId;
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                $('#ajax-loader').hide();
                var roleId = response.roleId;
                var empId = response.empId;
                var roleName = response.rolename;
                var empName = response.empName;
                var orgId = response.orgId;
                var orgName = response.orgName;
                $('.u_user_role').html("<option selected value='"+roleId+"'>" + roleName + "</option>");
                $('.u_user_org').html("<option selected value='"+orgId+"'>" + orgName + "</option>");
                $('.user-name').val(response.name).attr('readonly',true);
                $('.user-email').val(response.email).attr('readonly',true);
                $('#u_employee').hide();
                if (roleId) {
                    $.ajax({
                        url: 'user/updaterole',
                        type: 'GET',
                        data: {
                            roleId: roleId,
                            roleName: roleName,
                        },
                        success: function(resp) {
                            $.each(resp, function(key, value) {
                                $('.u_user_role').append('<option value="' + value.id + '">' + value.role + '</option>');
                            });
                        },
                        error: function(xhr, status, error) {
                            console.log(error);
                        }
                    });

                    fetchOrganizations(orgId,orgName,'.u_user_org', function(data) {
                        $('.u_user_org').find('option:contains("Loading...")').remove();
                        $.each(data, function(key, value) {
                            $('.u_user_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                        });
                    });
                    if(empId == '0')
                    {
                        $('.u_user_emp').append('<option selected value="0"></option>');
                        $('.u_user_emp').prop('required', false);
                    }
                    else{
                        $('.u_user_emp').prop('required', true);
                        $('.u_user_emp').html("<option selected value='"+empId+"'>" + empName + "</option>").prop('disabled',true);
                        
                        $(document).on('change', '.u_user_org', function() {
                            var orgId = $(this).val();
                            fetchOrganizationEmployees(orgId, '.u_user_emp', function(data) {
                                if (data.length > 0) {
                                    $('.u_user_emp').empty();
                                    $('.u_user_emp').html("<option selected disabled value=''>Select Employee</option>").prop('disabled', false);
                                    $.each(data, function(key, value) {
                                        $('.u_user_emp').append('<option value="' + value.id + '">' + value.name + '</option>');
                                    });
                                }
                                else {
                                    Swal.fire({
                                        text: 'Employees are not available for selected Organization',
                                        icon: 'error',
                                        confirmButtonText: 'OK'
                                    }).then((result) => {
                                        if (result.isConfirmed) {
                                            $('#update_user').modal('hide');
                                        }
                                    });
                                }
                            }, function(error) {
                                console.log(error);
                            });
                        });
        
                        $('.u_user_emp').change(function() {
                            var empId = $(this).val();
                            fetchEmployeeDetails(empId, '.u_user_emp', function(data) {
                                $.each(data, function(key, value) {
                                    $('input[name="user_name"]').val(value.name).attr('readonly', true);
                                    $('input[name="user_email"]').val(value.email).attr('readonly', true);
                                });
        
                            }, function(error) {
                                console.log(error);
                            });
                        });
                        // fetchEmployees(empId, '.u_user_emp', function(data) {
                        //     $.each(data, function(key, value) {
                        //         if(value.id != empId)
                        //         {
                        //             $('.u_user_emp').append('<option value="' + value.id + '">' + value.name + '</option>');
                        //         }
                        //     });

                        // }, function(error) {
                        //     console.log(error);
                        // });
                    }
                }

              

                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.edt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('.user-id').val(userId);

                $('#edit-user').modal('show');
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update User Modal

    //Update User
    $('#update_user').on('submit', function (event) {
        event.preventDefault();
        var formData = SerializeForm(this);
        // var formData = $(this).serializeArray();
        var userId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'user-id') {
                userId = formData[i].value;
                break;
            }
        }
        var url = '/update-user/' + userId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-user').modal('hide');
                        }
                    });
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-user').modal('hide');
                            $('#view-user').DataTable().ajax.reload(); // Refresh DataTable
                            $('#update_user')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
                else if (fieldName == 'info')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update User

    // Update Image
    $('#u_img').submit(function(e) {
        e.preventDefault(); // Prevent the form from submitting normally
        console.log('ok');
        var formData = new FormData($('#u_img')[0]);
        var userId = $('#user-id').val();
        var userImg = $('#userImg')[0].files[0];
        formData.append('userImg', userImg);

        var url = '/userImg/' + userId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            processData: false,
            contentType: false,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {

                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('.text-danger').hide();
                            window.location.href = 'profile';
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });

        return;




    });
    // Update Image

});
//Users

// Cost Center
$(document).ready(function() {
    //Add CCType
    $('#add_ccType').submit(function(e) {
        e.preventDefault(); // Prevent the form from submitting normally
        var data = $(this).serializeArray();
        var orderingCC = $('#orderingCC').val();
        var performingCC = $('#performingCC').val();
        data.push({ name: 'ordering_cc', value: orderingCC });
        data.push({ name: 'performing_cc', value: performingCC });
        var resp = true;
        $(data).each(function(i, field){
            if ((field.value == '') || (field.value == null))
            {
                var FieldName = field.name;

                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $( 'textarea[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('textarea[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $( 'textarea[name= "' +FieldName +'"' ).addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                resp = false;

            }

        });


        if(resp != false)
        {
            $.ajax({
                url: "/costcenter/addCCType",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {
                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                        $('.text-danger').hide();
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-ccType').modal('hide');
                                $('#view-ccType').DataTable().ajax.reload();
                                $('#add_ccType').find('select').val($('#add_ccType').find('select option:first').val()).trigger('change');

                                $('#add_ccType')[0].reset();
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_ccType').find('select').val($('#add_ccType').find('select option:first').val()).trigger('change');
                                $('#add_ccType')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add CCType

    // VieW CCType
    var viewccType =  $('#view-ccType').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/costcenter/cctype',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            { data: 'type', name: 'type',render: function(data, type, row) {
                return data.charAt(0).toUpperCase() + data.slice(1);
            }},
            { data: 'remarks', name: 'remarks' },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "200px"
            },
            {
                targets: 5,
                width: "250px"
            }
        ]
    });

    viewccType.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    viewccType.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    viewccType.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View CCType

    // Update CCType Status
    $(document).on('click', '.ccType_status', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/costcentertype/update-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
            var status = xhr.status;
                if(status == 200)
                {
                    $('#view-ccType').DataTable().ajax.reload();
                }
                },
                error: function(xhr, status, error) {
                    console.log(error);
            }
        });

    });
    // Update CCType Status

     //Update CCType Modal
    $(document).on('click', '.edit-cctype', function() {
        var ccTypeId = $(this).data('cctype-id');
        var url = '/costcenter/updateCCtype/' + ccTypeId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                $('#ajax-loader').hide();
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.edt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('.ccType-id').val(response.id);
                $('.cctype-name').val(response.type);
                $('.cc-remarks').val(response.remarks);
                $('.u_ordering').html("<option selected value='"+response.orderingid+"'>" + response.ordering + "</option>");
                $('.u_performing').html("<option selected value='"+response.performingid+"'>" + response.performing + "</option>");
                var orderingnext = response.orderingid == '1' ? 'Disabled' : 'Enabled';
                var orderingnextid = response.orderingid == '1' ? 0 : 1;
                var performingnext = response.performingid == '1' ? 'Disabled' : 'Enabled';
                var performingnextid = response.performingid == '1' ? 0 : 1;
                $('.u_ordering').append('<option value="' + orderingnextid + '">' + orderingnext + '</option>');
                $('.u_performing').append('<option value="' + performingnextid + '">' + performingnext + '</option>');
                $('#edit-cctype').modal('show');

            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update CCType Modal

    //Update CCType
    $('#update_ccType').on('submit', function (event) {
        event.preventDefault();
        var formData = $(this).serializeArray();
        var ccTypeId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'ccType-id') {
                ccTypeId = formData[i].value;
                break;
            }
        }
        var url = '/update-cctype/' + ccTypeId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            // console.log('result conformed');
                            $('#edit-cctype').modal('hide');
                            $('#view-ccType').DataTable().ajax.reload(); // Refresh DataTable
                            $('#update_ccType')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update CCType

    //Add CostCenter
    $('#add_costcenter').submit(function(e) {
        e.preventDefault(); // Prevent the form from submitting normally
        var data = $(this).serializeArray();
        var cc_type = $('#cc_type').val();
        data.push({ name: 'cc_type', value: cc_type });
        var resp = true;
        $(data).each(function(i, field){
            if ((field.value == '') || (field.value == null))
            {
                var FieldName = field.name;

                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })

                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                resp = false;

            }
        });



        if(resp != false)
        {
            $.ajax({
                url: "/costcenter/addcostcenter",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {
                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-costcenter').modal('hide');
                                $('#costcenter').DataTable().ajax.reload();
                                $('#add_costcenter').find('select').val($('#add_costcenter').find('select option:first').val()).trigger('change');

                                $('#add_costcenter')[0].reset();
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_costcenter').find('select').val($('#add_costcenter').find('select option:first').val()).trigger('change');
                                $('#add_costcenter')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add CostCenter

    // VieW CostCenter
     var viewcostcenter =  $('#costcenter').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/costcenter/ccdata',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            {
                "data": 'name',
                "render": function(data, type, row) {
                    return data.replace(/\b\w/g, function(char) { return char.toUpperCase(); });
                }
            },
            { data: 'type', name: 'type' },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "200px"
            },
            {
                targets: 5,
                width: "300px"
            }
        ]
    });

    viewcostcenter.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    viewcostcenter.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    viewcostcenter.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View CostCenter

    // Update CostCenter Status
    $(document).on('click', '.cc_status', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};
        $.ajax({
            url: '/costcenter/update-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
                var status = xhr.status;
                if(status == 200)
                {
                    $('#costcenter').DataTable().ajax.reload();
                }
            },
            error: function(xhr, status, error) {
                console.log(error);
            }
        });

    });
    // Update CostCenter Status

    //Update CostCenter Modal
    $(document).on('click', '.edit-costcenter', function() {
        var CostCenterId = $(this).data('costcenter-id');
        var url = '/costcenter/updatecostcenter/' + CostCenterId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                $('#ajax-loader').hide();
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.edt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                console.log(response.ccType);
                $('.cc-id').val(response.id);
                $('.cc_name').val(response.name);
                $('.u_cc_type').html("<option selected value='"+response.typeid+"'>" + response.ccType + "</option>");
                $.ajax({
                    url: 'costcenter/getcctype',
                    type: 'GET',
                    data: {
                        ccTypeId: response.typeid,
                        ccType: response.ccType,
                    },
                    success: function(resp) {
                        $.each(resp, function(key, value) {
                            $('.u_cc_type').append('<option value="' + value.id + '">' + value.type + '</option>');
                        });
                    },
                    error: function(xhr, status, error) {
                        console.log(error);
                    }
                });

                $('#edit-costcenter').modal('show');

            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update CostCenter Modal

    //Update CostCenter
    $('#update_cc').on('submit', function (event) {
        event.preventDefault();
        var formData = $(this).serializeArray();
        var ccId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'cc-id') {
                ccId = formData[i].value;
                break;
            }
        }
        var url = '/update-costcenter/' + ccId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-costcenter').modal('hide');
                            $('#costcenter').DataTable().ajax.reload(); // Refresh DataTable
                            $('#update_cc')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update CostCenter
});
// Cost Center

//Services Setup
$(document).ready(function() {
    //Add Service Mode
    $('#add_servicemode').submit(function(e) {
        e.preventDefault(); 
        var data = SerializeForm(this);
        var resp = true;
        $(data).each(function(i, field){
            if ((field.value == '') || (field.value == null))
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })

                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                resp = false;
            }
        });

        if(resp != false)
        {
            $.ajax({
                url: "/services/addservicemode",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {

                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-servicemode').modal('hide');
                                $('#view-servicemode').DataTable().ajax.reload();
                                $('#add_servicemode')[0].reset();
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_servicemode')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Service Mode

    // View Service Mode Data
    var viewserviceMode =  $('#view-servicemode').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/services/servicemode',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            {
                "data": 'name',
                "render": function(data, type, row) {
                    return data.replace(/\b\w/g, function(char) { return char.toUpperCase(); });
                }
            },
            {
                "data": 'billing_mode',
                "render": function(data, type, row) {
                    return data.replace(/\b\w/g, function(char) { return char.toUpperCase(); });
                }
            },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "200px"
            },
            {
                targets: 5,
                width: "250px"
            }
        ]
    });

    viewserviceMode.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    viewserviceMode.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    viewserviceMode.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Service Mode Data

    // Update Service Mode Status
    $(document).on('click', '.servicemode_status ', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/services/sm-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
            var status = xhr.status;
                if(status == 200)
                {
                    $('#view-servicemode').DataTable().ajax.reload();
                }
                },
                error: function(xhr, status, error) {
                    console.log(error);
            }
        });

    });
    // Update Service Mode Status

    //Update Service Mode Modal
    $(document).on('click', '.edit-servicemode', function() {
        var ServiceModeId = $(this).data('servicemode-id');
        var url = '/services/updateservicemode/' + ServiceModeId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.edt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                var billingmodeOptions = [
                    {value: "direct billing", label: "Direct Billing"},
                    {value: "indirect billing", label: "Indirect Billing"}
                ];

                $('#u_billing_mode').html("<option selected value='" + response.billing_mode + "'>" + response.billingmode + "</option>");
                billingmodeOptions = billingmodeOptions.filter(option => option.value !== response.billing_mode);
                billingmodeOptions.forEach(function(option) {
                    $('#u_billing_mode').append("<option value='" + option.value + "'>" + option.label + "</option>");
                });

                $('.sm-id').val(response.id);
                $('.u_sm').val(response.name);
                $('#edit-servicemode').modal('show');
                $('#ajax-loader').hide();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Service Mode Modal

    //Update Service Mode
    $('#u_servicemode').on('submit', function (event) {
        event.preventDefault();
        var formData = $(this).serializeArray();
        var smId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'sm-id') {
                smId = formData[i].value;
                break;
            }
        }
        var url = 'services/update-servicemode/' + smId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-servicemode').modal('hide');
                            $('#view-servicemode').DataTable().ajax.reload(); // Refresh DataTable
                            $('#u_servicemode')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Service Mode


    //Add Service Type
    $('#add_servicetype').submit(function(e) {
        e.preventDefault(); // Prevent the form from submitting normally
        var data = $(this).serializeArray();
        var resp = true;
        $(data).each(function(i, field){
            if ((field.value == '') || (field.value == null))
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                resp = false;
            }
        });

        if(resp != false)
        {
            $.ajax({
                url: "/services/addservicetype",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {

                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-servicetype').modal('hide');
                                $('#view-servicetype').DataTable().ajax.reload();
                                $('#add_servicetype')[0].reset();
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_servicetype')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Service Type

    // View Service Type Data
    var viewserviceType =  $('#view-servicetype').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/services/servicetype',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            {
                "data": 'name',
                "render": function(data, type, row) {
                    return data.replace(/\b\w/g, function(char) { return char.toUpperCase(); });
                }
            },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "200px"
            },
            {
                targets: 4,
                width: "250px"
            }
        ]
    });

    viewserviceType.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    viewserviceType.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    viewserviceType.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Service Type Data

    // Update Service Type Status
    $(document).on('click', '.servicetype_status', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/services/st-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
            var status = xhr.status;
                if(status == 200)
                {
                    $('#view-servicetype').DataTable().ajax.reload();
                }
                },
                error: function(xhr, status, error) {
                    console.log(error);
            }
        });

    });
    // Update Service Type Status


    // //Add Service Type
    // $('#add_servicetype').submit(function(e) {
    //     e.preventDefault(); // Prevent the form from submitting normally
    //     var data = $(this).serializeArray();
    //     var resp = true;
    //     $(data).each(function(i, field){
    //         if ((field.value == '') || (field.value == null))
    //         {
    //             var FieldName = field.name;
    //             var FieldID = '#'+FieldName + "_error";
    //             $(FieldID).text("This field is required");
    //             $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
    //             $( 'input[name= "' +FieldName +'"' ).focus(function() {
    //                 $(FieldID).text("");
    //                 $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
    //             })
    //             resp = false;
    //         }
    //     });

    //     if(resp != false)
    //     {
    //         $.ajax({
    //             url: "/services/addservicetype",
    //             method: "POST",
    //             headers: {
    //                 'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
    //             },
    //             data: data,
    //             beforeSend: function() {
    //                 Swal.fire({
    //                     title: "Processing",
    //                     allowOutsideClick: false,
    //                     willOpen: () => {
    //                         Swal.showLoading();
    //                     },
    //                     showConfirmButton: false
    //                 });
    //             },
    //             success: function(response) {

    //                 for (var fieldName in response) {
    //                     var fieldErrors = response[fieldName];
    //                 }
    //                 if (fieldName == 'error')
    //                 {
    //                     Swal.fire({
    //                         text: fieldErrors,
    //                         icon: fieldName,
    //                         confirmButtonText: 'OK'
    //                     })
    //                 }
    //                 else if (fieldName == 'success')
    //                 {
    //                     Swal.fire({
    //                         text: fieldErrors,
    //                         icon: fieldName,
    //                         allowOutsideClick: false,
    //                         confirmButtonText: 'OK'
    //                     }).then((result) => {
    //                         if (result.isConfirmed) {
    //                             $('#add-servicetype').modal('hide');
    //                             $('#view-servicetype').DataTable().ajax.reload();
    //                             $('#add_servicetype')[0].reset();
    //                             $('.text-danger').hide();
    //                         }
    //                     });
    //                 }
    //                 else if (fieldName == 'info')
    //                 {
    //                     Swal.fire({
    //                         text: fieldErrors,
    //                         icon: fieldName,
    //                         confirmButtonText: 'OK'
    //                     }).then((result) => {
    //                         if (result.isConfirmed) {
    //                             $('#add_servicetype')[0].reset();
    //                         }
    //                     });
    //                 }

    //             },
    //             error: function(error) {
    //                 if (error.responseJSON && error.responseJSON.errors) {
    //                     $('.text-danger').show();
    //                     var errors = error.responseJSON.errors;
    //                     for (var fieldName in errors) {
    //                         var fieldErrors = errors[fieldName];
    //                         for (var i = 0; i < fieldErrors.length; i++) {
    //                             fieldName = '#'+fieldName + '_error';
    //                             $(fieldName).text(fieldErrors[i]);
    //                         }
    //                     }
    //                     Swal.close();
    //                 }
    //             }
    //         });
    //     }
    // });
    // //Add Service Type

    // // View Service Type Data
    // var viewserviceType =  $('#view-servicetype').DataTable({
    //     processing: true,
    //     serverSide: true,
    //     ajax: '/services/servicetype',
    //     order: [[0, 'desc']],
    //     columns: [
    //         { data: 'id_raw', name: 'id_raw', visible: false },
    //         { data: 'id', name: 'id' },
    //         {
    //             "data": 'name',
    //             "render": function(data, type, row) {
    //                 return data.replace(/\b\w/g, function(char) { return char.toUpperCase(); });
    //             }
    //         },
    //         { data: 'status', name: 'status' },
    //         { data: 'action', name: 'action', orderable: false, searchable: false }
    //     ],
    //     columnDefs: [
    //         {
    //             targets: 1,
    //             width: "200px"
    //         },
    //         {
    //             targets: 4,
    //             width: "250px"
    //         }
    //     ]
    // });

    // viewserviceType.on('draw.dt', function() {
    //     $('[data-toggle="popover"]').popover({
    //         html: true
    //     });
    // });
    // // Show the loader before an AJAX request is made
    // viewserviceType.on('preXhr.dt', function() {
    //     $('#ajax-loader').show();
    // });
    // // Hide the loader after the AJAX request is complete
    // viewserviceType.on('xhr.dt', function() {
    //     $('#ajax-loader').hide();
    // });
    // // View Service Type Data

    // // Update Service Type Status
    // $(document).on('click', '.servicetype_status', function() {
    //     var id = $(this).data('id');
    //     var status = $(this).data('status');
    //     var data = {id: id,status: status};

    //     $.ajax({
    //         url: '/services/st-status',
    //         method: 'GET',
    //         data: data,
    //         beforeSend: function() {
    //             $('#ajax-loader').show();
    //         },
    //         success: function(response,textStatus, xhr) {
    //         var status = xhr.status;
    //             if(status == 200)
    //             {
    //                 $('#view-servicetype').DataTable().ajax.reload();
    //             }
    //             },
    //             error: function(xhr, status, error) {
    //                 console.log(error);
    //         }
    //     });

    // });
    // // Update Service Type Status

    //Update Service Type Modal
    $(document).on('click', '.edit-servicetype', function() {
        var ServiceModeId = $(this).data('servicetype-id');
        var url = '/services/updateservicetype/' + ServiceModeId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.edt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('.st-id').val(response.id);
                $('.u_st').val(response.name);
                $('#edit-servicetype').modal('show');
                $('#ajax-loader').hide();

            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Service Type Modal

    //Update Service Type
    $('#u_servicetype').on('submit', function (event) {
        event.preventDefault();
        var formData = $(this).serializeArray();
        var stId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'st-id') {
                stId = formData[i].value;
                break;
            }
        }
        var url = 'services/update-servicetype/' + stId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-servicetype').modal('hide');
                            $('#view-servicetype').DataTable().ajax.reload(); // Refresh DataTable
                            $('#u_servicetype')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Service Type


    //Add Service Unit
    $('#add_serviceunit').submit(function(e) {
        e.preventDefault(); // Prevent the form from submitting normally
        var data = $(this).serializeArray();
        var resp = true;
        $(data).each(function(i, field){
            if ((field.value == '') || (field.value == null))
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                resp = false;
            }
        });

        if(resp != false)
        {
            $.ajax({
                url: "/services/addserviceunit",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {

                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-serviceunit').modal('hide');
                                $('#view-serviceunit').DataTable().ajax.reload();
                                $('#add_serviceunit')[0].reset();
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_serviceunit')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Service Unit

    // View Service Unit Data
    var viewserviceUnit =  $('#view-serviceunit').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/services/serviceunit',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            {
                "data": 'name',
                "render": function(data, type, row) {
                    return data.replace(/\b\w/g, function(char) { return char.toUpperCase(); });
                }
            },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "200px"
            },
            {
                targets: 4,
                width: "250px"
            }
        ]
    });

    viewserviceUnit.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    viewserviceUnit.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    viewserviceUnit.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Service Unit Data

    // Update Service Unit Status
    $(document).on('click', '.serviceunit_status', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/services/su-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
            var status = xhr.status;
                if(status == 200)
                {
                    $('#view-serviceunit').DataTable().ajax.reload();
                }
                },
                error: function(xhr, status, error) {
                    console.log(error);
            }
        });

    });
    // Update Service Unit Status

    //Update Service Unit Modal
    $(document).on('click', '.edit-serviceunit', function() {
        var ServiceUnitId = $(this).data('serviceunit-id');
        var url = '/services/updateserviceunit/' + ServiceUnitId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.edt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('.su-id').val(response.id);
                $('.u_su').val(response.name);
                $('#edit-serviceunit').modal('show');
                $('#ajax-loader').hide();

            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Service Unit Modal

    //Update Service Unit
    $('#u_serviceunit').on('submit', function (event) {
        event.preventDefault();
        var formData = $(this).serializeArray();
        var suId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'su-id') {
                suId = formData[i].value;
                break;
            }
        }
        var url = 'services/update-serviceunit/' + suId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-serviceunit').modal('hide');
                            $('#view-serviceunit').DataTable().ajax.reload(); // Refresh DataTable
                            $('#u_serviceunit')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Service Unit

    //Add Service Group
    $('#add_servicegroup').submit(function(e) {
        e.preventDefault();
        var data = $(this).serializeArray();
        var sg_type = $('#sg_type').val();
        data.push({ name: 'sg_type', value: sg_type });
        var resp = true;
        $(data).each(function(i, field){
            if ((field.value == '') || (field.value == null))
            {
                var FieldName = field.name;

                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                // $( 'select[name= "' +FieldName +'"' ).addClass('requirefield');
                // $( 'select[name= "' +FieldName +'"' ).focus(function() {
                //     $(FieldID).text("");
                //     $('select[name= "' +FieldName +'"' ).removeClass("requirefield");
                // });
                resp = false;
            }
        });

        if(resp != false)
        {
            $.ajax({
                url: "/services/addservicegroup",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {

                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-servicegroup').modal('hide');
                                $('#view-servicegroup').DataTable().ajax.reload();
                                $('#add_servicegroup').find('select').val($('#add_servicegroup').find('select option:first').val()).trigger('change');
                                $('#add_servicegroup')[0].reset();
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_servicegroup').find('select').val($('#add_servicegroup').find('select option:first').val()).trigger('change');
                                $('#add_servicegroup')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Service Group

    // View Service Group Data
    var viewserviceGroup =  $('#view-servicegroup').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/services/servicegroup',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            {
                "data": 'name',
                "render": function(data, type, row) {
                    return data.replace(/\b\w/g, function(char) { return char.toUpperCase(); });
                }
            },
            { data: 'type_name', name: 'type_name',render: function(data, type, row) {
                return data.charAt(0).toUpperCase() + data.slice(1);
            }},
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "200px"
            },
            {
                targets: 5,
                width: "250px"
            }
        ]
    });

    viewserviceGroup.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    viewserviceGroup.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    viewserviceGroup.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Service Group Data

    // Update Service Group Status
    $(document).on('click', '.servicegroup_status', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};
        $.ajax({
            url: '/services/sg-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
            var status = xhr.status;
                if(status == 200)
                {
                    $('#view-servicegroup').DataTable().ajax.reload();
                }
            },
            error: function(xhr, status, error) {
                console.log(error);
            }
        });
    });
    // Update Service Group Status

    //Update Service Group Modal
    $(document).on('click', '.edit-servicegroup', function() {
        var ServiceGroupId = $(this).data('servicegroup-id');
        var url = '/services/updateservicegroup/' + ServiceGroupId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                $('#ajax-loader').hide();
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.edt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('.sg-id').val(response.id);
                $('.u_sg').val(response.name);
                $('.u_sg_type').html("<option selected value='"+response.typeid+"'>" + response.serviceType + "</option>");
                $.ajax({
                    url: 'services/getservicetype',
                    type: 'GET',
                    data: {
                        serviceTypeId: response.typeid,
                        serviceType: response.serviceType,
                    },
                    success: function(resp) {
                        $.each(resp, function(key, value) {
                            $('.u_sg_type').append('<option value="' + value.id + '">' + value.name + '</option>');
                        });
                    },
                    error: function(xhr, status, error) {
                        console.log(error);
                    }
                });

                $('#edit-servicegroup').modal('show');

            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Service Group Modal

    //Update Service Group
    $('#u_servicegroup').on('submit', function (event) {
        event.preventDefault();
        var formData = $(this).serializeArray();
        var sgId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'sg-id') {
                sgId = formData[i].value;
                break;
            }
        }
        var url = 'services/update-servicegroup/' + sgId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-servicegroup').modal('hide');
                            $('#view-servicegroup').DataTable().ajax.reload(); // Refresh DataTable
                            $('#u_servicegroup')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Service Group

    //Add Services
    $('#add_services').submit(function(e) {
        e.preventDefault();
        var data = SerializeForm(this);
        var resp = true;
        $(data).each(function(i, field){
            var FieldName = field.name;
            var fieldValue = field.value;
            if ((fieldValue == '' || fieldValue == null || fieldValue === 'undefined') && (FieldName != 's_icd_code'))
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });

                resp = false;
            }
        });

        if(resp != false)
        {
            $.ajax({
                url: "/services/addservices",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {

                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-services').modal('hide');
                                $('#view-services').DataTable().ajax.reload();
                                $('#add_services').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('#add_services')[0].reset();
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_services').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('#add_services')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Services

    // View Services Data
    var viewservices =  $('#view-services').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/services/getservices',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            {
                "data": 'name',
                "render": function(data, type, row) {
                    return data.replace(/\b\w/g, function(char) { return char.toUpperCase(); });
                }
            },
            { data: 'group_name', name: 'group_name',render: function(data, type, row) {
                return data.charAt(0).toUpperCase() + data.slice(1);
            }},
            { data: 'type_name', name: 'type_name',render: function(data, type, row) {
                return data.charAt(0).toUpperCase() + data.slice(1);
            }},
            { data: 'unit_name', name: 'unit_name',render: function(data, type, row) {
                return data.charAt(0).toUpperCase() + data.slice(1);
            }},
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "200px"
            },
            {
                targets: 7,
                width: "250px"
            }
        ]
    });

    viewservices.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    viewservices.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    viewservices.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Services Data

    // Update Services Status
    $(document).on('click', '.services_status', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};
        $.ajax({
            url: '/services/service-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
            var status = xhr.status;
                if(status == 200)
                {
                    $('#view-services').DataTable().ajax.reload();
                }
            },
            error: function(xhr, status, error) {
                console.log(error);
            }
        });
    });
    // Update Services Status

    //Update Services Modal
    $(document).on('click', '.edit-services', function() {
        var ServiceId = $(this).data('services-id');
        var url = '/services/updateservices/' + ServiceId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                $('#ajax-loader').hide();
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.edt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('.s-id').val(response.id);
                $('.u_service').val(response.name);
                $('.u_s_icd').val(response.icd);
                var $selectedOption = $('.u_s_unit option[value="' + response.unit_id + '"]');
                $selectedOption.prependTo('.u_s_unit');
                $('.u_s_unit').val(response.unit_id);
                $('.u_s_group').html("<option selected value='"+response.group_id+"'>" + response.group_name + "</option>");

                if(response.charge == 1)
                {
                    $('.u_s_charge').html("<option selected value='1'>Yes</option>");
                    $('.u_s_charge').append('<option value="0">no</option>');
                }
                else {
                    $('.u_s_charge').html("<option selected value='0'>No</option>");
                    $('.u_s_charge').append('<option value="1">Yes</option>');
                }
                
                $.ajax({
                    url: 'services/getservicegroup',
                    type: 'GET',
                    data: {
                        serviceGroupId: response.group_id,
                    },
                    success: function(resp) {
                        $.each(resp, function(key, value) {
                            $('.u_s_group').append('<option value="' + value.id + '">' + value.name + '</option>');
                        });
                    },
                    error: function(xhr, status, error) {
                        console.log(error);
                    }
                });

                $('#edit-services').modal('show');

            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Services Modal

    //Update Services
    $('#u_services').on('submit', function (event) {
        event.preventDefault();
        var formData = $(this).serializeArray();
        var sgId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 's-id') {
                sgId = formData[i].value;
                break;
            }
        }
        var url = 'services/update-services/' + sgId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-services').modal('hide');
                            $('#view-services').DataTable().ajax.reload(); // Refresh DataTable
                            $('#u_services')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Services

//Services Setup
});
//Services Setup

// Key Performance Indicator
$(document).ready(function() {
    //Add KPI Group
    $('#add_kpigroup').submit(function(e) {
        e.preventDefault(); // Prevent the form from submitting normally
        var data = $(this).serializeArray();
        var resp = true;
        $(data).each(function(i, field){
            if ((field.value == '') || (field.value == null))
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                resp = false;
            }
        });

        if(resp != false)
        {
            $.ajax({
                url: "/kpi/addkpigroup",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {

                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-kpigroup').modal('hide');
                                $('#view-kpigroup').DataTable().ajax.reload();
                                $('#add_kpigroup')[0].reset();
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_kpigroup')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add KPI Group

    // View KPI Group Data
    var viewkpiMode =  $('#view-kpigroup').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/kpi/kpigroup',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            {
                "data": 'name',
                "render": function(data, type, row) {
                    return data.replace(/\b\w/g, function(char) { return char.toUpperCase(); });
                }
            },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "200px"
            },
            {
                targets: 4,
                width: "250px"
            }
        ]
    });

    viewkpiMode.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    viewkpiMode.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    viewkpiMode.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View KPI Group Data

    // Update KPI Group Status
    $(document).on('click', '.kpigroup_status', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/kpi/kg-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
            var status = xhr.status;
                if(status == 200)
                {
                    $('#view-kpigroup').DataTable().ajax.reload();
                }
                },
                error: function(xhr, status, error) {
                    console.log(error);
            }
        });

    });
    // Update KPI Group Status

    //Update KPI Group Modal
    $(document).on('click', '.edit-kpigroup', function() {
        var KPIGroupId = $(this).data('kpigroup-id');
        var url = '/kpi/updatekpigroup/' + KPIGroupId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                $('#ajax-loader').hide();
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.edt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('.kg-id').val(response.id);
                $('.u_kg').val(response.name);
                $('#edit-kpigroup').modal('show');

            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update KPI Group Modal

    //Update KPI Group
    $('#u_kpigroup').on('submit', function (event) {
        event.preventDefault();
        var formData = $(this).serializeArray();
        var kgId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'kg-id') {
                kgId = formData[i].value;
                break;
            }
        }
        var url = 'kpi/update-kpigroup/' + kgId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-kpigroup').modal('hide');
                            $('#view-kpigroup').DataTable().ajax.reload();
                            $('#u_kpigroup')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update KPI Group


    //Add KPI Dimension
    $('#add_kpidimension').submit(function(e) {
        e.preventDefault(); // Prevent the form from submitting normally
        var data = $(this).serializeArray();
        var resp = true;
        $(data).each(function(i, field){
            if ((field.value == '') || (field.value == null))
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                resp = false;
            }
        });

        if(resp != false)
        {
            $.ajax({
                url: "/kpi/addkpidimension",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {

                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-kpidimension').modal('hide');
                                $('#view-kpidimension').DataTable().ajax.reload();
                                $('#add_kpidimension')[0].reset();
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_kpidimension')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add KPI Dimension

    // View KPI Dimension Data
    var viewkpiMode =  $('#view-kpidimension').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/kpi/kpidimension',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            {
                "data": 'name',
                "render": function(data, type, row) {
                    return data.replace(/\b\w/g, function(char) { return char.toUpperCase(); });
                }
            },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "200px"
            },
            {
                targets: 4,
                width: "250px"
            }
        ]
    });

    viewkpiMode.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    viewkpiMode.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    viewkpiMode.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View KPI Dimension Data

    // Update KPI Dimension Status
    $(document).on('click', '.kpidimension_status', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/kpi/kd-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
            var status = xhr.status;
                if(status == 200)
                {
                    $('#view-kpidimension').DataTable().ajax.reload();
                }
                },
                error: function(xhr, status, error) {
                    console.log(error);
            }
        });

    });
    // Update KPI Dimension Status

    //Update KPI Dimension Modal
    $(document).on('click', '.edit-kpidimension', function() {
        var KPIDimensionId = $(this).data('kpidimension-id');
        var url = '/kpi/updatekpidimension/' + KPIDimensionId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                $('#ajax-loader').hide();
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.edt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('.kd-id').val(response.id);
                $('.u_kd').val(response.name);
                $('#edit-kpidimension').modal('show');

            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update KPI Dimension Modal

    //Update KPI Dimension
    $('#u_kpidimension').on('submit', function (event) {
        event.preventDefault();
        var formData = $(this).serializeArray();
        var kdId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'kd-id') {
                kdId = formData[i].value;
                break;
            }
        }
        var url = 'kpi/update-kpidimension/' + kdId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-kpidimension').modal('hide');
                            $('#view-kpidimension').DataTable().ajax.reload();
                            $('#u_kpidimension')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update KPI Dimension

    //Add KPI Type
    $('#add_kpitype').submit(function(e) {
        e.preventDefault(); // Prevent the form from submitting normally
        var data = $(this).serializeArray();
        var KTGroup = $('#kt_group').val();
        var KTDimesnion = $('#kt_dimension').val();
        data.push({ name: 'kt_group', value: KTGroup });
        data.push({ name: 'kt_dimension', value: KTDimesnion });
        var resp = true;
        $(data).each(function(i, field){
            if (field.value == '' || field.value == null)
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                resp = false;
            }
        });

        if(resp != false)
        {
            $.ajax({
                url: "/kpi/addkpitype",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {

                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-kpitype').modal('hide');
                                $('#view-kpitype').DataTable().ajax.reload();
                                $('#add_kpitype').find('select').each(function() {
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('#add_kpitype')[0].reset();
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_kpitype').find('select').val($('#add_kpitype').find('select option:first').val()).trigger('change');
                                $('#add_kpitype')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add KPI Type

    // View KPI Type Data
    var viewkpiMode =  $('#view-kpitype').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/kpi/kpitype',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            {
                "data": 'name',
                "render": function(data, type, row) {
                    return data.replace(/\b\w/g, function(char) { return char.toUpperCase(); });
                }
            },
            { data: 'group_name', name: 'group_name',render: function(data, type, row) {
                return data.charAt(0).toUpperCase() + data.slice(1);
            }},
            { data: 'dimension_name', name: 'dimension_name',render: function(data, type, row) {
                return data.charAt(0).toUpperCase() + data.slice(1);
            }},
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "200px"
            },
            {
                targets: 6,
                width: "250px"
            }
        ]
    });

    viewkpiMode.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    viewkpiMode.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    viewkpiMode.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View KPI Type Data

    // Update KPI Type Status
    $(document).on('click', '.kpitype_status', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/kpi/kt-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
            var status = xhr.status;
                if(status == 200)
                {
                    $('#view-kpitype').DataTable().ajax.reload();
                }
                },
                error: function(xhr, status, error) {
                    console.log(error);
            }
        });

    });
    // Update KPI Type Status

    //Update KPI Types Modal
    $(document).on('click', '.edit-kpitype', function() {
        var KPITypeId = $(this).data('kpitype-id');
        var url = '/kpi/updatekpitype/' + KPITypeId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                $('#ajax-loader').hide();
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.edt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('.kt-id').val(response.id);
                $('.u_kt').val(response.name);
                $('.u_kt_group').html("<option selected value='"+response.group_id+"'>" + response.group + "</option>");
                $('.u_kt_dimension').html("<option selected value='"+response.dimension_id+"'>" + response.dimension + "</option>");

                $.ajax({
                    url: 'kpi/getkpigroup',
                    type: 'GET',
                    data: {
                        groupId: response.group_id,
                        group: response.group,
                    },
                    beforeSend: function() {
                        $('.u_kt_group').append('<option>Loading...</option>');
                    },
                    success: function(resp) {
                        $.each(resp, function(key, value) {
                            $('.u_kt_group').find('option:contains("Loading...")').remove();
                            $('.u_kt_group').append('<option value="' + value.id + '">' + value.name + '</option>');
                        });
                    },
                    error: function(xhr, status, error) {
                        console.log(error);
                    }
                });

                $.ajax({
                    url: 'kpi/getkpidimension',
                    type: 'GET',
                    data: {
                        dimensionId: response.dimension_id,
                        dimension: response.dimension,
                    },
                    beforeSend: function() {
                        $('.u_kt_dimension').append('<option>Loading...</option>');
                    },
                    success: function(resp) {
                        $.each(resp, function(key, value) {
                            $('.u_kt_dimension').find('option:contains("Loading...")').remove();
                            $('.u_kt_dimension').append('<option value="' + value.id + '">' + value.name + '</option>');
                        });
                    },
                    error: function(xhr, status, error) {
                        console.log(error);
                    }
                });
                $('#edit-kpitype').modal('show');

            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update KPI Types Modal

    //Update KPI Types
    $('#u_kpitype').on('submit', function (event) {
        event.preventDefault();
        var formData = $(this).serializeArray();
        var ktId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'kt-id') {
                ktId = formData[i].value;
                break;
            }
        }

        var url = 'kpi/update-kpitype/' + ktId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-kpitype').modal('hide');
                            $('#view-kpitype').DataTable().ajax.reload();
                            $('#u_kpitype')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update KPI Types

    //Add KPI
    $('#add_kpi').submit(function(e) {
        e.preventDefault(); // Prevent the form from submitting normally
        var data = $(this).serializeArray();
        var KPIType = $('#kpi_type').val();
        data.push({ name: 'kpi_type', value: KPIType });
        var resp = true;
        $(data).each(function(i, field){
            if (field.value == '' || field.value == null)
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                resp = false;
            }
        });

        if(resp != false)
        {
            $.ajax({
                url: "/kpi/addkpi",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {

                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-kpi').modal('hide');
                                $('#view-kpi').DataTable().ajax.reload();
                                $('#add_kpi').find('select').val($('#add_kpi').find('select option:first').val()).trigger('change');
                                $('#add_kpi')[0].reset();
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_kpi').find('select').val($('#add_kpi').find('select option:first').val()).trigger('change');
                                $('#add_kpi')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add KPI

    // View KPI Data
    var viewkpi =  $('#view-kpi').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/kpi/kpi',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            {
                "data": 'name',
                "render": function(data, type, row) {
                    return data.replace(/\b\w/g, function(char) { return char.toUpperCase(); });
                }
            },
            { data: 'type_name', name: 'type_name',render: function(data, type, row) {
                return data.charAt(0).toUpperCase() + data.slice(1);
            }},
            { data: 'group_name', name: 'group_name',render: function(data, type, row) {
                return data.charAt(0).toUpperCase() + data.slice(1);
            }},
            { data: 'dimension_name', name: 'dimension_name',render: function(data, type, row) {
                return data.charAt(0).toUpperCase() + data.slice(1);
            }},
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],

        columnDefs: [
            {
                targets: 1,
                width: "150px"
            },
            {
                targets: 7,
                width: "250px"
            }
        ]
    });

    viewkpi.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    viewkpi.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    viewkpi.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View KPI Data

    // Update KPI Status
    $(document).on('click', '.kpi_status', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/kpi/kpi-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
            var status = xhr.status;
                if(status == 200)
                {
                    $('#view-kpi').DataTable().ajax.reload();
                }
                },
                error: function(xhr, status, error) {
                    console.log(error);
            }
        });

    });
    // Update KPI Status

    //Update KPI Modal
    $(document).on('click', '.edit-kpi', function() {
        var KPITypeId = $(this).data('kpi-id');
        var url = '/kpi/updatekpi/' + KPITypeId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                $('#ajax-loader').hide();
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.edt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('.kpi-id').val(response.id);
                $('.u_kpi').val(response.name);
                $('.u_kpi_type').html("<option selected value='"+response.type_id+"'>" + response.type_name + "</option>");

                $.ajax({
                    url: 'kpi/getkpitype',
                    type: 'GET',
                    data: {
                        typeId: response.type_id,
                    },
                    beforeSend: function() {
                        $('.u_kpi_type').append('<option>Loading...</option>');
                    },
                    success: function(resp) {
                        $.each(resp, function(key, value) {
                            $('.u_kpi_type').find('option:contains("Loading...")').remove();
                            $('.u_kpi_type').append('<option value="' + value.id + '">' + value.name + '</option>');
                        });
                    },
                    error: function(xhr, status, error) {
                        console.log(error);
                    }
                });


                $('#edit-kpi').modal('show');

            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update KPI Modal

    //Update KPI
    $('#u_kpi').on('submit', function (event) {
        event.preventDefault();
        var formData = $(this).serializeArray();
        var kpiId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'kpi-id') {
                kpiId = formData[i].value;
                break;
            }
        }

        var url = 'kpi/update-kpi/' + kpiId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-kpi').modal('hide');
                            $('#view-kpi').DataTable().ajax.reload();
                            $('#u_kpi')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
                else if (fieldName == 'info')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#u_kpi').find('select').val($('#u_kpi').find('select option:first').val()).trigger('change');
                            $('#u_kpi')[0].reset();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update KPI
});
// Key Performance Indicator

// SiteSetup
$(document).ready(function() {
    //Add Site
    $('#add_site').submit(function(e) {
        e.preventDefault();
        var formData = new FormData($('#add_site')[0]);
        var provinceValue = $('#province_name').val();
        var divisionValue = $('#division_name').val();
        var districtValue = $('#district_name').val();
        formData.append('site_province', provinceValue);
        formData.append('site_division', divisionValue);
        formData.append('site_district', districtValue);
        var resp = true;
        formData.forEach(function(value, key) {
            var fieldName = key;
            var fieldValue = value;
            if ((fieldValue == '' || fieldValue == null || fieldValue === 'undefined') && (fieldName != 'site_gps') && (fieldName != 'old_siteCode'))
            {
                var FieldName = fieldName;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })

                $( 'textarea[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('textarea[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $( 'textarea[name= "' +FieldName +'"' ).addClass('requirefield');

                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                resp = false;

            }

        });
        if(resp != false)
        {
            $.ajax({
                url: "/site/addsite",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: formData,
                processData: false,
                contentType: false,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {
                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-site').modal('hide');
                                $('#view-site').DataTable().ajax.reload();
                                $('#add_site').find('select').val($('#add_site').find('select option:first').val()).trigger('change');
                                $('#add_site')[0].reset();
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_site').find('select').val($('#add_site').find('select option:first').val()).trigger('change');
                                $('#add_site')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                       Swal.close();
                    }
                }
            });
        }
    });
    //Add Site

    // View Site
    var viewSite =  $('#view-site').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/site/sitedata',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'code', name: 'code' },
            { data: 'name', name: 'name' ,render: function(data, type, row) {
                return data.charAt(0).toUpperCase() + data.slice(1);
            }},
            { data: 'address', name: 'address'},
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "200px"
            },
            {
                targets: 5,
                width: "250px"
            }
        ]
    });

    viewSite.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    viewSite.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    viewSite.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Site

    //Site Detail Modal
    $(document).on('click', '.site-detail', function() {
        var siteId = $(this).data('site-id');
        var url = '/site/detail/' + siteId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                $('#ajax-loader').hide();
                var contact = response.cell_no + '/' + response.landline_no;
                var logoPath = response.logo;

                $('#sitelogo').attr('src', logoPath);
                $('#sitename').text(response.name);
                $('#siteorg').text(response.orgName);
                $('#oldSiteCode').text(response.oldCode);
                $('#siteemail').text(response.email);
                $('#sitecontact').html(contact);
                $('#siteprovince').text(response.province_name);
                $('#sitedivision').text(response.division_name);
                $('#sitedistrict').text(response.district_name);
                $('#sitepersonname').text(response.person_name);
                $('#sitewebsite a').attr('href', response.website).attr('target', '_blank');
                $('#sitewebsite a').text(response.website);
                $('#siteaddress').text(response.address);
                $('#siteremarks').text(response.remarks);
                $('#site-detail').modal('show');
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Site Detail Modal

    // Update Site Status
    $(document).on('click', '.site_status', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/site/site-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
            var status = xhr.status;
                if(status == 200)
                {
                    $('#view-site').DataTable().ajax.reload();
                }
                },
                error: function(xhr, status, error) {
                    console.log(error);
            }
        });

    });
    // Update Site Status

    // Update Site Modal
    $(document).on('click', '.edit-site', function() {
        var siteId = $(this).data('site-id');
        $('#edit_site')[0].reset();
        $('#ajax-loader').show();
        var url = '/site/updatesite/' + siteId;
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                $('#ajax-loader').hide();
                var province_name = response.province_name;
                var provinceId = response.province_id;
                var divisionName = response.division_name;
                var divisionId = response.division_id;
                var districtName = response.district_name;
                var districtId = response.district_id;
                var orgID = response.orgID;
                var orgName = response.orgName;

                $('#u_site_org').html("<option selected value='"+orgID+"'>" + orgName + "</option>");
                $('#u_site_province').html("<option selected value='"+provinceId+"'>" + province_name + "</option>");
                $('#u_site_division').html("<option selected value='"+divisionId+"'>" + divisionName + "</option>");
                $('#u_site_district').html("<option selected value='"+districtId+"'>" + districtName + "</option>");
                $('.u_site_name').val(response.siteName);
                $('.u_site_org').val(response.org_name);
                $('.u-site-id').val(response.id);


                $('.u_site_remarks').val(response.remarks);
                $('.u_site_address').val(response.address);
                $('.u_site_person_name').val(response.person_name);
                $('.u_site_person_email').val(response.email);
                $('.u_site_website').val(response.website);
                $('.u_site_gps').val(response.gps);
                $('.u_site_cell').val(response.cell_no);
                $('.u_site_landline').val(response.landline_no);

                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.u_site_edt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });

                fetchOrganizations(orgID,orgName,'#u_site_org', function(data) {
                    $('#u_site_org').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        $('#u_site_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                    });
                });

                if (provinceId) {
                    $.ajax({
                        url: 'territory/updateprovince',
                        type: 'GET',
                        data: {
                            provinceId: provinceId,
                        },
                        beforeSend: function() {
                            $('#u_site_province').append('<option>Loading...</option>');
                        },
                        success: function(resp) {
                            $('#u_site_province').find('option:contains("Loading...")').remove(); // Remove the loading option
                            $.each(resp, function(key, value) {
                                $('#u_site_province').append('<option value="' + value.id + '">' + value.name + '</option>');
                            });


                        },
                        error: function(xhr, status, error) {
                            console.log(error);
                        }
                    });

                    $.ajax({
                        url: 'territory/updatedivision',
                        type: 'GET',
                        data: {
                            provinceId: provinceId,
                            divisionId: divisionId,
                        },
                        beforeSend: function() {
                            $('#u_site_division').append('<option>Loading...</option>');
                        },
                        success: function(resp) {
                            $('#u_site_division').find('option:contains("Loading...")').remove(); // Remove the loading option
                            $.each(resp, function(key, value) {
                                $('#u_site_division').append('<option value="' + value.id + '">' + value.name + '</option>');
                            });
                        },
                        error: function(xhr, status, error) {
                            console.log(error);
                        }
                    });

                    $('#u_site_province').change(function() {
                        var province_id = $(this).val();
                        $.ajax({
                            url: 'territory/updatedivision',
                            type: 'GET',
                            data: {
                                provinceId: province_id,
                                divisionId: divisionId,
                            },
                            beforeSend: function() {
                                $('#u_site_division').append('<option>Loading...</option>');
                            },
                            success: function(resp) {
                                    $('#u_site_division').html("<option selected disabled value=''>Select Division</option>");
                                $.each(resp, function(key, value) {
                                    $('#u_site_division').append('<option value="' + value.id + '">' + value.name + '</option>');
                                });
                            },
                            error: function(xhr, status, error) {
                                console.log(error);
                            }
                        });
                    });

                    $('#u_site_division').change(function() {
                        var divisionId = $(this).val();
                        $.ajax({
                            url: 'territory/updatedistrict',
                            type: 'GET',
                            data: {
                                divisionId: divisionId,
                            },
                            beforeSend: function() {
                                $('#u_site_district').append('<option>Loading...</option>');
                            },
                            success: function(resp) {
                                    $('#u_site_district').html("<option selected disabled value=''>Select District</option>");
                                $.each(resp, function(key, value) {
                                    $('#u_site_district').append('<option value="' + value.id + '">' + value.name + '</option>');
                                });
                            },
                            error: function(xhr, status, error) {
                                console.log(error);
                            }
                        });
                    });
                }//

                $('#edit-site').modal('show');
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    // Update Site Modal


    //Update Site
    $('#edit_site').on('submit', function (event) {
        event.preventDefault();
        var formData = new FormData($('#edit_site')[0]);
        var provinceValue = $('#u_site_province').val();
        var divisionValue = $('#u_site_division').val();
        var districtValue = $('#u_site_district').val();
        var orgId = $('.u-site-id').val();

        formData.append('u_site_province', provinceValue);
        formData.append('u_site_division', divisionValue);
        formData.append('u_site_district', districtValue);

        var url = '/site/update-site/' + orgId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            processData: false,
            contentType: false,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-site').modal('hide');
                            $('#view-site').DataTable().ajax.reload(); // Refresh DataTable
                            $('#edit_site')[0].reset();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Site
});
// SiteSetup


// Activations
$(document).ready(function() {
    
    $('#ss_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', true);
    $('#emp_site').html("<option selected disabled value=''>Select Head Count Site</option>").prop('disabled', true);
    $('#act_s_cc').html("<option selected disabled value=''>Select Cost Center</option>").prop('disabled', true);
    $('#act_kpi_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', true);
    $('#act_kpi_cc').html("<option selected disabled value=''>Select Cost Center</option>").prop('disabled', true);
    $('#emp_cc').html("<option selected disabled value=''>Select Head Count Cost Center</option>").prop('disabled', true);

    //Show Sites
    OrgChangeSites('#ss_org', '#ss_site', '#add_servicelocationscheduling');

    $(document).on('change', '#empcc_org', function() {
        var orgId = $(this).val();
        var currentRowSiteSelect = $(this).closest('.duplicate').find('#empcc_site');
        if (orgId) {
            fetchOrganizationSites(orgId,'#empcc_site', function(data) {
                if (data.length > 0) {

                    currentRowSiteSelect.empty();
                    currentRowSiteSelect.append('<option selected disabled value="">Select Site</option>');
                    $.each(data, function(key, value) {
                        currentRowSiteSelect.append('<option value="' + value.id + '">' + value.name + '</option>');
                    });
                    currentRowSiteSelect.find('option:contains("Loading...")').remove();
                    currentRowSiteSelect.prop('disabled', false);
                }
                else {
                    Swal.fire({
                        text: 'Sites are not available for selected Organization',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#add_empCC')[0].reset();
                        }
                    });
                }
            });
        }
    });

    OrgChangeSites('#act_kpi_org', '#act_kpi_site', '#activate_kpi');
    OrgChangeSites('#emp_org', '#emp_site', '#add_employee');
    //Show Sites

 

    //Show Activated CostCenter
    SiteChangeCostCenter('#act_kpi_site', '#act_kpi_cc', '#activate_kpi');
    SiteChangeCostCenter('#emp_site', '#emp_cc', '#add_employee');


    // $(document).on('change', '#empcc_site', function() {
    //     var siteId = $(this).val();
    //     // var currentRowCCSelect = $(this).closest('.duplicate').find('.emp_costcenter');
    //     // var currentRowSiteSelect = $(this).closest('.duplicate').find('#empcc_site');
    //     var ccSelect = $('.emp_costcenter');
    //     if (siteId) {
    //         fetchActivatedCostCenters(siteId, '.emp_costcenter', function(data) {
    //                 if (data.length > 0) {
    //                     // currentRowCCSelect.empty();
    //                     // currentRowCCSelect.append('<option selected disabled value="">Select Cost Center</option>');
    //                     // $.each(data, function(key, value) {
    //                     //     currentRowCCSelect.append('<option value="' + value.id + '">' + value.name + '</option>');
    //                     // });
    //                     // currentRowCCSelect.find('option:contains("Loading...")').remove();
    //                     // currentRowCCSelect.prop('disabled', false);
    //                     ccSelect.empty();
    //                     ccSelect.append('<option selected disabled value="">Select Cost Center</option>');
    //                     $.each(data, function(key, value) {
    //                         ccSelect.append('<option value="' + value.id + '">' + value.name + '</option>');
    //                     });
    //                     ccSelect.find('option:contains("Loading...")').remove();
    //                     ccSelect.prop('disabled', false);
    //                     }
    //                 else {
    //                     Swal.fire({
    //                         text: 'Cost Centers are not Activated for selected Site',
    //                         icon: 'error',
    //                         confirmButtonText: 'OK',
    //                         allowOutsideClick: false
    //                     }).then((result) => {
    //                         if (result.isConfirmed) {
    //                             ccSelect.empty();
    //                             ccSelect.html("<option selected disabled value=''>Select Cost Center</option>").prop('disabled', true);
    //                         }
    //                     });
    //                 }

    //         }, function(error) {
    //             console.log(error);
    //         });
    //     }
    // });

    
    // $(document).on('change', '.u_empcc_site', function() {
    //     var siteId = $(this).val();
    //     var currentRowCCSelect = $(this).closest('.loadempcc').find('.u_empcc');
    //     if (siteId) {
    //         fetchActivatedCostCenters(siteId, '.u_empcc', function(data) {
    //                 if (data.length > 0) {
    //                     currentRowCCSelect.empty();
    //                     currentRowCCSelect.append('<option selected disabled value="">Select Cost Center</option>');
    //                     $.each(data, function(key, value) {
    //                         currentRowCCSelect.append('<option value="' + value.id + '">' + value.name + '</option>');
    //                     });
    //                     currentRowCCSelect.find('option:contains("Loading...")').remove();
    //                     currentRowCCSelect.prop('disabled', false);
    //                 }
    //                 else {
    //                     Swal.fire({
    //                         text: 'Cost Centers are not Activated for selected Head Count Site',
    //                         icon: 'error',
    //                         confirmButtonText: 'OK',
    //                         allowOutsideClick: false
    //                     }).then((result) => {
    //                         if (result.isConfirmed) {
    //                             currentRowCCSelect.empty();
    //                             currentRowSiteSelect.val($('.u_empcc_site').find('option:first').val()).trigger('change');
    //                             currentRowCCSelect.html("<option selected disabled value=''>Select Cost Center</option>").prop('disabled', true);

    //                         }
    //                     });
    //                 }

    //         }, function(error) {
    //             console.log(error);
    //         });
    //     }
    // });

    
    $(document).on('change', '.u_empcc_site', function() {
        var siteId = $(this).val();
        var currentRow = $(this).closest('.loadempcc'); // Find the current row
        var currentRowCCSelect = currentRow.find('.u_empcc'); // Find the cost center dropdown in the current row
    
        if (siteId) {
            fetchActivatedCostCenters(siteId, currentRowCCSelect, function(data) {
                if (data.length > 0) {
                    currentRowCCSelect.empty();
                    currentRowCCSelect.append('<option selected disabled value="">Select Cost Center</option>');
                    $.each(data, function(key, value) {
                        currentRowCCSelect.append('<option value="' + value.id + '">' + value.name + '</option>');
                    });
                    currentRowCCSelect.find('option:contains("Loading...")').remove();
                    currentRowCCSelect.prop('disabled', false);
                } else {
                    Swal.fire({
                        text: 'Cost Centers are not activated for the selected Head Count Site',
                        icon: 'error',
                        confirmButtonText: 'OK',
                        allowOutsideClick: false
                    }).then((result) => {
                        if (result.isConfirmed) {
                            currentRowCCSelect.empty();
                            currentRowCCSelect.html("<option selected disabled value=''>Select Cost Center</option>").prop('disabled', true);
                        }
                    });
                }
            }, function(error) {
                console.log(error);
            });
        } else {
            currentRowCCSelect.empty();
            currentRowCCSelect.html("<option selected disabled value=''>Select Cost Center</option>").prop('disabled', true);
        }
    });

    $(document).on('change', '.empcc_site', function() {
        var siteId = $(this).val();
        var currentRow = $(this).closest('.duplicate'); // Find the current row
        var currentRowCCSelect = currentRow.find('.emp_costcenter'); // Find the cost center dropdown in the current row
    
        if (siteId) {
            fetchActivatedCostCenters(siteId, currentRowCCSelect, function(data) {
                if (data.length > 0) {
                    currentRowCCSelect.empty();
                    currentRowCCSelect.append('<option selected disabled value="">Select Cost Center</option>');
                    $.each(data, function(key, value) {
                        currentRowCCSelect.append('<option value="' + value.id + '">' + value.name + '</option>');
                    });
                    currentRowCCSelect.find('option:contains("Loading...")').remove();
                    currentRowCCSelect.prop('disabled', false);
                } else {
                    Swal.fire({
                        text: 'Cost Centers are not activated for the selected Head Count Site',
                        icon: 'error',
                        confirmButtonText: 'OK',
                        allowOutsideClick: false
                    }).then((result) => {
                        if (result.isConfirmed) {
                            currentRowCCSelect.empty();
                            currentRowCCSelect.html("<option selected disabled value=''>Select Cost Center</option>").prop('disabled', true);
                        }
                    });
                }
            }, function(error) {
                console.log(error);
            });
        } else {
            currentRowCCSelect.empty();
            currentRowCCSelect.html("<option selected disabled value=''>Select Cost Center</option>").prop('disabled', true);
        }
    });
    
    //Show Activated CostCenter

    //Open Activate CC Setup
    $('#cc_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', true);
    OrgChangeSites('#cc_org', '#cc_site', '#activate_cc');

    $(document).on('click', '.cc_activation', function() {
        $('#cc_value').prop('disabled', true);  
        $('#cc_value').val('');  
        $('#siteselect').show(); 
        var orgId = $('#cc_org').val();
        if(orgId)
            {
                fetchOrganizationSites(orgId, '#cc_site', function(data) {
                    $('#cc_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', false);
                    $.each(data, function(key, value) {
                        $('#cc_site').append('<option value="' + value.id + '">' + value.name + '</option>');
                    });
                });
            }
        $('#cc_activation').modal('show');
    });

    FetchNotActivatedCC('#cc_site', '#cc_value', '#activate_cc');
    //Open Activate CC Setup

    //Activate Cost Center
    $(document).on('change', 'input[name="selectedCC[]"]', function() {
        updateHiddenCostCenter();
    });

    $('#activate_cc').submit(function(e) {
        e.preventDefault(); 
        updateHiddenCostCenter();
        var data = SerializeForm(this);

        var resp = true;
        $(data).each(function(i, field){
            if ((field.value == '' || field.value == null) && field.name != 'cc_name[]') {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                resp = false;
            }

        });
        if(resp != false)
        {
            $.ajax({
                url: "/costcenter/activatecc",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {
                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                        var fieldName = fieldName;
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#cc_activation').modal('hide');
                                window.location.reload();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#activate_cc').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('#activate_cc')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Activate Cost Center

    // View ActivatedCCData
    var ActivatedCCData =  $('#view-ccactivation').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/costcenter/getactivateccdata',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            { data: 'siteName', name: 'siteName' ,render: function(data, type, row) {
                return data.charAt(0).toUpperCase() + data.slice(1);
            }},
            { data: 'ccName', name: 'ccName' ,render: function(data, type, row) {
                return data.charAt(0).toUpperCase() + data.slice(1);
            }},
            { data: 'cctypeName', name: 'cctypeName' ,render: function(data, type, row) {
                return data.charAt(0).toUpperCase() + data.slice(1);
            }},
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "200px"
            },
            {
                targets: 6,
                width: "250px"
            }
        ]
    });

    ActivatedCCData.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    ActivatedCCData.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    ActivatedCCData.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View ActivatedCCData

    // Update ActivateCC Status
    $(document).on('click', '.activatecc', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/costcenter/update-activatecc',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
            var status = xhr.status;
                if(status == 200)
                {
                    $('#view-ccactivation').DataTable().ajax.reload();
                }
                },
                error: function(xhr, status, error) {
                    console.log(error);
            }
        });

    });
    // Update ActivateCC Status

    // Update ActivatedCC Modal
    $(document).on('click', '.edit-activatecc', function() {
        var activateccId = $(this).data('activatecc-id');
        $('#u_ccsite').empty();
        $('#u_costcenter').empty();
        $('#u_ccorg').empty();
        $('#update_ccactivation')[0].reset();
        $('#ajax-loader').show();
        var url = '/costcenter/updateactivatecc/' + activateccId;
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                $('#ajax-loader').hide();
                var orgName = response.orgName;
                var orgID = response.orgID;
                var siteName = response.siteName;
                var siteId = response.siteId;
                var ccName = response.ccName;
                var ccID = response.ccID;
                $('#u_ccorg').html("<option selected value='"+orgID+"'>" + orgName + "</option>");
                $('#u_ccsite').html("<option selected value='"+siteId+"'>" + siteName + "</option>");
                $('#u_costcenter').html("<option selected value='"+ccID+"'>" + ccName + "</option>");
                $('.u_acc_id').val(response.id);
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.uedt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });


                fetchOrganizations(orgID,orgName,'#u_ccorg', function(data) {
                    $('#u_ccorg').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        $('#u_ccorg').append('<option value="' + value.id + '">' + value.organization + '</option>');
                    });
                });

                if (orgID) {
                    $.ajax({
                        url: 'costcenter/getselectedcc',
                        type: 'GET',
                        data: {
                            ccID: ccID,
                            siteId: siteId,
                        },
                        beforeSend: function() {
                            $('#u_costcenter').append('<option>Loading...</option>');
                        },
                        success: function(resp) {
                            $('#u_costcenter').find('option:contains("Loading...")').remove(); // Remove the loading option
                            $.each(resp, function(key, value) {
                                $('#u_costcenter').append('<option value="' + value.id + '">' + value.name + '</option>');
                            });
                        },
                        error: function(xhr, status, error) {
                            console.log(error);
                        }
                    });


                    fetchSites(orgID, '#u_ccsite', function(data) {
                        if (data.length > 0) {
                            $.each(data, function(key, value) {
                                $('#u_ccsite').append('<option value="' + value.id + '">' + value.name + '</option>');
                            });
                        }
                        else {
                            Swal.fire({
                                text: 'Sites are not available for selected Organization',
                                icon: 'error',
                                confirmButtonText: 'OK'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    $('#edit-ccactivation').modal('hide');
                                }
                            });
                        }
                    }, function(error) {
                        console.log(error);
                    },siteId);


                    $('#u_ccorg').off('change').on('change', function() {
                        $('#u_ccsite').empty();
                        var organizationId = $(this).val();
                        fetchSites(organizationId, '#u_ccsite', function(data) {
                            if (data.length > 0) {
                                $.each(data, function(key, value) {
                                    $('#u_ccsite').append('<option value="' + value.id + '">' + value.name + '</option>');
                                });
                            }
                            else {
                                Swal.fire({
                                    text: 'Sites are not available for selected Organization',
                                    icon: 'error',
                                    confirmButtonText: 'OK'
                                }).then((result) => {
                                    if (result.isConfirmed) {
                                        $('#edit-ccactivation').modal('hide');
                                    }
                                });
                            }

                        }, function(error) {
                            console.log(error);
                        });


                    });
                }

                $('#edit-ccactivation').modal('show');
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    // Update ActivateCC Modal

    //Update ActivateCC
    $('#update_ccactivation').on('submit', function (event) {
        event.preventDefault();
        var formData = SerializeForm(this);
        var Id = $('.u_acc_id').val();
        var url = '/update-activatecc/' + Id;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-ccactivation').modal('hide');
                            $('#view-ccactivation').DataTable().ajax.reload(); // Refresh DataTable
                            $('#update_ccactivation')[0].reset();
                            $('.text-danger').hide();
                        }
                        $('.text-danger').hide();
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update ActivateCC


    //Open Activate Services Setup
    $('#act_s_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', true);
    OrgChangeSites('#act_s_org', '#act_s_site', '#activate_service');
    SiteChangeServiceActivation('#act_s_site', '#service_name', '#activate_service');
    // SiteChangeServiceCostCenter('#act_s_site', '#service_name', '#act_s_cc', '#activate_service');

    $('#allServices').on('change', 'input[name="activationServices[]"]', function() {
        updateHiddenServicesForActivation();
    });
      $('#selectAll').on('change', function() {
        $('input[name="activationServices[]"]').prop('checked', $(this).prop('checked')); // Check or uncheck all checkboxes
        updateHiddenServicesForActivation(); // Update hidden inputs with selected values
    });
    
    $('#allCostCenters').on('change', 'input[name="service_billingCC[]"], input[name="service_performingCC[]"],input[name="service_modes[]"]', function() {
        updateHiddenCCForServiceActivation();
    });
    // $(document).on('change', '.select-all-billing, .select-all-performing, .select-all-modes', function() {
    //     updateHiddenCCForServiceActivation();
    // });
    let checkboxStates = {}; 
    $(document).on('click', '.costcenterModal', function() {
        var serviceVal =$('#service_name').val();
        if (serviceVal !== '') {
            $('#act_s_cc').prop('disabled', false);
            $('.activationMsg,.s_modeMsg').hide();
            saveCheckboxStates();
            ActivateServiceCostCenter('#act_s_site', '#act_s_service', '#act_s_billingcc', '#act_s_performingcc');
            $('#costcenterModal').modal('show');
        }
        else{
            $('#act_s_cc').prop('disabled', true);
            $('.activationMsg').text('(Select a service to choose Cost Centers)').show();
        $   ('.s_modeMsg').text('(Select a service to choose Service Modes)').show();
        }
    });

    $(document).on('click', '.service_activation', function() {
        $('input[name="selectedSM[]"]').prop('checked', false);
        $('#siteservice').text('(Select a site to choose Services)').show();
        $('.s_modeMsg').text('(Select a service to choose Service Modes)').show();
        $('.activationMsg').text('(Select a service to choose Cost Centers)').show();
        $('#act_s_cc,#service_name,#servicemode_value').prop('disabled', true);
        $('#service_name,#act_s_service,#act_s_cc_name,#act_s_cc').val('');
        $('input[name="activationServices[]"]:checked, input[name="service_billingCC[]"]:checked, input[name="service_performingCC[]"]:checked,input[name="service_modes[]"]:checked').prop('checked', false);
        $('#allServices,#allCostCenters').empty();
        // $('input[name="activationServices[]"]:checked').prop('checked', false);

        var orgId = $('#act_s_org').val();
        if(orgId)
        {
            fetchOrganizationSites(orgId, '#act_s_site', function(data) {
                $('#act_s_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', false);
                $.each(data, function(key, value) {
                    $('#act_s_site').append('<option value="' + value.id + '">' + value.name + '</option>');
                });
            });
        }
        $('#service_activation').modal('show');
    });
    //Open Activate Services Setup

    //Activate Services
    $('input[name="selectedSM[]"]').change(function() {
        updateHiddenServiceModes();
    });

    $('#activate_service').submit(function(e) {
        e.preventDefault();
        updateHiddenServicesForActivation();
        updateHiddenCCForServiceActivation();
        // updateHiddenServiceModes();
        var data = SerializeForm(this);
        var resp = true;
        $(data).each(function(i, field){
            // if ((field.value == '') || (field.value == null)  && field.name != 'act_s_mode[]')
            if ((field.value == '') || (field.value == null))
            {
                var FieldName = field.name;
                var FieldName = field.name.replace('[]', '');
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This fielad is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })

                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                resp = false;
            }
        });
        if(resp != false)
        {
            $.ajax({
                url: "/services/activateservice",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {
                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                        var fieldName = fieldName;
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#service_activation').modal('hide');
                                $('#view-serviceactivation').DataTable().ajax.reload(); // Refresh DataTable
                                $('#activate_service').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('#act_s_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', true);
                                $('#act_s_cc').html("<option selected disabled value=''>Select Cost Center</option>").prop('disabled', true);

                                $('#activate_service')[0].reset();
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#act_s_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', true);
                                $('#activate_service').find('select').each(function() {
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('#activate_service')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Activate Services

    // View Activated ServicesData
    var ActivatedServiceData =  $('#view-serviceactivation').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/services/getactivateservicedata',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            { data: 'billingCC', name: 'billingCC' },
            { data: 'performingCC', name: 'performingCC' },
            { data: 'ServiceModes', name: 'ServiceModes' },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 6,
                width: "250px"
            }
        ]
    });

    ActivatedServiceData.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    ActivatedServiceData.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    ActivatedServiceData.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Activated ServicesData

    // Update Activated Services Status
    $(document).on('click', '.activateservice', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};
        $.ajax({
            url: '/services/update-activateservice',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
            var status = xhr.status;
                if(status == 200)
                {
                    $('#view-serviceactivation').DataTable().ajax.reload();
                }
                },
                error: function(xhr, status, error) {
                    console.log(error);
            }
        });

    });
    // Update Activated Services Status

    // Update Activated Services Modal
    $(document).on('click', '.edit-activateservice', function() {
        var activateserviceId = $(this).data('activateservice-id');
        $('input[name="uselectedSM[]"], input[name="uselectedbillingCC[]"], input[name="uselectedperformingCC[]"]').prop('checked', false);
        $('#u_sorg').empty();
        $('#u_ssite').empty();
        $('#u_service').empty();
        $('#u_scc').empty();
        $('#update_serviceactivation')[0].reset();
        $('#ajax-loader').show();
        var url = '/services/updateactivateservice/' + activateserviceId;
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                $('#ajax-loader').hide();
                var siteId = response.siteId;
                var ccName = response.ccName;
                var ccID = response.ccID;
                var serviceName = response.serviceName;
                var serviceID = response.serviceID;
                var serviceModeNames = response.serviceModeNames;
                $('input[name="uservicemode_value"]').val(serviceModeNames);
                var servicemodeIDs = response.servicemodeIDs;
                var servicemodeIDs = servicemodeIDs.split(',');
                for(var i = 0; i < servicemodeIDs.length; i++) {
                    $('#usm_' + servicemodeIDs[i]).prop('checked', true);
                }
                var orderingCCNames = response.orderingCCNames;
                $('input[name="ubillingcc_value"]').val(orderingCCNames);
                
                var performingCCNames = response.performingCCNames;
                $('input[name="uperformingcc_value"]').val(performingCCNames);

                $.ajax({
                    url: 'costcenter/getorderingcc',
                    type: 'GET',
                    data: { 
                        siteId: siteId      
                    },
                    success: function(resp) {
                        $('#userviceBillingccModal .modal-body .row').empty();
                        resp.forEach(function(item) {
                            let checkboxHtml = `
                                <div class="col-md-3">
                                    <div class="custom-control custom-checkbox mb-3">
                                        <input type="checkbox" name="uselectedbillingCC[]" data-id="${item.id}" data-name="${item.name}" class="custom-control-input" id="ubcc_${item.id}">
                                        <label class="custom-control-label" for="ubcc_${item.id}">${item.name}</label>
                                    </div>
                                </div>
                            `;
                            $('#userviceBillingccModal .modal-body .row').append(checkboxHtml);
                        });
                        var orderingCCIDs = response.orderingCCIDs;
                        if (orderingCCIDs) {
                            var orderingCCIDsArray = orderingCCIDs.split(',');
                            for(var i = 0; i < orderingCCIDsArray.length; i++) {
                                $('#ubcc_' + orderingCCIDsArray[i]).prop('checked', true);
                            }
                        }
                        
                    },
                    error: function(xhr, status, error) {
                        if (typeof errorCallback === "function") {
                            errorCallback(error);
                        }
                    }
                });

                $.ajax({
                    url: 'costcenter/getperformingcc',
                    type: 'GET',
                    data: { 
                        siteId: siteId      
                    },
                    success: function(resp) {
                        $('#uperformingPerformingccModal .modal-body .row').empty();
                        resp.forEach(function(item) {
                            let checkboxHtml = `
                                <div class="col-md-3">
                                    <div class="custom-control custom-checkbox mb-3">
                                        <input type="checkbox" name="uselectedperformingCC[]" data-id="${item.id}" data-name="${item.name}" class="custom-control-input" id="upcc_${item.id}">
                                        <label class="custom-control-label" for="upcc_${item.id}">${item.name}</label>
                                    </div>
                                </div>
                            `;
                            $('#uperformingPerformingccModal .modal-body .row').append(checkboxHtml);
                        });

                        var performingCCIDs = response.performingCCIDs;
                        if (performingCCIDs) {
                            var performingCCIDsArray = performingCCIDs.split(',');
                            for(var i = 0; i < performingCCIDsArray.length; i++) {
                                $('#upcc_' + performingCCIDsArray[i]).prop('checked', true);
                            }
                        }
                    },
                    error: function(xhr, status, error) {
                        if (typeof errorCallback === "function") {
                            errorCallback(error);
                        }
                    }
                });
                
                $('#u_scc').html("<option selected value='"+ccID+"'>" + ccName + "</option>");
                $('#u_service').html("<option selected value='"+serviceID+"'>" + serviceName + "</option>");
                $('.u_service_id').val(response.id);
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.edt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });

                $.ajax({
                    url: 'services/getselectedservices',
                    type: 'GET',
                    data: {
                        serviceID: serviceID,
                        site_id: siteId      
                    },
                    beforeSend: function() {
                        $('#u_service').append('<option>Loading...</option>');
                    },
                    success: function(resp) {
                        $('#u_service').find('option:contains("Loading...")').remove();
                        $.each(resp, function(key, value) {
                            $('#u_service').append('<option value="' + value.id + '">' + value.name + '</option>');
                        });
                    },
                    error: function(xhr, status, error) {
                        console.log(error);
                    }
                });

                $('#edit-serviceactivation').modal('show');
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });

    $('input[name="uselectedSM[]"]').change(function() {
        updateHiddenUpdatedServiceModes();
    });
    $(document).on('change', 'input[name="uselectedbillingCC[]"]', function() {
        updateHiddenUpdatedBillingCC();
    });
    $(document).on('change', 'input[name="uselectedperformingCC[]"]', function() {
        updateHiddenUpdatedPerformingCC();
    });
    // Update Activated Services Modal
   

    //Update Activated Service
    $('#update_serviceactivation').on('submit', function (event) {
        event.preventDefault();
        updateHiddenUpdatedServiceModes();
        updateHiddenUpdatedBillingCC();
        updateHiddenUpdatedPerformingCC();
        var data = SerializeForm(this);
        var Id = $('.u_service_id').val();
        var url = '/update-activateservice/' + Id;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: data,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-serviceactivation').modal('hide');
                            $('#view-serviceactivation').DataTable().ajax.reload(); 
                            $('#update_serviceactivation')[0].reset();
                            $('.text-danger').hide();
                        }
                        $('.text-danger').hide();
                    });
                }
            },
            error: function (xhr, status, error) {
                console.log(xhr.responseText);
            }
        });
    });
    //Update Activated Services


    //Activate KPI

    //Open Activate KPI Setup
    $(document).on('click', '.kpi_activation', function() {
        var orgId = $('#act_kpi_org').val();
        if(orgId)
        {
            fetchOrganizationSites(orgId, '#act_kpi_site', function(data) {
                $('#act_kpi_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', false);
                $.each(data, function(key, value) {
                    $('#act_kpi_site').append('<option value="' + value.id + '">' + value.name + '</option>');
                });
            });
        }
        $('#kpi_activation').modal('show');
    });
    //Open Activate KPI Setup
    $('#activate_kpi').submit(function(e) {
        e.preventDefault(); // Prevent the form from submitting normally
        var data = $(this).serializeArray();

        var kpiID = $('#act_kpi').val();
        var OrgId = $('#act_kpi_org').val();
        var SiteId = $('#act_kpi_site').val();
        var CCID = $('#act_kpi_cc').val();

        data.push({ name: 'act_kpi', value: kpiID });
        data.push({ name: 'act_kpi_org', value: OrgId });
        data.push({ name: 'act_kpi_site', value: SiteId });
        data.push({ name: 'act_kpi_cc', value: CCID });

        var resp = true;
        $(data).each(function(i, field){
            if ((field.value == '') || (field.value == null))
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });

                resp = false;
            }

        });
        if(resp != false)
        {
            $.ajax({
                url: "/kpi/activatekpi",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {
                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                        var fieldName = fieldName;
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#kpi_activation').modal('hide');
                                $('#view-kpiactivation').DataTable().ajax.reload(); // Refresh DataTable
                                $('#activate_kpi').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('#act_kpi_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', true);
                                $('#act_kpi_cc').html("<option selected disabled value=''>Select Cost Center</option>").prop('disabled', true);

                                $('#activate_kpi')[0].reset();
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#activate_kpi').find('select').each(function() {
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('#activate_kpi')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Activate KPI

    // View Activated KPIData
    var ActivatedKPIData =  $('#view-kpiactivation').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/kpi/getactivatekpidata',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            { data: 'kpiName', name: 'kpiName' ,render: function(data, type, row) {
                return data.charAt(0).toUpperCase() + data.slice(1);
            }},
            { data: 'siteName', name: 'siteName' ,render: function(data, type, row) {
                return data.charAt(0).toUpperCase() + data.slice(1);
            }},
            { data: 'ccName', name: 'ccName' ,render: function(data, type, row) {
                return data.charAt(0).toUpperCase() + data.slice(1);
            }},
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "200px"
            },
            {
                targets: 2,
                width: "150px"
            },
            {
                targets: 6,
                width: "250px"
            }
        ]
    });

    ActivatedKPIData.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    ActivatedKPIData.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    ActivatedKPIData.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Activated KPIData

    // Update Activated KPI Status
    $(document).on('click', '.activatekpi', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};
        $.ajax({
            url: '/kpi/update-activatekpi',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
            var status = xhr.status;
                if(status == 200)
                {
                    $('#view-kpiactivation').DataTable().ajax.reload();
                }
                },
                error: function(xhr, status, error) {
                    console.log(error);
            }
        });

    });
    // Update Activated KPI Status

    // Update Activated KPI Modal
    $(document).on('click', '.edit-activatekpi', function() {
        var activatekpiId = $(this).data('activatekpi-id');
        $('#u_kpi').empty();
        $('#u_korg').empty();
        $('#u_ksite').empty();
        $('#uk_edt').empty();

        $('#update_kpiactivation')[0].reset();
        $('#ajax-loader').show();
        var url = '/kpi/updateactivatekpi/' + activatekpiId;
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                $('#ajax-loader').hide();
                var kpiName = response.kpiName;
                var kpiID = response.kpiID;
                var orgName = response.orgName;
                var orgID = response.orgID;
                var siteName = response.siteName;
                var siteId = response.siteId;
                var ccName = response.ccName;
                var ccID = response.ccID;
                $('#u_kpi').html("<option selected value='"+kpiID+"'>" + kpiName + "</option>");
                $('#u_korg').html("<option selected value='"+orgID+"'>" + orgName + "</option>");
                $('#u_ksite').html("<option selected value='"+siteId+"'>" + siteName + "</option>");
                $('#u_kcc').html("<option selected value='"+ccID+"'>" + ccName + "</option>");
                $('.u_kpi_id').val(response.id);
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.edt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });

                $.ajax({
                    url: 'kpi/getselectedkpi',
                    type: 'GET',
                    data: {
                        kpiID: kpiID,
                    },
                    beforeSend: function() {
                        $('#u_kpi').append('<option>Loading...</option>');
                    },
                    success: function(resp) {
                        $('#u_kpi').find('option:contains("Loading...")').remove();
                        $.each(resp, function(key, value) {
                            $('#u_kpi').append('<option value="' + value.id + '">' + value.name + '</option>');
                        });
                    },
                    error: function(xhr, status, error) {
                        console.log(error);
                    }
                });

                fetchOrganizations(orgID,orgName,'#u_korg', function(data) {
                    $('#u_korg').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        $('#u_korg').append('<option value="' + value.id + '">' + value.organization + '</option>');
                    });
                });

                if (orgID) {
                    fetchSites(orgID, '#u_ksite', function(data) {
                        if (data.length > 0) {
                            $.each(data, function(key, value) {
                                if(value.id != siteId){
                                    $('#u_ksite').append('<option value="' + value.id + '">' + value.name + '</option>');
                                }
                            });
                        }
                        else {
                            Swal.fire({
                                text: 'Sites are not available for selected Organization',
                                icon: 'error',
                                confirmButtonText: 'OK'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    $('#edit-kpiactivation').modal('hide');
                                }
                            });
                        }
                    }, function(error) {
                        console.log(error);
                    });


                    $('#u_korg').off('change').on('change', function() {
                        $('#u_ksite').empty();
                        var organizationId = $(this).val();
                        fetchSites(organizationId, '#u_ksite', function(data) {
                            if (data.length > 0) {
                                $.each(data, function(key, value) {
                                    if(value.id != siteId){
                                        $('#u_ksite').append('<option value="' + value.id + '">' + value.name + '</option>');
                                    }
                                });
                            }
                            else {
                                Swal.fire({
                                    text: 'Sites are not available for selected Organization',
                                    icon: 'error',
                                    confirmButtonText: 'OK'
                                }).then((result) => {
                                    if (result.isConfirmed) {
                                        $('#edit-kpiactivation').modal('hide');
                                    }
                                });
                            }
                        }, function(error) {
                            console.log(error);
                        });
                    });


                    fetchActivatedCostCenters(siteId, '#u_kcc', function(data) {
                        if (data.length > 0) {
                            $('#u_kcc').find('option:contains("Loading...")').remove(); // Remove the loading option
                            $.each(data, function(key, value) {
                                if(value.id != response.ccID){
                                    $('#u_kcc').append('<option value="' + value.id + '">' + value.name + '</option>');
                                }
                            });
                        }
                        else{
                            Swal.fire({
                                text: 'Cost Centerss are not Activated for selected Site',
                                icon: 'error',
                                confirmButtonText: 'OK',
                                allowOutsideClick: false
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    $('#edit-kpiactivation').modal('hide');
                                }
                            });
                        }
                    }, function(error) {
                        console.log(error);
                    });

                    $('#u_ksite').off('change').on('change', function() {
                        var siteId = $(this).val();
                        fetchActivatedCostCenters(siteId, '#u_kcc', function(data) {
                            if (data.length > 0) {
                                $('#u_kcc').empty();

                                $('#u_kcc').find('option:contains("Loading...")').remove(); // Remove the loading option
                                $.each(data, function(key, value) {
                                    $('#u_kcc').append('<option value="' + value.id + '">' + value.name + '</option>');
                                });
                                var ccID = $('#u_kcc').val();
                            }
                            else{
                                Swal.fire({
                                    text: 'Cost Centers are not Activated for selected Site',
                                    icon: 'error',
                                    confirmButtonText: 'OK',
                                    allowOutsideClick: false
                                }).then((result) => {
                                    if (result.isConfirmed) {
                                        $('#edit-kpiactivation').modal('hide');
                                    }
                                });
                            }
                        }, function(error) {
                            console.log(error);
                        });

                    });


                }

                $('#edit-kpiactivation').modal('show');
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    // Update Activated KPI Modal

    //Update Activated KPI
    $('#update_kpiactivation').on('submit', function (event) {
        event.preventDefault();
        var data = SerializeForm(this);
        var Id = $('.u_kpi_id').val();
        var url = '/update-activatekpi/' + Id;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: data,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-kpiactivation').modal('hide');
                            $('#view-kpiactivation').DataTable().ajax.reload(); // Refresh DataTable
                            $('#update_kpiactivation')[0].reset();
                            $('.text-danger').hide();
                        }
                        $('.text-danger').hide();
                    });
                }
            },
            error: function (xhr, status, error) {
                console.log(xhr.responseText);
            }
        });
    });
    //Update Activated KPI
});
// Activations

//HR Setup
$(document).ready(function() {
    //Add Gender
    $('#add_gender').submit(function(e) {
        e.preventDefault(); // Prevent the form from submitting normally
        var data = $(this).serializeArray();
        var resp = true;
        $(data).each(function(i, field){
            if ((field.value == '') || (field.value == null))
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                resp = false;
            }

        });

        if(resp != false)
        {
            $.ajax({
                url: "/hr/addgender",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {

                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-gender').modal('hide');
                                $('#view-gender').DataTable().ajax.reload();
                                $('#add_gender')[0].reset();
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_gender')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Gender

    // View Gender Data
    var viewGender =  $('#view-gender').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/hr/genderdata',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            {
                "data": 'name',
                "render": function(data, type, row) {
                    return data.replace(/\b\w/g, function(char) { return char.toUpperCase(); });
                }
            },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "200px"
            },
            {
                targets: 4,
                width: "300px"
            }
        ]
    });

    viewGender.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    viewGender.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    viewGender.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Gender Data

    // Update Gender Status
    $(document).on('click', '.gender_status', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/hr/gender-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
            var status = xhr.status;
                if(status == 200)
                {
                    $('#view-gender').DataTable().ajax.reload();
                }
                },
                error: function(xhr, status, error) {
                    console.log(error);
            }
        });

    });
    // Update Gender Status

    //Update Gender Modal
    $(document).on('click', '.edit-gender', function() {
        var ServiceModeId = $(this).data('gender-id');
        var url = '/hr/updategender/' + ServiceModeId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.edt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('.eg-id').val(response.id);
                $('.u_eg').val(response.name);
                $('#edit-gender').modal('show');
                $('#ajax-loader').hide();

            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Gender Modal

    //Update Gender
    $('#u_gender').on('submit', function (event) {
        event.preventDefault();
        var formData = $(this).serializeArray();
        var egId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'eg-id') {
                egId = formData[i].value;
                break;
            }
        }
        var url = 'hr/update-gender/' + egId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-gender').modal('hide');
                            $('#view-gender').DataTable().ajax.reload(); // Refresh DataTable
                            $('#u_gender')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Gender


    //Add Employee Status
    $('#add_empStatus').submit(function(e) {
        e.preventDefault(); // Prevent the form from submitting normally
        var data = $(this).serializeArray();
        var resp = true;

        $(data).each(function(i, field){
            if ((field.value == '') || (field.value == null))
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                resp = false;
            }
        });

        if(resp != false)
        {
            $.ajax({
                url: "/hr/addempStatus",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {

                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-empStatus').modal('hide');
                                $('#view-empStatus').DataTable().ajax.reload();
                                $('#add_empStatus')[0].reset();
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_empStatus')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Employee Status

    // View Employee Status Data
    var viewempStatus =  $('#view-empStatus').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/hr/empStatusdata',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            {
                "data": 'name',
                "render": function(data, type, row) {
                    return data.replace(/\b\w/g, function(char) { return char.toUpperCase(); });
                }
            },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "200px"
            },
            {
                targets: 4,
                width: "300px"
            }
        ]
    });

    viewempStatus.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    viewempStatus.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    viewempStatus.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Employee Status Data

    // Update Employee Status
    $(document).on('click', '.emp_status', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/hr/emp-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
            var status = xhr.status;
                if(status == 200)
                {
                    $('#view-empStatus').DataTable().ajax.reload();
                }
                },
                error: function(xhr, status, error) {
                    console.log(error);
            }
        });

    });
    // Update Employee Status

    //Update Employee Status Modal
    $(document).on('click', '.edit-empStatus', function() {
        var empStatusId = $(this).data('empstatus-id');
        console.log(empStatusId);
        var url = '/hr/updateempStatus/' + empStatusId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.edt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('.es-id').val(response.id);
                $('.u_es').val(response.name);
                $('#edit-empStatus').modal('show');
                $('#ajax-loader').hide();

            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Employee Status Modal

    //Update Employee Status Data
    $('#u_empStatus').on('submit', function (event) {
        event.preventDefault();
        var formData = $(this).serializeArray();
        var esId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'es-id') {
                esId = formData[i].value;
                break;
            }
        }
        var url = 'hr/update-empStatus/' + esId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-empStatus').modal('hide');
                            $('#view-empStatus').DataTable().ajax.reload(); // Refresh DataTable
                            $('#u_empStatus')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Employee Status Data



    //Add Employee Working Status
    $('#add_workingStatus').submit(function(e) {
        e.preventDefault(); // Prevent the form from submitting normally
        var data = $(this).serializeArray();
        var resp = true;
        $(data).each(function(i, field){
            if ((field.value == '') || (field.value == null))
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                resp = false;
            }
        });

        if(resp != false)
        {
            $.ajax({
                url: "/hr/addworkingStatus",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {
                    console.log(response);
                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-workingStatus').modal('hide');
                                $('#view-workingStatus').DataTable().ajax.reload();
                                $('#add_workingStatus')[0].reset();
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_workingStatus')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Employee Working Status

    // View Employee Working Status Data
    var viewworkingStatus =  $('#view-workingStatus').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/hr/workingStatusdata',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            {
                "data": 'name',
                "render": function(data, type, row) {
                    return data.replace(/\b\w/g, function(char) { return char.toUpperCase(); });
                }
            },
            { data: 'jobContinuation', name: 'jobContinuation' },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],

        columnDefs: [
            {
                targets: 1,
                width: "200px"
            },
            {
                targets: 5,
                width: "250px"
            }
        ]
    });

    viewworkingStatus.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    viewworkingStatus.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    viewworkingStatus.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Employee Working Status Data

    // Update Employee Working Status
    $(document).on('click', '.working_status', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/hr/working-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
                var status = xhr.status;
                if(status == 200)
                {
                    $('#view-workingStatus').DataTable().ajax.reload();
                }
            },
            error: function(xhr, status, error) {
                console.log(error);
            }
        });

    });
    // Update Employee Working Status

    //Update Employee Working Status Modal
    $(document).on('click', '.edit-workingStatus', function() {
        var workingStatusId = $(this).data('workingstatus-id');
        var url = '/hr/updateworkingStatus/' + workingStatusId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.edt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                if(response.jobContinue == 0) {
                    $('#u_jobcontinue').bootstrapSwitch('state', false);
                } else {
                    $('#u_jobcontinue').bootstrapSwitch('state', true);
                }
                $('.ews-id').val(response.id);
                $('.u_ews').val(response.name);
                $('#edit-workingStatus').modal('show');
                $('#ajax-loader').hide();

            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Employee Working Status Modal

    //Update Employee Working Status Data
    $('#u_workingStatus').on('submit', function (event) {
        event.preventDefault();
        var formData = $(this).serializeArray();
        var ewsId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'ews-id') {
                ewsId = formData[i].value;
                break;
            }
        }
        var url = 'hr/update-workingStatus/' + ewsId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-workingStatus').modal('hide');
                            $('#view-workingStatus').DataTable().ajax.reload(); // Refresh DataTable
                            $('#u_workingStatus')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Employee Working Status Data



    //Add Employee Qualification Level
    $('#add_empQualification').submit(function(e) {
        e.preventDefault(); // Prevent the form from submitting normally
        var data = $(this).serializeArray();
        var resp = true;
        $(data).each(function(i, field){
            if ((field.value == '') || (field.value == null))
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                resp = false;
            }
        });

        if(resp != false)
        {
            $.ajax({
                url: "/hr/addempqualificationlevel",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {
                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-empQualification').modal('hide');
                                $('#view-empQualification').DataTable().ajax.reload();
                                $('#add_empQualification')[0].reset();
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_empQualification')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Employee Qualification Level

    // View Employee Qualification Level Data
    var viewempQualification =  $('#view-empQualification').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/hr/empqualificationleveldata',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            {
                "data": 'name',
                "render": function(data, type, row) {
                    return data.replace(/\b\w/g, function(char) { return char.toUpperCase(); });
                }
            },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "200px"
            },
            {
                targets: 4,
                width: "250px"
            }
        ]
    });

    viewempQualification.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    viewempQualification.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    viewempQualification.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Employee Qualification Level Data

    // Update Employee Qualification Level
    $(document).on('click', '.empQualification_status', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/hr/empqualificationlevel-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
                var status = xhr.status;
                if(status == 200)
                {
                    $('#view-empQualification').DataTable().ajax.reload();
                }
            },
            error: function(xhr, status, error) {
                console.log(error);
            }
        });

    });
    // Update Employee Qualification Level

    //Update Employee Qualification Level Modal
    $(document).on('click', '.edit-empQualification', function() {
        var empQualificationId = $(this).data('empqualification-id');
        var url = '/hr/empqualificationlevelmodal/' + empQualificationId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.edt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('.eql-id').val(response.id);
                $('.u_eql').val(response.name);
                $('#edit-empQualification').modal('show');
                $('#ajax-loader').hide();

            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Employee Qualification Level Modal

    //Update Employee Qualification Level Data
    $('#u_empQualification').on('submit', function (event) {
        event.preventDefault();
        var formData = $(this).serializeArray();
        var eqlId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'eql-id') {
                eqlId = formData[i].value;
                break;
            }
        }
        var url = 'hr/update-empqualificationlevel/' + eqlId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-empQualification').modal('hide');
                            $('#view-empQualification').DataTable().ajax.reload(); // Refresh DataTable
                            $('#u_empQualification')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Employee Qualification Level Data


    //Add Employee Cadre
   
    //Open Employee cadre Setup
    $(document).on('click', '.add-empCadre', function() {
        var orgId = $('#cadre_org').val();
        $('#add-empCadre').modal('show');
    });
    //Open Employee cadre Setup

    $('#add_empCadre').submit(function(e) {
        e.preventDefault(); // Prevent the form from submitting normally
        var data = SerializeForm(this);
        var resp = true;
        $(data).each(function(i, field){
            if ((field.value == '') || (field.value == null))
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })

                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                resp = false;
            }
        });

        if(resp != false)
        {
            $.ajax({
                url: "/hr/addempcadre",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {
                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-empCadre').modal('hide');
                                $('#view-empCadre').DataTable().ajax.reload();
                                $('#add_empCadre')[0].reset();
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_empCadre')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Employee Cadre

    // View EmployeeCadre Data
    var viewempCadre =  $('#view-empCadre').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/hr/empcadredata',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            {
                "data": 'name',
                "render": function(data, type, row) {
                    return data.replace(/\b\w/g, function(char) { return char.toUpperCase(); });
                }
            },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "200px"
            },
            {
                targets: 4,
                width: "300px"
            }
        ]
    });

    viewempCadre.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    viewempCadre.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    viewempCadre.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Employee Cadre Data

    // Update Employee Cadre
    $(document).on('click', '.empCadre_status', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/hr/empcadre-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
                var status = xhr.status;
                if(status == 200)
                {
                    $('#view-empCadre').DataTable().ajax.reload();
                }
            },
            error: function(xhr, status, error) {
                console.log(error);
            }
        });

    });
    // Update Employee Cadre

    //Update Employee Cadre Modal
    $(document).on('click', '.edit-empCadre', function() {
        var empCadreId = $(this).data('empcadre-id');
        $('#u_cadreOrg').empty()
        var url = '/hr/empcadreStatus/' + empCadreId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.edt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                var orgName = response.orgName;
                var orgID = response.orgId;
                $('.ec-id').val(response.id);
                $('.u_ec').val(response.name);
                $('#u_cadreOrg').html("<option selected value='"+orgID+"'>" + orgName + "</option>");

                fetchOrganizations(orgID,orgName,'#u_cadreOrg', function(data) {
                    $('#u_cadreOrg').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        if(value.id != orgID)
                        {
                            $('#u_cadreOrg').append('<option value="' + value.id + '">' + value.organization + '</option>');
                        }
                    });
                });

                $('#edit-empCadre').modal('show');
                $('#ajax-loader').hide();

            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Employee Cadre Modal

    //Update Employee Cadre Data
    $('#u_empCadre').on('submit', function (event) {
        event.preventDefault();
        var formData = $(this).serializeArray();
        var ecId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'ec-id') {
                ecId = formData[i].value;
                break;
            }
        }
        var url = 'hr/update-empcadre/' + ecId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-empCadre').modal('hide');
                            $('#view-empCadre').DataTable().ajax.reload(); // Refresh DataTable
                            $('#u_empCadre')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Employee Cadre Data


    $('#emp-cadre').html("<option selected disabled value=''>Select Cadre</option>").prop('disabled', true);
    OrgChangeCadre('#positionOrg', '#emp-cadre', '#add_empPosition');
    //Open Employee Position Setup
    $(document).on('click', '.add-empPosition', function() {
        var orgId = $('#positionOrg').val();
        $('#emp-cadre').html("<option selected disabled value=''>Select Cadre</option>").prop('disabled', false);
        fetchEmployeeCadre(orgId, '#emp-cadre', function(data) {
            if (data.length > 0) {
                $.each(data, function(key, value) {
                    $('#emp-cadre').append('<option value="' + value.id + '">' + value.name + '</option>');
                });
            }
        }, function(error) {
            console.log(error);
        });
        $('#add-empPosition').modal('show');
    });
    //Open Employee Position Setup

    //Add Employee Position
    $('#add_empPosition').submit(function(e) {
        e.preventDefault(); // Prevent the form from submitting normally
        var data = SerializeForm(this);
        var resp = true;
        $(data).each(function(i, field){
            if ((field.value == '') || (field.value == null))
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })

                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {

                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                resp = false;

            }
        });

        if(resp != false)
        {
            $.ajax({
                url: "/hr/addempposition",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {
                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-empPosition').modal('hide');
                                $('#view-empPosition').DataTable().ajax.reload();
                                $('#add_empPosition').find('select').val($('#add_empPosition').find('select option:first').val()).trigger('change');
                                $('#add_empPosition')[0].reset();
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_empPosition').find('select').val($('#add_empPosition').find('select option:first').val()).trigger('change');
                                $('#add_empPosition')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Employee Position

    // View Employee Position Data
    var viewempPosition =  $('#view-empPosition').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/hr/emppositiondata',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            { data: 'name', name: 'name',render: function(data, type, row) {
                return data.charAt(0).toUpperCase() + data.slice(1);
            }},
            { data: 'empcadre', name: 'empcadre',render: function(data, type, row) {
                return data.charAt(0).toUpperCase() + data.slice(1);
            }},
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "200px"
            },
            {
                targets: 5,
                width: "250px"
            }
        ]
    });

    viewempPosition.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    viewempPosition.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    viewempPosition.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Employee Position Data

    // Update Employee Position Status
    $(document).on('click', '.empPosition_status', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/hr/empposition-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
                var status = xhr.status;
                if(status == 200)
                {
                    $('#view-empPosition').DataTable().ajax.reload();
                }
            },
            error: function(xhr, status, error) {
                console.log(error);
            }
        });

    });
    // Update Employee Position Status

    //Update Employee Position Modal
    $(document).on('click', '.edit-empPosition', function() {
        var empPositionId = $(this).data('empposition-id');
        $('#u_positionOrg').empty();
        var url = '/hr/emppositionStatus/' + empPositionId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.edt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('.ep-id').val(response.id);
                $('.u_ep').val(response.name);
                var orgName = response.orgName;
                var orgID = response.orgId;
                $('#u_positionOrg').html("<option selected value='"+orgID+"'>" + orgName + "</option>");
                $('.u_cadre').html("<option selected value='"+response.cadreid+"'>" + response.cadre + "</option>");

                fetchOrganizations(orgID,orgName,'#u_positionOrg', function(data) {
                    $('#u_positionOrg').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        if(value.id != orgID)
                        {
                            $('#u_positionOrg').append('<option value="' + value.id + '">' + value.organization + '</option>');
                        }
                    });
                });

                if (orgID) {
                    fetchEmployeeCadre(orgID, '#u_cadre', function(data) {
                        if (data.length > 0) {
                            $.each(data, function(key, value) {
                                if(value.id != response.cadreid )
                                {
                                    $('.u_cadre').append('<option value="' + value.id + '">' + value.name + '</option>');
                                }
                            });
                        }
                        else {
                            Swal.fire({
                                text: 'Cadre are not available for selected Organization & Sites',
                                icon: 'error',
                                confirmButtonText: 'OK'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    $('#edit-empPosition').modal('hide');
                                }
                            });
                        }
                    }, function(error) {
                        console.log(error);
                    });

                }


                $('#edit-empPosition').modal('show');
                $('#ajax-loader').hide();

            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Employee Position Modal

    //Update Employee Position
    $('#u_empPosition').on('submit', function (event) {
        event.preventDefault();
        var formData = $(this).serializeArray();
        var epId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'ep-id') {
                epId = formData[i].value;
                break;
            }
        }
        var url = 'hr/update-empposition/' + epId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-empPosition').modal('hide');
                            $('#view-empPosition').DataTable().ajax.reload(); // Refresh DataTable
                            $('#u_empPosition')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Employee Position

    //Add Employee
    $('#emp_cadre').html("<option selected disabled value=''>Select Cadre</option>").prop('disabled', true);
    $('#emp_position').html("<option selected disabled value=''>Select Position</option>").prop('disabled', true);

    OrgChangeCadre('#emp_org', '#emp_cadre', '#add_employee');
    OrgChangePosition('#emp_org', '#emp_position', '#add_employee');
    //Open Employee Setup
    $(document).on('click', '.add-employee', function() {
        var orgId = $('#emp_org').val();
        if(orgId)
        {
            $('#emp_cadre').html("<option selected disabled value=''>Select Cadre</option>").prop('disabled', false);
            fetchEmployeeCadre(orgId, '#emp_cadre', function(data) {
                if (data.length > 0) {
                    $.each(data, function(key, value) {
                        $('#emp_cadre').append('<option value="' + value.id + '">' + value.name + '</option>');
                    });
                }
            }, function(error) {
                console.log(error);
            });
            $('#emp_position').html("<option selected disabled value=''>Select Position</option>").prop('disabled', false);
            fetchEmployeePosition(orgId, '#emp_position', function(data) {
                if (data.length > 0) {
                    $.each(data, function(key, value) {
                        $('#emp_position').append('<option value="' + value.id + '">' + value.name + '</option>');
                    });
                }
            }, function(error) {
                console.log(error);
            });
            $('#emp_site').html("<option selected disabled value=''>Select Head Count Site</option>").prop('disabled', false);
            fetchOrganizationSites(orgId, '#emp_site', function(data) {
                $('#emp_site').html("<option selected disabled value=''>Select Head Count Site</option>").prop('disabled', false);
                $.each(data, function(key, value) {
                    $('#emp_site').append('<option value="' + value.id + '">' + value.name + '</option>');
                });
            });
        }
        
        $('#add-employee').modal('show');
    });
    //Open Employee Setup

    $('#add_employee').submit(function(e) {
        e.preventDefault();
        var formData = new FormData($('#add_employee')[0]);
        var provinceValue = $('#province_name').val();
        var divisionValue = $('#division_name').val();
        var districtValue = $('#district_name').val();
        var GenderValue = $('#emp_gender').val();

        var Org = $('#emp_org').val();
        var Site = $('#emp_site').val();
        var CostCenter = $('#emp_cc').val();
        var Cadre = $('#emp_cadre').val();
        var reportTo = $('#emp_reportto').val();
        var qualificationLevel = $('#emp_qual_lvl').val();
        var EmpStatus = $('#emp_status').val();
        var WorkingStatus = $('#emp_working_status').val();
        var EmpPosition = $('#emp_position').val();
        var EmpGuardianRelation = $('#emp_guardian_relation').val();
        var EmpNextOfKinRelation = $('#emp_nextofkin_relation').val();
        var EmpReligion = $('#emp_religion').val();
        var EmpmaritalStatus = $('#emp_marital_status').val();
        var Language = $('#emp_language').val();

        var imgValue = $('#emp_img')[0].files[0];
        formData.append('emp_guardian_relation', EmpGuardianRelation);
        formData.append('emp_nextofkin_relation', EmpNextOfKinRelation);
        formData.append('emp_religion', EmpReligion);
        formData.append('emp_marital_status', EmpmaritalStatus);
        formData.append('emp_province', provinceValue);
        formData.append('emp_division', divisionValue);
        formData.append('emp_district', districtValue);
        formData.append('emp_gender', GenderValue);
        formData.append('emp_org', Org);
        formData.append('emp_site', Site);
        formData.append('emp_cc', CostCenter);
        formData.append('emp_cadre', Cadre);
        formData.append('emp_reportto', reportTo);
        formData.append('emp_qual_lvl', qualificationLevel);
        formData.append('emp_status', EmpStatus);
        formData.append('emp_working_status', WorkingStatus);
        formData.append('emp_position', EmpPosition);
        formData.append('emp_language', Language);
        formData.append('emp_img', imgValue);
        var resp = true;
        var firstErrorElement = null;

        formData.forEach(function(value, key) {
            var fieldName = key;
            var fieldValue = value;
            if ((fieldValue == '' || fieldValue == 'null' || fieldValue === 'undefined') && ((fieldName != 'emp_oldcode') && (fieldName != 'emp_landline') &&  (fieldName != 'emp_additionalcell')))
            {
                var FieldName = fieldName;
                
                if((FieldName == 'start_time') || (FieldName == 'end_time'))
                {
                    if(fieldValue == '')
                    {
                        $('#week_hrs_error').text("Please Select Employee Week Hours");
                        $( 'input[name= "' +FieldName +'"' ).focus(function() {
                            $('#week_hrs_error').text("");
                            $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                        })
                    }

                }
                var FieldID = '#'+FieldName + "_error";

                if (!firstErrorElement) {
                    firstErrorElement = FieldName;
                }

                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $( 'textarea[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('textarea[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $( 'textarea[name= "' +FieldName +'"' ).addClass('requirefield');

                $('input[name="' + FieldName + '"][type="file"]').parent().addClass('requirefield');
                $( 'input[name="' + FieldName + '"][type="file"]').click(function() {
                    $(FieldID).text("");

                    $('input[name="' + FieldName + '"][type="file"]').parent().removeClass('requirefield');
                })
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                resp = false;
            }
        });

        if (firstErrorElement) {
            $('input[name="' + firstErrorElement + '"], textarea[name="' + firstErrorElement + '"], select[name="' + firstErrorElement + '"]').focus().addClass('requirefield');
        }
        
        if(resp != false)
        {
            $.ajax({
                url: "/hr/addemployee",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: formData,
                processData: false,
                contentType: false,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {
                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-employee').modal('hide');
                                $('#view-employee').DataTable().ajax.reload(); // Refresh DataTable
                                $('#add_employee').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('#add_employee')[0].reset();
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                var imgReset = $('#emp_img').dropify();
                                imgReset = imgReset.data('dropify');
                                imgReset.resetPreview();
                                imgReset.clearElement();
                                $('#add_employee').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('#add_employee')[0].reset();
                            }
                        });
                    }
                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Employee

    // View Employee
    var viewemployee =  $('#view-employee').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/hr/viewemployee',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            { data: 'placement', name: 'placement' },
            { data: 'workStatus', name: 'workStatus'},
            { data: 'contactDetails', name: 'contactDetails'},
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "300px"
            },
            {
                targets: 2,
                width: "300px"
            },
            {
                targets: 3,
                width: "300px"
            },
            {
                targets: 4,
                width: "300px"
            },
            {
                targets: 4,
                width: "200px"
            }
        ]
    });

    viewemployee.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    viewemployee.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    viewemployee.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Employee

    // Update Employee Status
    $(document).on('click', '.employee_status', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/hr/employee-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {

                var status = xhr.status;
            if(status == 200)
            {
                $('#view-employee').DataTable().ajax.reload();
            }
            },
            error: function(xhr, status, error) {
                console.log(error);
            }
        });

    });
    // Update Employee Status

    //Employee Detail Modal
    $(document).on('click', '.employee-detail', function() {
        var empId = $(this).data('emp-id');
        var url = '/hr/employeedetail/' + empId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                $('#ajax-loader').hide();
                var imgPath = response.Image;
                $('#empImg').attr('src', imgPath);
                $('#empName').text(response.empName);
                $('#empAddress').text(response.Address);
                $('#empMailingAddress').text(response.MailingAddress);
                $('#empOldcode').text(response.OldCode);
                $('#empEmail').text(response.Email);
                $('#empContact').text(response.contact);
                $('#empAdditionalCell').text(response.Additionalcontact);
                $('#empProvince').text(response.Province);
                $('#empGuardian').text(response.GuardianName);
                $('#empRelation').text(response.GuardianRelation);
                $('#empNextOfKin').text(response.NextOfKin);
                $('#empNextOfKinRelation').text(response.NextOfKinRelation);
                $('#empLanguage').text(response.Language);
                $('#empReligion').text(response.Religion);
                $('#empMaritalStatus').text(response.MaritalStatus);
                $('#empDivision').text(response.Division);
                $('#empDistrict').text(response.District);
                $('#empOrg').text(response.Organization);
                $('#empSite').text(response.Site);
                $('#empGender').text(response.Gender);
                $('#empCC').text(response.CostCenter);
                $('#empCadre').text(response.Cadre);
                $('#empPosition').text(response.Position);
                $('#empQualification').text(response.Qualification);
                $('#empStatus').text(response.EmpStatus);
                $('#workingStatus').text(response.WorkingStatus);

                $('#weekHrs').text(response.WeekHrs);
                $('#empManager').text(response.Manager);
                $('#empJD').text(response.JoiningDate);
                $('#empCnic').text(response.cnic);
                $('#empCnicExpiry').text(response.cnicExpiry);
                $('#empDOB').text(response.DateOfBirth);

                $('#employee-detail').modal('show');
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Employee Detail Modal

    // Update Employee Modal
    $(document).on('click', '.edit-employee', function() {
        var employeeId = $(this).data('employee-id');
        $('#edit_employee')[0].reset();
        $('#ajax-loader').show();
        var url = '/hr/updatemodal/' + employeeId;
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                $('#ajax-loader').hide();
                var empname = response.empName;
                var GuardianName = response.GuardianName;
                var GuardianRelation = response.GuardianRelation;
                var NextOfKin = response.empNextOfKin;
                var NextOfKinRelation = response.empNextOfKinRelation;
                var empCode = response.OldCode;
                var gender = response.Gender;
                var Religion = response.Religion;
                var MaritalStatus = response.MaritalStatus;
                var dob = response.empDOB;
                var org = response.Organization;
                var site = response.Site;
                var cc = response.CostCenter;
                var cadre = response.Cadre;
                var position = response.Position;
                var Manager = response.Manager;
                var Qualification = response.Qualification;
                var empStatus = response.EmpStatus;
                var workingStatus = response.WorkingStatus;
                var doj = response.empDOJ;
                var cnicExpiry = response.cnicExpiry;
                var dol = response.empDOL;
                var province = response.Province;
                var division = response.Division;
                var district = response.District;
                var cnic = response.cnic;
                var cell = response.cell;
                var AdditionalCell = response.AdditionalCell;
                var landline = response.landline;
                var email = response.Email;
                var address = response.Address;
                var MailingAddress = response.MailingAddress;
                var image = response.Image;
                // var language = response.language;

                const languages = ["Urdu", "English", "Sindhi", "Balochi", "Punjabi", "Pashto", "Hindko", "Siraiki", "Memoni", "Gujrati", "Brahui", "Shina", "Burushaski", "Wakhi", "Balti", "Kashmiri", "Khowar"];
                let languageOptions = '<option selected>' + response.language + '</option>';
                for (let language of languages) {
                    if (language !== response.language) {
                        languageOptions += '<option>' + language + '</option>';
                    }
                }
                $('#u_emp_language').html(languageOptions);
                // $('.u_emp_language').val(language);


                var imgName = image.trim().substring(image.lastIndexOf('/') + 1);

                var emp_img_input = $('#u_empImg');
                var dropifyRenderImg = emp_img_input.closest('.dropify-wrapper').find('.dropify-render');

                dropifyRenderImg.find('img').attr('src', image);

                var imgdropifyInfos = emp_img_input.closest('.dropify-wrapper').find('.dropify-infos');
                var imgfilenameInner = imgdropifyInfos.find('.dropify-filename-inner');
                imgfilenameInner.text(imgName);

                emp_img_input.attr('data-default-file', image);
                emp_img_input.dropify('destroy');
                emp_img_input.dropify();

                $('.u_emp_code').val(empCode);
                $('.u_emp_cnic').val(cnic);
                $('.u_emp_cell').val(cell);
                $('.u_emp_additional_cell').val(AdditionalCell);
                $('.u_emp_landline').val(landline);
                $('.u_emp_email').val(email);
                if (email) {
                    $('.u_emp_email').prop('readonly', true);
                } else {
                    $('.u_emp_email').prop('readonly', false);
                }
                $('.u_emp_address').val(address);
                $('.u_emp_mailingaddress').val(MailingAddress);
                $('.u_emp_name').val(empname);
                $('.u_guardian_name').val(GuardianName);
                $('.u_emp_nextofkin').val(NextOfKin);
                $('#u_emp_weekHrs').val(response.WeekHrs);
                $('.u-emp-id').val(response.id);

                const guardianRelations = ["Father", "Husband"];
                let guardianOptions = '<option selected>' + GuardianRelation + '</option>';
                for (let guardianRelation of guardianRelations) {
                    if (guardianRelation !== GuardianRelation) {
                        guardianOptions += '<option>' + guardianRelation + '</option>';
                    }
                }
                $('#u_guardian_relation').html(guardianOptions);

                const nextofkinRelations = ["Father", "Mother", "Brother", "Sister", "Spouse", "Child", "Grandparent", "Grandchild", "Uncle", "Aunt", "Niece", "Nephew", "Cousin", "Legal Guardian", "Friend", "Partner"];
                let nextofkinOptions = '<option selected>' + NextOfKinRelation + '</option>';
                for (let nextofkinRelation of nextofkinRelations) {
                    if (nextofkinRelation !== NextOfKinRelation) {
                        nextofkinOptions += '<option>' + nextofkinRelation + '</option>';
                    }
                }
                $('#u_nextofkin_relation').html(nextofkinOptions);

                const Religions = ["Islam", "Hindu", "Chiristian", "Sikh"];
                let religionOptions = '<option selected>' + Religion + '</option>';
                for (let religion of Religions) {
                    if (religion !== Religion) {
                        religionOptions += '<option>' + religion + '</option>';
                    }
                }
                $('#u_emp_religion').html(religionOptions);

                // $('#u_emp_marital_status').html("<option selected>" + MaritalStatus + "</option>");

                const MaritalStatuses = ["Single", "Married", "Divorced", "Widowed"];
                let maritalStatusOptions = '<option selected>' + MaritalStatus + '</option>';
                for (let maritalStatus of MaritalStatuses) {
                    if (maritalStatus !== MaritalStatus) {
                        maritalStatusOptions += '<option>' + maritalStatus + '</option>';
                    }
                }
                $('#u_emp_marital_status').html(maritalStatusOptions);

                $('#u_emp_gender').html("<option selected value='"+response.GenderID+"'>" + gender + "</option>");
                $('#u_emp_org').html("<option selected value='"+response.OrganizationID+"'>" + org + "</option>");
                $('#u_emp_site').html("<option selected value='"+response.SiteID+"'>" + site + "</option>");
                $('#u_emp_cc').html("<option selected value='"+response.CostCenterID+"'>" + cc + "</option>");
                $('#u_emp_cadre').html("<option selected value='"+response.CadreID+"'>" + cadre + "</option>");
                $('#u_emp_position').html("<option selected value='"+response.PositionID+"'>" + position + "</option>");
                $('#u_emp_reportto').html("<option selected value='"+response.GenderID+"'>" + gender + "</option>");
                $('#u_qualification').html("<option selected value='"+response.QualificationID+"'>" + Qualification + "</option>");
                $('#u_emp_status').html("<option selected value='"+response.EmpStatusID+"'>" + empStatus + "</option>");
                $('#u_working_status').html("<option selected data-jobstatus='"+response.jobContinue+"' value='"+response.WorkingStatusID+"'>" + workingStatus + "</option>");
                $('#u_emp_province').html("<option selected value='"+response.ProvinceID+"'>" + province + "</option>");
                $('#u_emp_division').html("<option selected value='"+response.DivisionID+"'>" + division + "</option>");
                $('#u_emp_district').html("<option selected value='"+response.DistrictID+"'>" + district + "</option>");
                $('#u_emp_reportto').html("<option selected value='"+response.ManagerID+"'>" + Manager + "</option>");
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.u_emp_edt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                if(response.jobContinue == 0)
                {
                    $('#u_emp_dol').attr('required', true);
                    var formattedDOL = moment(dol).format('YYYY-MM-DD');
                    $('#u_emp_dol').each(function() {
                        var dolElement = $(this);
                        dolElement.val(formattedDOL);
                    });
                    $('#date_of_leaving').show();
                }
                else{
                    $('#u_emp_dol').attr('required', false);
                    $('#date_of_leaving').hide();
                }

                var formattedDOJ = moment(doj).format('YYYY-MM-DD');
                $('#u_emp_doj').each(function() {
                    var dojElement = $(this);
                    dojElement.val(formattedDOJ);
                });

                var formattedcnicExpiry = moment(cnicExpiry).format('YYYY-MM-DD');
                $('#u_cnic_expiry').each(function() {
                    var cnicExpiryElement = $(this);
                    cnicExpiryElement.val(formattedcnicExpiry);
                });

                var formattedDOB = moment(dob).format('YYYY-MM-DD');
                $('#u_emp_dob').each(function() {
                    var dobElement = $(this);
                    dobElement.val(formattedDOB);
                });

                fetchOrganizations(response.OrganizationID,org,'#u_emp_org', function(data) {
                    $('#u_emp_org').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        $('#u_emp_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                    });
                });

                $.ajax({
                    url: 'hr/getgender',
                    type: 'GET',
                    data: {
                        genderID: response.GenderID,
                    },
                    beforeSend: function() {
                        $('#u_emp_gender').append('<option>Loading...</option>');
                    },
                    success: function(resp) {
                        $('#u_emp_gender').find('option:contains("Loading...")').remove(); // Remove the loading option
                        $.each(resp, function(key, value) {
                            $('#u_emp_gender').append('<option value="' + value.id + '">' + value.name + '</option>');
                        });
                    },
                    error: function(xhr, status, error) {
                        console.log(error);
                    }
                });

                fetchEmployeeCadre(response.OrganizationID, '.u_emp_cadre', function(data) {
                    if (data.length > 0) {
                        $.each(data, function(key, value) {
                            if(value.id != response.CadreID )
                            {
                                $('.u_emp_cadre').append('<option value="' + value.id + '">' + value.name + '</option>');
                            }
                        });
                    }
                }, function(error) {
                    console.log(error);
                });

                fetchEmployeePosition(response.OrganizationID, '.u_emp_position', function(data) {
                    if (data.length > 0) {
                        $.each(data, function(key, value) {
                            if(value.id != response.PositionID )
                            {
                                $('.u_emp_position').append('<option value="' + value.id + '">' + value.name + '</option>');
                            }
                        });
                    }
                }, function(error) {
                    console.log(error);
                });

                fetchQualificationLevel(response.QualificationID,'.u_qualification', function(data) {
                   $.each(data, function(key, value) {
                       $('.u_qualification').append('<option value="' + value.id + '">' + value.name + '</option>');
                   });
                });

                $.ajax({
                    url: 'hr/getempstatus',
                    type: 'GET',
                    data: {
                        empstatusid: response.EmpStatusID,
                    },
                    beforeSend: function() {
                        $('.u_emp_status').append('<option>Loading...</option>');
                    },
                    success: function(resp) {
                        $('.u_emp_status').find('option:contains("Loading...")').remove();
                        $.each(resp, function(key, value) {
                            $('.u_emp_status').append('<option value="' + value.id + '">' + value.name + '</option>');
                        });
                    },
                    error: function(xhr, status, error) {
                        console.log(error);
                    }
                });

                $.ajax({
                    url: 'hr/getworkingstatus',
                    type: 'GET',
                    data: {
                        workingstatusid: response.WorkingStatusID,
                    },
                    beforeSend: function() {
                        $('.u_working_status').append('<option>Loading...</option>');
                    },
                    success: function(resp) {
                        $('.u_working_status').find('option:contains("Loading...")').remove();
                        $.each(resp, function(key, value) {
                            $('.u_working_status').append('<option data-jobstatus="' + value.job_continue + '" value="' + value.id + '">' + value.name + '</option>');
                        });
                    },
                    error: function(xhr, status, error) {
                        console.log(error);
                    }
                });

                $('#u_working_status').off('change').on('change', function() {
                    var jobStatus = $(this).find('option:selected').data('jobstatus');
                    if(jobStatus == 0)
                    {
                        $('#u_emp_dol').attr('required', true);
                        $('#date_of_leaving').show();
                        var currentDate = new Date();
                        $('#u_emp_dol').bootstrapMaterialDatePicker('setDate', currentDate);
                    }
                    else{
                        $('#u_emp_dol').attr('required', false);
                        $('#u_emp_dol').val('');
                        $('#date_of_leaving').hide();
                    }
                });

                fetchEmployees(response.ManagerID, '#u_emp_reportto', function(data) {
                    $.each(data, function(key, value) {
                        $('#u_emp_reportto').append('<option value="' + value.id + '">' + value.name + '</option>');
                    });

                    if(Manager != 'N/A')
                    {
                        $('#u_emp_reportto').append('<option value="0">N/A</option>');
                    }

                }, function(error) {
                    console.log(error);
                });

                if (response.OrganizationID) {
                    fetchSites(response.OrganizationID, '#u_emp_site', function(data) {
                        if (data.length > 0) {
                            $.each(data, function(key, value) {
                                $('#u_emp_site').append('<option value="' + value.id + '">' + value.name + '</option>');
                            });
                        }
                        else {
                            Swal.fire({
                                text: 'Sites are not available for selected Organization',
                                icon: 'error',
                                confirmButtonText: 'OK'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    $('#edit-employee').modal('hide');
                                }
                            });
                        }
                    }, function(error) {
                        console.log(error);
                    },response.SiteID);

                    $('#u_emp_org').off('change').on('change', function() {
                        $('#u_emp_site').empty();
                        var organizationId = $(this).val();
                        fetchSites(organizationId, '#u_emp_site', function(data) {
                            if (data.length > 0) {
                                $.each(data, function(key, value) {
                                    $('#u_emp_site').append('<option value="' + value.id + '">' + value.name + '</option>');
                                });
                            }
                            else {
                                Swal.fire({
                                    text: 'Sites are not available for selected Organization',
                                    icon: 'error',
                                    confirmButtonText: 'OK'
                                }).then((result) => {
                                    if (result.isConfirmed) {
                                        $('#edit-employee').modal('hide');
                                    }
                                });
                            }

                        }, function(error) {
                            console.log(error);
                        });
                    });

                    fetchActivatedCostCenters(response.SiteID, '#u_emp_cc', function(data) {
                        $.each(data, function(key, value) {
                            $('#u_emp_cc').append('<option value="' + value.id + '">' + value.name + '</option>');
                        });
                    }, function(error) {
                        console.log(error);
                    },response.CostCenterID);

                    $('#u_emp_site').off('change').on('change', function() {
                        $('#u_emp_cc').empty();
                        var siteId = $(this).val();
                        fetchActivatedCostCenters(siteId, '#u_emp_cc', function(data) {
                            if (data.length > 0) {
                                $.each(data, function(key, value) {
                                    $('#u_emp_cc').append('<option value="' + value.id + '">' + value.name + '</option>');
                                });
                            }
                            else{
                                Swal.fire({
                                    text: 'Cost Centers are not Activated for selected Site',
                                    icon: 'error',
                                    confirmButtonText: 'OK',
                                    allowOutsideClick: false
                                }).then((result) => {
                                    if (result.isConfirmed) {
                                        $('#edit-employee').modal('hide');

                                    }
                                });
                            }
                        }, function(error) {
                            console.log(error);
                        });

                    });

                    $.ajax({
                        url: 'territory/updateprovince',
                        type: 'GET',
                        data: {
                            provinceId: response.ProvinceID,
                        },
                        beforeSend: function() {
                            $('#u_emp_province').append('<option>Loading...</option>');
                        },
                        success: function(resp) {
                            $('#u_emp_province').find('option:contains("Loading...")').remove(); // Remove the loading option
                            $.each(resp, function(key, value) {
                                $('#u_emp_province').append('<option value="' + value.id + '">' + value.name + '</option>');
                            });
                        },
                        error: function(xhr, status, error) {
                            console.log(error);
                        }
                    });

                    $.ajax({
                        url: 'territory/updatedivision',
                        type: 'GET',
                        data: {
                            provinceId: response.ProvinceID,
                            divisionId: response.DivisionID,
                        },
                        beforeSend: function() {
                            $('#u_emp_division').append('<option>Loading...</option>');
                        },
                        success: function(resp) {
                            $('#u_emp_division').find('option:contains("Loading...")').remove(); // Remove the loading option
                            $.each(resp, function(key, value) {
                                $('#u_emp_division').append('<option value="' + value.id + '">' + value.name + '</option>');
                            });
                        },
                        error: function(xhr, status, error) {
                            console.log(error);
                        }
                    });

                    $.ajax({
                        url: 'territory/updatedistrict',
                        type: 'GET',
                        data: {
                            divisionId: response.DivisionID,
                        },
                        beforeSend: function() {
                            $('#u_emp_district').append('<option>Loading...</option>');
                        },
                        success: function(resp) {
                            $('#u_emp_district').find('option:contains("Loading...")').remove(); // Remove the loading option
                            $.each(resp, function(key, value) {
                                $('#u_emp_district').append('<option value="' + value.id + '">' + value.name + '</option>');
                            });
                        },
                        error: function(xhr, status, error) {
                            console.log(error);
                        }
                    });

                    $('#u_emp_province').change(function() {
                        var province_id = $(this).val();
                        $.ajax({
                            url: 'territory/updatedivision',
                            type: 'GET',
                            data: {
                                provinceId: province_id,
                            },
                            beforeSend: function() {
                                $('#u_emp_division').append('<option>Loading...</option>');
                            },
                            success: function(resp) {
                                    $('#u_emp_division').html("<option selected disabled value=''>Select Division</option>");
                                $.each(resp, function(key, value) {
                                    $('#u_emp_division').append('<option value="' + value.id + '">' + value.name + '</option>');
                                });
                            },
                            error: function(xhr, status, error) {
                                console.log(error);
                            }
                        });
                    });

                    $('#u_emp_division').change(function() {
                        var divisionid = $(this).val();
                        $.ajax({
                            url: 'territory/updatedistrict',
                            type: 'GET',
                            data: {
                                divisionId: divisionid,
                            },
                            beforeSend: function() {
                                $('#u_emp_district').append('<option>Loading...</option>');
                            },
                            success: function(resp) {
                                    $('#u_emp_district').html("<option selected disabled value=''>Select District</option>");
                                $.each(resp, function(key, value) {
                                    $('#u_emp_district').append('<option value="' + value.id + '">' + value.name + '</option>');
                                });
                            },
                            error: function(xhr, status, error) {
                                console.log(error);
                            }
                        });
                    });

                }

                $('#edit-employee').modal('show');
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    // Update Employee Modal

    //Update Employee
    $('#edit_employee').on('submit', function (event) {
        event.preventDefault();
        var formData = new FormData($('#edit_employee')[0]);
        var gender = $('#u_emp_gender').val();
        var org = $('#u_emp_org').val();
        if(org)
        {
            formData.append('u_emp_org', org);
        }
      
        var site = $('#u_emp_site').val();
        var costcenter = $('#u_emp_cc').val();
        var cadre = $('#u_emp_cadre').val();
        var position = $('#u_emp_position').val();
        var manager = $('#u_emp_reportto').val();
        var qualificationLevel = $('#u_qualification').val();
        var empStatus = $('#u_emp_status').val();
        var workingStatus = $('#u_working_status').val();
        var province = $('#u_emp_province').val();
        var division = $('#u_emp_division').val();
        var district = $('#u_emp_district').val();
        var empId = $('.u-emp-id').val();

        formData.append('u_emp_gender', gender);
       
        formData.append('u_emp_site', site);
        formData.append('u_emp_cc', costcenter);
        formData.append('u_emp_cadre', cadre);
        formData.append('u_emp_position', position);
        formData.append('u_emp_reportto', manager);
        formData.append('u_qualification', qualificationLevel);
        formData.append('u_emp_status', empStatus);
        formData.append('u_working_status', workingStatus);
        formData.append('u_emp_province', province);
        formData.append('u_emp_division', division);
        formData.append('u_emp_district', district);

        var empImg = $('#u_empImg')[0].files[0];
        if(empImg != 'undefined')
        {
            formData.append('u_empImg', empImg);
        }
        var url = '/edit-employee/' + empId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            processData: false,
            contentType: false,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'info')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('.u_emp_email').val('');
                        }
                    });
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-employee').modal('hide');
                            $('#view-employee').DataTable().ajax.reload(); // Refresh DataTable
                            $('#edit_employee')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Employee

    //Open Add Employee Modal Salary
    $(document).on('click', '.add_empSalary', function() {
        var orgId = $('#es-org').val();
        $('#amount').val('').trigger('input');
        // $('#es-org').empty();
        $('#es-org').select2();
        $('#es-sorgite').html("<option selected disabled value=''>Select Organization</option>").prop('disabled',true);
        $('#es-site').empty();
        $('#es-site').select2();
        $('#es-site').html("<option selected disabled value=''>Select Site</option>").prop('disabled',true);
        if(orgId)
        {
            fetchOrganizationSites(orgId, '#es-site', function(data) {
                $('#es-site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', false);
                $.each(data, function(key, value) {
                    $('#es-site').append('<option value="' + value.id + '">' + value.name + '</option>');
                });
            });
        }
        else{
            fetchOrganizations(null,null,'#es-org', function(data) {
                var options = ["<option selected disabled value=''>Select Organization</option>"];
                $.each(data, function(key, value) {
                    options.push('<option value="' + value.id + '">' + value.organization + '</option>');
                });
                $('#es-org').html(options.join('')).trigger('change'); // This is for Select2
            });
           
            OrgChangeSites('#es-org', '#es-site', '#add_qualificationSetup');
        }
        $('#show_emp').empty();
        $('#show_emp').html("<option selected disabled value=''>Select Employee</option>").prop('disabled',true);
        SiteChangeEmployees('#es-site', '#show_emp', '#add_empSalary');
        $('#add-empSalary').modal('show');
    });
    //Open Add Employee Salary Modal

    //Add Employee Salary
    $('#add_empSalary').submit(function(e) {
        e.preventDefault(); // Prevent the form from submitting normally
        var data = SerializeForm(this);
        var resp = true;
        $(data).each(function(i, field){
            if (((field.value == '') || (field.value == null)) && (field.name != 'salary_remarks'))
            {
                var FieldName = field.name;
                FieldName = field.name.replace('[]', '');
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                $( 'textarea[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('textarea[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $( 'textarea[name= "' +FieldName +'"' ).addClass('requirefield');
                resp = false;
            }
        });

        if(resp != false)
        {
            $.ajax({
                url: "/hr/addempsalary",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {
                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-empSalary').modal('hide');
                                $('#view-empSalary').DataTable().ajax.reload();
                                $('#add_empSalary').find('select').val($('#add_empSalary').find('select option:first').val()).trigger('change');
                                $('#add_empSalary')[0].reset();
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_empSalary').find('select').val($('#add_empSalary').find('select option:first').val()).trigger('change');
                                $('#add_empSalary')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Employee Salary

    // View Employee Salary Data
    var viewempSalary =  $('#view-empSalary').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/hr/viewemployeesalary',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            { data: 'additions', name: 'additions' },
            { data: 'deductions', name: 'deductions' },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "230px"
            },
            {
                targets: 2,
                width: "300px"
            },
            {
                targets: 3,
                width: "350px"
            },
            {
                targets: 5,
                width: "350px"
            }
        ]
    });

    viewempSalary.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    viewempSalary.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    viewempSalary.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Employee Salary Data

    // Update Employee Salary Status
    $(document).on('click', '.empsalary_status', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/hr/empsalary-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
                var status = xhr.status;
                if(status == 200)
                {
                    $('#view-empSalary').DataTable().ajax.reload();
                }
            },
            error: function(xhr, status, error) {
                console.log(error);
            }
        });

    });
    // Update Employee Salary Status

    //Update Employee Salary Modal
    $(document).on('click', '.edit-empSalary', function() {
        var empSalaryId = $(this).data('empsalary-id');
        var url = '/hr/updatesalarymodal/' + empSalaryId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.edt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('#usalary-id').val(response.id);
                $.each(response.additions, function(name, value) {
                    $('#' + name).val(value);
                    // $('#' + name).siblings('.amount_conversion').text(value);
                });
        
                // Populate deductions
                $.each(response.deductions, function(name, value) {
                    $('#' + name).val(value);
                    // $('#' + name).siblings('.amount_conversion').text(value);
                });
                // $('.uempSalary').val(response.salary).trigger('input');
                $('#edit-empSalary').modal('show');
                $('#ajax-loader').hide();

            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Employee Salary Modal

    //Update Employee Salary
    $('#u_empSalary').on('submit', function (event) {
        event.preventDefault();
        var formData = $(this).serializeArray();
        var salaryId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'usalary-id') {
                salaryId = formData[i].value;
                break;
            }
        }
        var url = 'hr/update-empsalary/' + salaryId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-empSalary').modal('hide');
                            $('#view-empSalary').DataTable().ajax.reload(); // Refresh DataTable
                            $('#u_empSalary')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Employee Salary

    //Open Add Employee Documents Modal
    $(document).on('click', '.add-empDocuments', function() {
        $('.dropify').dropify();
        $('#file-names').empty();
        var orgId = $('#ed_org').val();
        $('#ed-site').empty();
        $('#ed-site').select2();
        $('#ed-site').html("<option selected disabled value=''>Select Site</option>").prop('disabled',true);
        if(orgId)
        {
            fetchOrganizationSites(orgId, '#ed-site', function(data) {
                $('#ed-site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', false);
                $.each(data, function(key, value) {
                    $('#ed-site').append('<option value="' + value.id + '">' + value.name + '</option>');
                });
            });
        }
        else{
            $('#ed_org').empty();
            $('#ed_org').select2();
            fetchOrganizations(null,null,'#ed_org', function(data) {
                var options = ["<option selected disabled value=''>Select Organization</option>"];
                $.each(data, function(key, value) {
                    options.push('<option value="' + value.id + '">' + value.organization + '</option>');
                });
                $('#ed_org').html(options.join('')).trigger('change'); // This is for Select2
            });
            
            OrgChangeSites('#ed_org', '#ed-site', '#add_empDocuments');
        }
        $('#empid-document').empty();
        $('#empid-document').html("<option selected disabled value=''>Select Employee</option>").prop('disabled',true);
        SiteChangeEmployees('#ed-site', '#empid-document', '#add_empDocuments');
        $('#add-empDocuments').modal('show');
    });

    $(document).on('click', '.downloadempDocuments', function () {
        var attachmentPaths = $(this).data('path'); // Get the file paths from the button's data attribute
        var id = $(this).data('id'); // Get the ID from the button's data attribute
    
        if (attachmentPaths) {
            // Split the attachmentPaths by commas
            var files = attachmentPaths.split(',');
    
            // Iterate over each file and trigger a download
            files.forEach(function (file) {
                var tempLink = document.createElement('a');
                tempLink.href = '/assets/emp/documents/' + id + '_' + file.trim(); // Combine the ID and file name
                console.log(tempLink.href); // Log the file path for debugging
                tempLink.download = file.trim(); // Set the download file name
                tempLink.target = '_blank'; // Open in a new tab if necessary
                tempLink.click(); // Trigger the download
            });
        } else {
            Swal.fire({
                text: 'No attachments available for download.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        }
    });
    //Open Add Employee Documents Modal

    //Add Employee Documents
    $('#add_empDocuments').submit(function(e) {
        e.preventDefault(); 
        var data = new FormData(this);
        var orgId = $('#ed_org').val();
        console.log(orgId);

        data.append('ed_org', orgId);

        // if ($('.userOrganization').css('display') === 'none') {
        //     data.append('ed_org', $('#ed_org').val());
        // }
        $.ajax({
            url: "/hr/addempdocuments",
            method: "POST",
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: data,
            processData: false,
            contentType: false, 
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function(response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#add-empDocuments').modal('hide');
                            $('#view-empDocuments').DataTable().ajax.reload();
                            $('#add_empDocuments').find('select').val($('#add_empDocuments').find('select option:first').val()).trigger('change');
                            $('#add_empDocuments')[0].reset();
                            $('.dropify').dropify(); 
                            $('.text-danger').hide();
                        }
                    });
                }
                else if (fieldName == 'info')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#add_empDocuments').find('select').val($('#add_empDocuments').find('select option:first').val()).trigger('change');
                            $('#add_empDocuments')[0].reset();
                        }
                    });
                }
            },
            error: function(error) {
                if (error.responseJSON && error.responseJSON.errors) {
                    $('.text-danger').show();
                    var errors = error.responseJSON.errors;
                    for (var fieldName in errors) {
                        var fieldErrors = errors[fieldName];
                        for (var i = 0; i < fieldErrors.length; i++) {
                            fieldName = '#'+fieldName + '_error';
                            $(fieldName).text(fieldErrors[i]);
                        }
                    }
                    Swal.close();
                }
            }
        });
    });
    //Add Employee Documents

    // View Employee Documents
    var viewempDocuments =  $('#view-empDocuments').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/hr/viewempdocument/',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'empDetails', name: 'empDetails' },
            { data: 'desc', name: 'desc' },
            { data: 'documents', name: 'documents' },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "250px"
            },
            {
                targets: 2,
                width: "250px"
            },
            {
                targets: 5,
                width: "300px"
            }
        ]
    });
    viewempDocuments.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    viewempDocuments.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    viewempDocuments.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Employee Documents

    // Update Employee Documents Status
    $(document).on('click', '.ed_status ', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/hr/empdocument-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
                var status = xhr.status;
                if(status == 200)
                {
                    $('#view-empDocuments').DataTable().ajax.reload();
                }
            },
            error: function(xhr, status, error) {
                console.log(error);
            }
        });
    });
    // Update Employee Documents Status

    //Update Employee Documents Modal
    // $(document).on('click', '.edit-empDocument', function() {
    //     var Id = $(this).data('ed-id');
    //     $('#ajax-loader').show();
    //     var url = '/hr/updateempdocuments/' + Id;
    //     $.ajax({
    //         url: url,
    //         type: 'GET',
    //         dataType: 'json',
    //         success: function(response) {
    //             var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
    //             $('.edt').each(function() {
    //                 var edtElement = $(this);
    //                 edtElement.val(formattedDateTime);
    //             });
    //             $('#u_document_desc').val(response.desc);
               

    //             $('#ued-id').val(response.id);
    //             $('#ajax-loader').hide();
    //             $('#edit-empDocuments').modal('show');
    //         },
    //         error: function(jqXHR, textStatus, errorThrown) {
    //             $('#ajax-loader').hide();
    //             console.log(textStatus, errorThrown);
    //         }
    //     });
    // });

    $(document).on('click', '.edit-empDocument', function() {
        var Id = $(this).data('ed-id');
        $('#ajax-loader').show();
        var url = '/hr/updateempdocuments/' + Id;
    
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                // Set effective date
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.edt').val(formattedDateTime);
                $('#u_document_desc').val(response.desc);
                // Populate existing documents
                var documentsList = $('#existing-documents');
                documentsList.empty(); // Clear any previous entries
                // response.documents.forEach(function(doc, index) {
                //     var listItem = `
                //         <li style="margin-bottom: 10px;">
                //             <a href="/assets/emp/documents/${response.id}_${doc}" target="_blank">${doc}</a>
                //             <button type="button" class="btn btn-danger btn-sm remove-document" data-doc="${response.id}_${doc}" style="margin-left: 10px;">Remove</button>
                //         </li>`;
                //     documentsList.append(listItem);
                // });

                if (response.documents) {
                    var documents = response.documents.split(',');
                    documents.forEach(function(doc) {
                        var listItem = `
                            <li style="margin-bottom: 10px;">
                                <a href="/assets/emp/documents/${response.id}_${doc}" target="_blank">${doc}</a>
                                <button type="button" class="btn btn-danger btn-sm remove-document" data-doc="${doc}" style="margin-left: 10px;">Remove</button>
                            </li>`;
                        documentsList.append(listItem);
                    });
                }
    
                // Set hidden input for removed documents
                $('#u_empDocuments').append('<input type="hidden" name="removed_documents" id="removed-documents" value="">');
    
                $('#ued-id').val(response.id);
                $('#ajax-loader').hide();
                $('#edit-empDocuments').modal('show');
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    
    // Handle removing existing documents
    // $(document).on('click', '.remove-document', function() {
    //     var doc = $(this).data('doc');
    //     $(this).parent().remove();
    //     var removedDocuments = $('#removed-documents').val();
    //     removedDocuments = removedDocuments ? removedDocuments.split(',') : [];
    //     removedDocuments.push(doc);
    //     $('#removed-documents').val(removedDocuments.join(','));
    // });
    
    $(document).on('click', '.remove-document', function () {
        var doc = $(this).data('doc');
        
        // Check if there are more than one documents left
        if ($('.remove-document').length > 1) {
            // Remove the document element
            $(this).parent().remove();
    
            // Update the removed documents list
            var removedDocuments = $('#removed-documents').val();
            removedDocuments = removedDocuments ? removedDocuments.split(',') : [];
            removedDocuments.push(doc);
            $('#removed-documents').val(removedDocuments.join(','));
        } else {
            // Notify the user that at least one document must remain
            Swal.fire({
                icon: 'warning',
                title: 'Warning',
                text: 'At least one document must remain.',
                confirmButtonText: 'OK'
            });
        }
    });

    // Handle form submission
    $('#u_empDocuments').submit(function(e) {
        e.preventDefault();
        $('#ajax-loader').show();
        var formData = new FormData(this);
        var removedDocs = $('#removed-documents').val();
        if (removedDocs) {
            formData.append('removed_documents', removedDocs);
        }
        $.ajax({
            url: '/hr/saveempdocuments',
            type: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            processData: false,
            contentType: false,
            success: function(response) {
                $('#ajax-loader').hide();

                Swal.fire({
                    text: "Documents updated successfully",
                    icon: "success",
                    confirmButtonText: "OK"
                }).then(() => {
                    $('#edit-empDocuments').modal('hide');
                    $('#view-empDocuments').DataTable().ajax.reload();
                });
            },
            error: function(jqXHR, textStatus, errorThrown) {
                console.error(textStatus, errorThrown);
            }
        });
    });
    //Update Employee Documents Modal


    //Open Add Employee Qualification Setup
    $(document).on('click', '.addqualificationSetup', function() {
        $('#show_emp').empty();
        var orgId = $('#eq-org').val();
        if(orgId)
        {
            console.log('if');
            fetchOrganizationSites(orgId, '#eq-site', function(data) {
                $('#eq-site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', false);
                $.each(data, function(key, value) {
                    $('#eq-site').append('<option value="' + value.id + '">' + value.name + '</option>');
                });
            });
        }
        else{
            console.log('else');
            $('#eq-org').empty();
            $('#eq-org').select2();
            fetchOrganizations(null,null,'#eq-org', function(data) {
                var options = ["<option selected disabled value=''>Select Organization</option>"];
                $.each(data, function(key, value) {
                    options.push('<option value="' + value.id + '">' + value.organization + '</option>');
                });
                $('#eq-org').html(options.join('')).trigger('change'); // This is for Select2
            });
            $('#eq-site').empty();
            $('#eq-site').select2();

            $('#eq-site').html("<option selected disabled value=''>Select Site</option>").prop('disabled',true);
            OrgChangeSites('#eq-org', '#eq-site', '#add_qualificationSetup');
        }

        $('#show_emp').html("<option selected disabled value=''>Select Employee</option>").prop('disabled',true);
        SiteChangeEmployees('#eq-site', '#show_emp', '#add_qualificationSetup');
        $('#add-qualificationSetup').modal('show');

    });
    //Open Add Employee Qualification Setup

    //Add Qualification Setup
    $('#add_qualificationSetup').submit(function(e) {
        e.preventDefault(); // Prevent the form from submitting normally
        var data = SerializeForm(this);
        var resp = true;
        $(data).each(function(i, field){
            if (((field.value == '') || (field.value == null)))
            {
                var FieldName = field.name;
                FieldName = field.name.replace('[]', '');
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                $( 'textarea[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('textarea[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $( 'textarea[name= "' +FieldName +'"' ).addClass('requirefield');
            }
        });
        $(".duplicate").each(function() {
            var row = $(this);
            row.find('input, textarea, select').each(function() {
                var elem = $(this);
                var value = elem.val();
                var fieldName = elem.attr('name').replace('[]', '');
                var errorField = row.find('.' + fieldName + '_error');
                if (!value || value === "" || (elem.is('select') && value === null)) {
                    errorField.text("This field is required");
                    if (elem.is('select')) {
                        elem.next('.select2-container').find('.select2-selection').addClass('requirefield');
                        elem.on('select2:open', function() {
                            errorField.text("");
                            elem.next('.select2-container').find('.select2-selection').removeClass("requirefield");
                        });
                    }
                    else {
                        elem.addClass('requirefield');
                        elem.focus(function() {
                            errorField.text("");
                            elem.removeClass("requirefield");
                        });
                    }
                    resp = false;
                } else {
                    errorField.text("");
                    if (elem.is('select')) {
                        elem.next('.select2-container').find('.select2-selection').removeClass('requirefield');
                    } else {
                        elem.removeClass('requirefield');
                    }
                }
            });
        });

        if(resp != false)
        {
            $.ajax({
                url: "/hr/addqualification-setup",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {
                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                        var fieldName = fieldName;
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-qualificationSetup').modal('hide');
                                $('#add_qualificationSetup').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('#add_qualificationSetup')[0].reset();
                                location.reload();
                                //refresh here
                                // $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_qualificationSetup').find('select').each(function() {
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('#add_qualificationSetup')[0].reset();
                            }
                        });
                    }
                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Qualification Setup

    //View Qualification Setup
    $('#viewempQualification').on('change', function() {
        var EmployeeId = $(this).val();
        LoadEmployeeQualification(EmployeeId);

    });
    //View Qualification Setup

    //Update Qualification Setup
    $('#updateQualification').submit(function(e) {
        e.preventDefault();
        var data = $(this).serializeArray();
        var empId = null;
        for (var i = 0; i < data.length; i++) {
            if (data[i].name === 'empId') {
                empId = data[i].value;
                break; // Once you find the first occurrence of empId, you can break out of the loop.
            }
        }
        $.ajax({
            url: "/hr/updatequalification-setup",
            method: "POST",
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: data,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function(response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#updateQualification')[0].reset();
                            $('.profiletimeline').empty();
                            LoadEmployeeQualification(empId);
                        }
                    });
                }
                else if (fieldName == 'info')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#updateQualification')[0].reset();
                        }
                    });
                }
            },
            error: function(error) {
                console.log(error);
            }
        });

    });
    //Update Qualification Setup

    //Open Add Employee Medical License Setup
    $(document).on('click', '.addmedicalLicense', function() {
        var orgId = $('#em-org').val();
        if(orgId)
        {
            fetchOrganizationSites(orgId, '#em-site', function(data) {
                $('#em-site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', false);
                $.each(data, function(key, value) {
                    $('#em-site').append('<option value="' + value.id + '">' + value.name + '</option>');
                });
            });
        }
        else{
            $('#em-org').empty();
            $('#em-org').select2();
            fetchOrganizations(null,null,'#em-org', function(data) {
                var options = ["<option selected disabled value=''>Select Organization</option>"];
                $.each(data, function(key, value) {
                    options.push('<option value="' + value.id + '">' + value.organization + '</option>');
                });
                $('#em-org').html(options.join('')).trigger('change');
            });
            $('#em-site').empty();
            $('#em-site').select2();
            $('#em-site').html("<option selected disabled value=''>Select Site</option>").prop('disabled',true);
            OrgChangeSites('#em-org', '#em-site', '#add_medicalLicense');
        }
        $('#show_emp').empty();
        $('#show_emp').html("<option selected disabled value=''>Select Employee</option>").prop('disabled',true);
        SiteChangeEmployees('#em-site', '#show_emp', '#add_medicalLicense');
        $('#add-medicalLicense').modal('show');
    });
    //Open Add Employee Medical License Setup

    //Add Employee Medical License
    $('#add_medicalLicense').submit(function(e) {
        e.preventDefault(); // Prevent the form from submitting normally
        var data = SerializeForm(this);
        var resp = true;
        $(data).each(function(i, field){
            if (((field.value == '') || (field.value == null)))
            {
                var FieldName = field.name;
                FieldName = field.name.replace('[]', '');
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                $( 'textarea[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('textarea[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $( 'textarea[name= "' +FieldName +'"' ).addClass('requirefield');
            }
        });

        $(".duplicate").each(function() {
            var row = $(this);
            row.find('input, textarea, select').each(function() {
                var elem = $(this);
                var value = elem.val();
                var fieldName = elem.attr('name').replace('[]', '');
                var errorField = row.find('.' + fieldName + '_error');
                if (!value || value === "" || (elem.is('select') && value === null)) {
                    errorField.text("This field is required");
                    elem.addClass('requirefield');
                    elem.focus(function() {
                        errorField.text("");
                        elem.removeClass("requirefield");
                    });
                    resp = false;
                }
                else {
                    errorField.text("");
                    if (elem.is('select')) {
                        elem.next('.select2-container').find('.select2-selection').removeClass('requirefield');
                    } else {
                        elem.removeClass('requirefield');
                    }
                }
            });
        });

        if(resp != false)
        {
            $.ajax({
                url: "/hr/addmedical-license",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {
                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                        var fieldName = fieldName;
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-medicalLicense').modal('hide');
                                $('#add_medicalLicense').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('#add_medicalLicense')[0].reset();
                                location.reload();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_medicalLicense').find('select').each(function() {
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('#add_medicalLicense')[0].reset();
                            }
                        });
                    }
                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Employee Medical License


    //View Medical License Setup
    $('#viewempMedicalLicense').on('change', function() {
        var EmployeeId = $(this).val();
        LoadEmployeeMedicalLicense(EmployeeId);

    });
    //View Medical License Setup

    //Update Medical License Setup
    $('#updateMedicalLicense').submit(function(e) {
        e.preventDefault();
        var data = $(this).serializeArray();
        var empId = null;
        for (var i = 0; i < data.length; i++) {
            if (data[i].name === 'empId') {
                empId = data[i].value;
                break;
            }
        }
        $.ajax({
            url: "/hr/updatemedical-license",
            method: "POST",
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: data,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function(response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#updateMedicalLicense')[0].reset();
                            $('.profiletimeline').empty();
                            LoadEmployeeMedicalLicense(empId);
                        }
                    });
                }
                else if (fieldName == 'info')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#updateMedicalLicense')[0].reset();
                        }
                    });
                }
            },
            error: function(error) {
                console.log(error);
            }
        });

    });
    //Update Medical License Setup

    //Open Add Employee CC Setup
    $(document).on('click', '.addEmpCC', function() {
        var orgId = $('#empcc_org').val();
        if(orgId)
        {
            $('#emp_headcountsite').html("<option selected disabled value=''>Select Head Count Site</option>").prop('disabled', false);
            fetchOrganizationSites(orgId, '#emp_headcountsite', function(data) {
                $.each(data, function(key, value) {
                    $('#emp_headcountsite').append('<option value="' + value.id + '">' + value.name + '</option>');
                });
            });
            $('.empcc_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', false);
            fetchOrganizationSites(orgId, '.empcc_site', function(data) {
                $.each(data, function(key, value) {
                    $('.empcc_site').append('<option value="' + value.id + '">' + value.name + '</option>');
                });
            });
        }
        else{
            $('#empcc_org').empty();
            $('#empcc_org').select2();
            fetchOrganizations(null,null,'#empcc_org', function(data) {
                var options = ["<option selected disabled value=''>Select Organization</option>"];
                $.each(data, function(key, value) {
                    options.push('<option value="' + value.id + '">' + value.organization + '</option>');
                });
                $('#empcc_org').html(options.join('')).trigger('change');
            });
            $('#emp_headcountsite').empty();
            $('#emp_headcountsite').select2();
            $('#emp_headcountsite').html("<option selected disabled value=''>Select Head Count Site</option>").prop('disabled',true);
            OrgChangeSites('#empcc_org', '#emp_headcountsite', '#add_medicalLicense');
            $('.empcc_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', true);
            OrgChangeSites('#empcc_org', '.empcc_site', '#add_medicalLicense');
        }
        $('#show_emp').empty();
        $('#show_emp').select2();
        $('#show_emp').html("<option selected disabled value=''>Select Employee</option>").prop('disabled',true);
        SiteChangeEmployees('#emp_headcountsite', '#show_emp', '#add_empCC');
        $('.emp_costcenter').html("<option selected disabled value=''>Select Cost Center</option>").prop('disabled', true);
        $('#add-empcc').modal('show');
    });
    //Open Add Employee CC Setup

    //Add Employee CC
    $('#add_empCC').submit(function(e) {
        e.preventDefault(); // Prevent the form from submitting normally
        var data = SerializeForm(this);
       
        // var Employee = $('#show_emp');
        // var empErrorID = $('#emp-id_error');
        // var resp = true;

        // if (!Employee.val() || Employee.val() === "" || Employee.val() === null) {
        //     empErrorID.text("This field is required");
        //     Employee.next('.select2-container').find('.select2-selection').addClass('requirefield');

        //     Employee.on('select2:open', function() {
        //         empErrorID.text("");
        //         Employee.next('.select2-container').find('.select2-selection').removeClass("requirefield");
        //     });

        //     resp = false;
        // } else {
        //     empErrorID.text("");
        //     Employee.next('.select2-container').find('.select2-selection').removeClass('requirefield');
        // }

        var resp = true;
        $(".duplicate").each(function() {
            var row = $(this);
            row.find('input, textarea, select').each(function() {
                var elem = $(this);
                var value = elem.val();
                var fieldName = elem.attr('name').replace('[]', '');
                var errorField = row.find('.' + fieldName + '_error');
                if (!value || value === "" || (elem.is('select') && value === null)) {
                    errorField.text("This field is required");
                    if (elem.is('select')) {
                        elem.next('.select2-container').find('.select2-selection').addClass('requirefield');
                        elem.on('select2:open', function() {
                            errorField.text("");
                            elem.next('.select2-container').find('.select2-selection').removeClass("requirefield");
                        });
                    }
                    else {
                        elem.addClass('requirefield');
                        elem.focus(function() {
                            errorField.text("");
                            elem.removeClass("requirefield");
                        });
                    }
                    resp = false;
                } else {
                    errorField.text("");
                    if (elem.is('select')) {
                        elem.next('.select2-container').find('.select2-selection').removeClass('requirefield');
                    } else {
                        elem.removeClass('requirefield');
                    }
                }
            });
        });
        $(data).each(function(i, field){
            if ((field.value == '') || (field.value == null))
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
              
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })

                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                resp = false;
            }
        });

       

        if(resp != false)
        {
            $.ajax({
                url: "/hr/addempcc",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {
                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                        var fieldName = fieldName;
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                location.reload();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        // }).then((result) => {
                        //     if (result.isConfirmed) {
                        //         $('#add_empCC').find('select').each(function() {
                        //             $(this).val($(this).find('option:first').val()).trigger('change');
                        //         });
                        //         $('#add_empCC')[0].reset();
                        //     }
                        });
                    }
                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Employee CC

    //View Employee CC
    $('#viewempCC').on('change', function() {
        var EmployeeId = $(this).val();
        LoadEmployeeCostCenter(EmployeeId);
    });
    //View Employee CC

    //Update Employee CC
    $('#updateEmpCC').submit(function(e) {
        e.preventDefault();
        var data = $(this).serializeArray();
        var empId = null;
        for (var i = 0; i < data.length; i++) {
            if (data[i].name === 'empId') {
                empId = data[i].value;
                break; // Once you find the first occurrence of empId, you can break out of the loop.
            }
        }
        $.ajax({
            url: "/hr/updateempcc",
            method: "POST",
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: data,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function(response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#updateEmpCC')[0].reset();
                            $('.profiletimeline').empty();
                            LoadEmployeeCostCenter(empId);
                        }
                    });
                }
                else if (fieldName == 'info')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    });
                }
            },
            error: function(error) {
                console.log(error);
            }
        });

    });
    //Update Employee CC

    //Employee Inventory Location Allocation
    $('.site_ela,.invSite').html("<option selected disabled value=''>Select Site</option>").prop('disabled', true);
    OrgChangeSites('.org_ela', '.site_ela', '#emp_locationallocation');
    OrgChangeSites('.org_ela', '.invSite', '#emp_locationallocation');

    $(document).on('click', '.emp-locationAllocation', function() {
        $('.duplicate').not(':first').remove();
        var orgId = $('.org_ela').val();
        if(orgId)
        {
            $('.emp_location').hide(); 
            fetchOrganizationSites(orgId, '.site_ela, .invSite', function(data) {
                $('.site_ela, .invSite').html("<option selected disabled value=''>Select Site</option>").prop('disabled', false);
                $.each(data, function(key, value) {
                    $('.site_ela, .invSite').append('<option value="' + value.id + '">' + value.name + '</option>');
                });
            });

            fetchServiceLocations(orgId, '.location_ela_value', function(data) {
                if (data && data.length > 0) {
                    $('.location_ela_value').prop('disabled', false);
                    $('#multiServicelocation').empty();

                    if ($.fn.DataTable.isDataTable('#emplocationallocationtable')) {
                        $('#emplocationallocationtable').DataTable().clear().destroy(); 
                    }
                    data.forEach(item => {
                        var embedData = `
                            <tr style="font-size:14px;cursor:pointer;">
                                <td>
                                    <div class="custom-control custom-checkbox p-1">
                                        <input type="checkbox" name="selectedServiceLocation[]" data-id="${item.id}" data-name="${item.name}" class="custom-control-input" id="ela_${item.id}">
                                        <label class="custom-control-label" for="ela_${item.id}"></label>
                                    </div>
                                </td>
                                <td>${item.name}</td>
                            </tr>`;

                        
                        $('#multiServicelocation').append(embedData);
                    });
                    $('#multiServicelocation').off('click', 'tr').on('click', 'tr', function(e) {
                        let $checkbox = $(this).find('input[type="checkbox"]');
                        $checkbox.prop('checked', !$checkbox.prop('checked')).trigger('change');
                    });
                    $('#emplocationallocationtable').DataTable({
                        paging: false,
                        searching: true, 
                        ordering: true, 
                        columnDefs: [
                            { orderable: false, targets: [0] } 
                        ]
                    });
                } 
               
            });
        }
        else{
            $('.emp_location').show(); 
            fetchOrganizations(null,null,'.org_ela', function(data) {
                var options = ["<option selected disabled value=''>Select Organization</option>"];
                $.each(data, function(key, value) {
                    options.push('<option value="' + value.id + '">' + value.organization + '</option>');
                });
                $('.org_ela').html(options.join('')).trigger('change');
            });

            $('input[name="location_ela_value"]').prop('disabled', true);
            OrganizationChangServiceLocation('.org_ela', '.location_ela_value', '#emp_locationallocation');
        }
        $('.emp_ela').empty();
        $('.service_sa').select2();
        $('.emp_ela').html("<option selected disabled value=''>Select Employee</option>").prop('disabled',true);

        SiteChangeEmployees('.site_ela', '.emp_ela', '#emp_locationallocation');
        $('input[name="location_ela_value"]').val('');
        $('input[name="location_ela[]"]').val('');
        $('#empLocationAllocation').modal('show');
    });

    $('#emp_locationallocation').submit(function(e) {
        e.preventDefault(); // Prevent the form from submitting normally
        var data = SerializeForm(this);
       
        var resp = true;
        $(".duplicate").each(function() {
            var row = $(this);
            row.find('input, textarea, select').each(function() {
                var elem = $(this);
                var value = elem.val();
                var fieldName = elem.attr('name').replace('[]', '');
                var errorField = row.find('.' + fieldName + '_error');
                if (!value || value === "" || (elem.is('select') && value === null)) {
                    errorField.text("This field is required");
                    if (elem.is('select')) {
                        elem.next('.select2-container').find('.select2-selection').addClass('requirefield');
                        elem.on('select2:open', function() {
                            errorField.text("");
                            elem.next('.select2-container').find('.select2-selection').removeClass("requirefield");
                        });
                    }
                    else {
                        elem.addClass('requirefield');
                        elem.focus(function() {
                            errorField.text("");
                            elem.removeClass("requirefield");
                        });
                    }
                    resp = false;
                } else {
                    errorField.text("");
                    if (elem.is('select')) {
                        elem.next('.select2-container').find('.select2-selection').removeClass('requirefield');
                    } else {
                        elem.removeClass('requirefield');
                    }
                }
            });
        });
        $(data).each(function(i, field){
            if ((field.value == '') || (field.value == null))
            {
                var FieldName = field.name;
                var FieldID = '.'+FieldName + "_error";
              
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })

                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                resp = false;
            }
        });
        if(resp != false)
        {
            $.ajax({
                url: "/hr/allocateemp-location",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {

                    console.log(response);

                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#empLocationAllocation').modal('hide');
                                $('#view-locationallocation').DataTable().ajax.reload();
                                $('#emp_locationallocation').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('#emp_locationallocation')[0].reset();
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#emp_locationallocation').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('#emp_locationallocation')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });

    $('#viewempLocation').on('change', function() {
        var EmployeeId = $(this).val();
        LoadEmpAllocatedLocation(EmployeeId);
    });

    //Update Employee Location
    $('#updateEmpLocation').submit(function(e) {
        e.preventDefault();
        var data = $(this).serializeArray();
        var empId = null;
        for (var i = 0; i < data.length; i++) {
            if (data[i].name === 'empId') {
                empId = data[i].value;
                break; // Once you find the first occurrence of empId, you can break out of the loop.
            }
        }
        $.ajax({
            url: "/hr/updateemplocation",
            method: "POST",
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: data,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function(response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#updateEmpLocation')[0].reset();
                            $('.profiletimeline').empty();
                            LoadEmpAllocatedLocation(empId);
                        }
                    });
                }
                else if (fieldName == 'info')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    });
                }
            },
            error: function(error) {
                console.log(error);
            }
        });

    });
    //Update Employee Location

    // var AllocateEmpLocation =  $('#view-locationallocation').DataTable({
    //     processing: true,
    //     serverSide: true,
    //     ajax: '/hr/viewallocatedemplocation',
    //     order: [[0, 'desc']],
    //     columns: [
    //         { data: 'id_raw', name: 'id_raw', visible: false },
    //         { data: 'id', name: 'id' },
    //         { data: 'allocatioLocations', name: 'allocatioLocations' },
    //         { data: 'status', name: 'status' },
    //         { data: 'action', name: 'action', orderable: false, searchable: false }
    //     ],
    //     columnDefs: [
    //         {
    //             targets: 1,
    //             width: "200px"
    //         },
    //         {
    //             targets: 2,
    //             width: "500px"
    //         },
    //         {
    //             targets: 4,
    //             width: "250px"
    //         }
    //     ]
    // });

    // AllocateEmpLocation.on('draw.dt', function() {
    //     $('[data-toggle="popover"]').popover({
    //         html: true
    //     });
    // });
    // // Show the loader before an AJAX request is made
    // AllocateEmpLocation.on('preXhr.dt', function() {
    //     $('#ajax-loader').show();
    // });
    // // Hide the loader after the AJAX request is complete
    // AllocateEmpLocation.on('xhr.dt', function() {
    //     $('#ajax-loader').hide();
    // });

    // $(document).on('click', '.emplocation_status', function() {
    //     var id = $(this).data('id');
    //     var status = $(this).data('status');
    //     var data = {id: id,status: status};

    //     $.ajax({
    //         url: '/hr/ela-status',
    //         method: 'GET',
    //         data: data,
    //         beforeSend: function() {
    //             $('#ajax-loader').show();
    //         },
    //         success: function(response,textStatus, xhr) {
    //         var status = xhr.status;
    //             if(status == 200)
    //             {
    //                 $('#view-locationallocation').DataTable().ajax.reload();
    //             }
    //             },
    //             error: function(xhr, status, error) {
    //                 console.log(error);
    //         }
    //     });

    // });
    //Employee Inventory Location Allocation


    //Open Add Allocate Service Setup
    $('#site_sa').html("<option selected disabled value=''>Select Site</option>").prop('disabled', true);
    OrgChangeSites('#org_sa', '#site_sa', '#emp_serviceallocation');

    $(document).on('click', '.emp-serviceallocation', function() {
        var orgId = $('#org_sa').val();
        $('#emp_services').show(); 
        
        if(orgId)
        {
            fetchOrganizationSites(orgId, '#site_sa', function(data) {
                $('#site_sa').html("<option selected disabled value=''>Select Site</option>").prop('disabled', false);
                $.each(data, function(key, value) {
                    $('#site_sa').append('<option value="' + value.id + '">' + value.name + '</option>');
                });
            });
        }
        else{
            fetchOrganizations(null,null,'#org_sa', function(data) {
                var options = ["<option selected disabled value=''>Select Organization</option>"];
                $.each(data, function(key, value) {
                    options.push('<option value="' + value.id + '">' + value.organization + '</option>');
                });
                $('#org_sa').html(options.join('')).trigger('change');
            });
        }
        $('#emp_sa').empty();
        $('#service_sa').select2();
        $('#emp_sa').html("<option selected disabled value=''>Select Employee</option>").prop('disabled',true);

        SiteChangeEmployees('#site_sa', '#emp_sa', '#emp_serviceallocation');

        $('input[name="service_sa_value"]').prop('disabled', true);
        EmployeeChangeMultiSelectService('#emp_sa', '#site_sa', '#service_sa_value', '#emp_serviceallocation');
        
        $('#empserviceallocation').modal('show');
    });
    //Open Add Allocate Service Setup

    //Allocate Service
    $('#multiService').on('change', 'input[name="selectedServices[]"]', function() {
        updateHiddenServices();
    });

    $('#selectAllempServiceAllocation').on('change', function() {
        $('input[name="selectedServices[]"]').prop('checked', $(this).prop('checked')); 
        updateHiddenServices();
    });
    
    $('#emp_serviceallocation').submit(function(e) {
        e.preventDefault();
        updateHiddenServices();
        var data = SerializeForm(this);
        var resp = true;
        $(data).each(function(i, field){
            var FieldName = field.name;
            var fieldValue = field.value;
            if ((fieldValue == '' || fieldValue == null || fieldValue === 'undefined') && field.name != 'service_sa[]')
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });

                resp = false;
            }
        });


        if(resp != false)
        {
            $.ajax({
                url: "/hr/allocateemp-service",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {

                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#empserviceallocation').modal('hide');
                                $('#view-allocatedservice').DataTable().ajax.reload();
                                $('#emp_serviceallocation').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('#emp_serviceallocation')[0].reset();
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#emp_serviceallocation').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('#emp_serviceallocation')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Allocate Service

    // View Allocated Service
    var AllocateService =  $('#view-allocatedservice').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/hr/viewallocatedservice',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            { data: 'services', name: 'services' ,render: function(data, type, row) {
                return data.charAt(0).toUpperCase() + data.slice(1);
            }},
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "200px"
            },
            {
                targets: 2,
                width: "500px"
            },
            {
                targets: 4,
                width: "250px"
            }
        ]
    });

    AllocateService.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    AllocateService.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    AllocateService.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Allocated Service

    // Update Allocated Service Status
    $(document).on('click', '.serviceallocation_status', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/hr/sa-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
            var status = xhr.status;
                if(status == 200)
                {
                    $('#view-allocatedservice').DataTable().ajax.reload();
                }
                },
                error: function(xhr, status, error) {
                    console.log(error);
            }
        });

    });
    // Update Allocated Service Status

    // Update Allocated Service Modal
    $('input[name="uselectedServices[]"]').change(function() {
        updateHiddenUpdatedServiceModes();
    });

    $(document).on('click', '.edit-serviceallocation', function() {
        $('input[name="uselectedServices[]"]').prop('checked', false);
        $('#umultiService').empty(); 
        $( 'input[name= "uservice_value"' ).removeClass('requirefield');
        var serviceallocationId = $(this).data('serviceallocation-id');
        $('#u_saemp').empty();
        $('#u_saservice').empty();
        $('#update_serviceallocation')[0].reset();
        $('#ajax-loader').show();
        var url = '/hr/serviceallocationmodal/' + serviceallocationId;
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                $('#ajax-loader').hide();
                var empName = response.empName;
                var empID = response.empID;
                var orgName = response.orgName;
                var orgID = response.orgID;
                var siteName = response.siteName;
                var siteId = response.siteId;
                var serviceNames = response.serviceNames;
                $('input[name="uservice_value"]').val(serviceNames);
                var serviceIds = response.serviceId;
                var serviceIDs = serviceIds.split(',');
                $('#u_saemp').val(empName);
                $('.u_sa_id').val(response.id);
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.usa_edt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });

                AllocateEmpServices(empID, siteId,'#u_saservice', function(data) {
                    if ($.fn.DataTable.isDataTable('#umultiserviceTable')) {
                        $('#umultiserviceTable').DataTable().clear().destroy(); 
                    }
                    data.forEach(item => {
                        var billingCostCenter = item.BillingCCNames  ? 
                        item.BillingCCNames .split(',').map((billingcc, index, array) => 
                            `${billingcc}${index < array.length - 1 ? '<hr class="mt-1 mb-1">' : ''}`
                        ).join('') : 
                        'No Billing Cost Center Available';  

                        var performingCostCenter = item.PerformingCCNames  ? 
                        item.PerformingCCNames .split(',').map((performingcc, index, array) => 
                            `${performingcc}${index < array.length - 1 ? '<hr class="mt-1 mb-1">' : ''}`
                        ).join('') : 
                        'No Performing Cost Center Available';  
                        
                        var serviceModes = item.ServiceModeNames ? 
                        item.ServiceModeNames.split(',').map((mode, index, array) => 
                            `${mode}${index < array.length - 1 ? '<hr class="mt-1 mb-1">' : ''}`
                        ).join('') : 
                        'No Modes Available';                       
                        var embedData = `
                            <tr style="font-size:14px;cursor:pointer;">
                                <td>
                                    <div class="custom-control custom-checkbox p-1">
                                        <input type="checkbox" name="uselectedServices[]" data-id="${item.id}" data-name="${item.name}" class="custom-control-input" id="uas_${item.id}">
                                        <label class="custom-control-label" for="uas_${item.id}"></label>
                                    </div>
                                </td>
                                <td>${item.name}</td>
                                <td>${item.ServiceTypeName}</td>
                                <td>${item.ServiceGroupName}</td>
                                <td>${billingCostCenter}</td>
                                <td>${performingCostCenter}</td>
                                <td>${serviceModes}</td>
                            </tr>`;
                        $('#umultiService').append(embedData);

                        if (serviceIDs.includes(item.id.toString())) {
                            $('#uas_' + item.id).prop('checked', true);
                        }
                        
                    });
                    $('#umultiService').off('click', 'tr').on('click', 'tr', function(e) {
                        let $checkbox = $(this).find('input[type="checkbox"]');
                        $checkbox.prop('checked', !$checkbox.prop('checked')).trigger('change');
                    });
                    $('#umultiserviceTable').DataTable({
                        paging: false,
                        searching: true, 
                        ordering: true, 
                        columnDefs: [
                            { orderable: false, targets: [0] } 
                        ]
                    });

                });

                $('#edit-serviceallocation').modal('show');
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    // Update Allocated Service Modal

    //Update Allocated Service
    $('#umultiService').on('change', 'input[name="uselectedServices[]"]', function() {
        updateHiddenUpdatedServices();
    });

    $('#update_serviceallocation').on('submit', function (event) {
        event.preventDefault();
        updateHiddenUpdatedServices();
        var formData = SerializeForm(this);
        var Id = $('.u_sa_id').val();
        var uServiceValue = $('input[name="uservice_value"]').val();
        if (!uServiceValue) {
            $( 'input[name= "uservice_value"' ).addClass('requirefield');
            return;
        }
        var url = '/hr/update-allocatedservice/' + Id;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $( 'input[name= "uservice_value"' ).removeClass('requirefield');
                            $('#edit-serviceallocation').modal('hide');
                            $('#view-allocatedservice').DataTable().ajax.reload(); // Refresh DataTable
                            $('#update_serviceallocation')[0].reset();
                            $('.text-danger').hide();
                        }
                        $('.text-danger').hide();
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Allocated Service

    //Open Service Location Setup
    $(document).on('click', '.add-servicelocation', function() {
        $('.text-danger').show();
        var orgId = $('#sl_org').val();
        if(!orgId)
        {
            $('#sl_org').empty();
            $('#sl_org').select2();
            fetchOrganizations(null,null,'#sl_org', function(data) {
                var options = ["<option selected disabled value=''>Select Organization</option>"];
                $.each(data, function(key, value) {
                    options.push('<option value="' + value.id + '">' + value.organization + '</option>');
                });
                $('#sl_org').html(options.join('')).trigger('change');
            });
        }
      
        $('#add-servicelocation').modal('show');
    });
    //Open Service Location Setup

    //Add Service Location
    $('#add_servicelocation').submit(function(e) {
        e.preventDefault();
        // var data = $(this).serializeArray();
        var data = SerializeForm(this);
        // var org = $('#sl_org').val();
        // var site = $('#sl_site').val();
        // var status = $('#inv_status').val();
        // data.push({ name: 'sl_org', value: org });
        // data.push({ name: 'sl_site', value: site });
        // data.push({ name: 'inv_status', value: status });
        var resp = true;

        $(data).each(function(i, field){
            if ((field.value == '') || (field.value == null))
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                $( 'textarea[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('textarea[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $( 'textarea[name= "' +FieldName +'"' ).addClass('requirefield');
                resp = false;
            }
        });

        if(resp != false)
        {
            $.ajax({
                url: "/services/addservicelocation",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {

                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-servicelocation').modal('hide');
                                $('#view-servicelocation').DataTable().ajax.reload();
                                $('#add_servicelocation').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('#add_servicelocation')[0].reset();
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_servicelocation').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('#add_servicelocation')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Service Location

    // View Service Location
    var ServiceLocation =  $('#view-servicelocation').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/services/viewservicelocation',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            { data: 'name', name: 'name' ,render: function(data, type, row) {
                return data.charAt(0).toUpperCase() + data.slice(1);
            }},
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "400px"
            },
            {
                targets: 4,
                width: "300px"
            }
        ]
    });

    ServiceLocation.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    ServiceLocation.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    ServiceLocation.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Service Location

    // Update Service Location Status
    $(document).on('click', '.servicelocation', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};
        $.ajax({
            url: '/services/servicelocation-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
            var status = xhr.status;
                if(status == 200)
                {
                    $('#view-servicelocation').DataTable().ajax.reload();
                }
            },
            error: function(xhr, status, error) {
                console.log(error);
            }
        });

    });
    // Update Service Location Status

    // Update Service Location Modal
    $(document).on('click', '.edit-servicelocation', function() {
        var servicelocationId = $(this).data('servicelocation-id');
        $('#u_slorg').empty();
        $('#u_invstatus').empty();
        $('#update_servicelocation')[0].reset();
        $('#ajax-loader').show();
        var url = '/services/servicelocationmodal/' + servicelocationId;
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                $('#ajax-loader').hide();
                var location = response.location;
                var orgName = response.orgName;
                var orgID = response.orgID;
                var inventoryStatus = response.inventoryStatus;
                var inventoryStatusId = response.inventoryStatusId;
                $('#u_slorg').html("<option selected value='"+orgID+"'>" + orgName + "</option>");
                $('#u_invstatus').html("<option selected value='"+inventoryStatusId+"'>" + inventoryStatus + "</option>");
                var inventoryStatusNext = inventoryStatusId == '1' ? 'No' : 'Yes';
                var inventoryStatusNextid = response.inventoryStatusId == '1' ? 0 : 1;
                $('#u_invstatus').append('<option value="' + inventoryStatusNextid + '">' + inventoryStatusNext + '</option>');
                $('#u_sl').val(response.location);
                $('.servicelocation_id').val(servicelocationId);

                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.edt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });

                fetchOrganizations(orgID,orgName,'#u_slorg', function(data) {
                    $('#u_slorg').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        $('#u_slorg').append('<option value="' + value.id + '">' + value.organization + '</option>');
                    });
                });
                $('#edit-servicelocation').modal('show');
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    // Update Service Location Modal

    //Update Service Location
    $('#update_servicelocation').on('submit', function (event) {
        event.preventDefault();
        var formData = SerializeForm(this);
        var Id = $('.servicelocation_id').val();
        var url = '/services/update-servicelocation/' + Id;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-servicelocation').modal('hide');
                            $('#view-servicelocation').DataTable().ajax.reload(); // Refresh DataTable
                            $('#update_servicelocation')[0].reset();
                            $('.text-danger').hide();
                        }
                        $('.text-danger').hide();
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Service Location

    //Open Service Location Activation Setup
    $('#sl_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', true);
    OrgChangeSites('#sl_org', '#sl_site', '#activate_cc');

    $(document).on('click', '.sl_activation', function() {
        $('#sl_value').prop('disabled', true);  
        $('#sl_value').val('');  
        $('#siteselect').show(); 
        var orgId = $('#sl_org').val();
        if(orgId)
        {
            fetchOrganizationSites(orgId, '#sl_site', function(data) {
                $('#sl_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', false);
                $.each(data, function(key, value) {
                    $('#sl_site').append('<option value="' + value.id + '">' + value.name + '</option>');
                });
            });
        }
        $('#sl_activation').modal('show');
    });

    FetchNotActivatedServiceLocation('#sl_site', '#sl_value', '#activate_sl');

    $(document).on('change', 'input[name="selectedSL[]"]', function() {
        updateHiddenServiceLocation();
    });
    //Open Service Location Activation Setup

    //Activate Service Location
    $('#activate_sl').submit(function(e) {
        e.preventDefault(); 
        updateHiddenServiceLocation();
        var data = SerializeForm(this);

        var resp = true;
        $(data).each(function(i, field){
            if ((field.value == '' || field.value == null) && field.name != 'sl_name[]') {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                resp = false;
            }

        });
        if(resp != false)
        {
            $.ajax({
                url: "/services/activatesl",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {
                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                        var fieldName = fieldName;
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#sl_activation').modal('hide');
                                window.location.reload();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#activate_sl').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('#activate_sl')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Activate Service Location

    // View ActivatedServiceLocation
    var ActivatedSLData =  $('#view-slactivation').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/services/getactivatesldata',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            { data: 'siteName', name: 'siteName' ,render: function(data, type, row) {
                return data.charAt(0).toUpperCase() + data.slice(1);
            }},
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "400px"
            },
            {
                targets: 4,
                width: "250px"
            }
        ]
    });

    ActivatedSLData.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    ActivatedSLData.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    ActivatedSLData.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View ActivatedServiceLocation

    // Update ActivateServiceLocation Status
    $(document).on('click', '.activatesl', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/services/activatesl-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
            var status = xhr.status;
                if(status == 200)
                {
                    $('#view-slactivation').DataTable().ajax.reload();
                }
                },
                error: function(xhr, status, error) {
                    console.log(error);
            }
        });

    });
    // Update ActivateServiceLocation Status

    // Update ActivateServiceLocation Modal
    $(document).on('click', '.edit-activatesl', function() {
        var activateslId = $(this).data('activatesl-id');
        $('#u_slsite').empty();
        $('#ua_servicelocation').empty();
        $('#u_slorg').empty();
        $('#update_slactivation')[0].reset();
        $('#ajax-loader').show();
        var url = '/services/activateslmodal/' + activateslId;
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                $('#ajax-loader').hide();
                var orgName = response.orgName;
                var orgID = response.orgID;
                var siteName = response.siteName;
                var siteId = response.siteId;
                var locationName = response.locationName;
                var locationID = response.locationID;
                $('.u_sl_id').val(response.id);
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.uedt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });

                $('#u_slorg').html("<option selected value='"+orgID+"'>" + orgName + "</option>");
                fetchOrganizations(orgID,orgName,'#u_slorg', function(data) {
                    $('#u_slorg').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        $('#u_slorg').append('<option value="' + value.id + '">' + value.organization + '</option>');
                    });
                });

                if (orgID) {
                    $('#u_slsite').html("<option selected value='"+siteId+"'>" + siteName + "</option>");
                    fetchSites(orgID, '#u_slsite', function(data) {
                        $.each(data, function(key, value) {
                            $('#u_slsite').append('<option value="' + value.id + '">' + value.name + '</option>');
                        });
                    }, function(error) {
                        console.log(error);
                    },response.siteId);

                    OrgChangeSites('#u_slorg', '#u_slsite', '#update_slactivation');
                }
                $('#ua_servicelocation').html("<option selected value='"+locationID+"'>" + locationName + "</option>");

                fetchInActiveSL(siteId, locationID, '#ua_servicelocation', function(data) {
                    $('#ua_servicelocation').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        $('#ua_servicelocation').append('<option value="' + value.id + '">' + value.name + '</option>');
                    });
                });
                SiteChangeServiceLocation('#u_slsite','#ua_servicelocation', '#update_slactivation');

                $('#edit-slactivation').modal('show');
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    // Update ActivateServiceLocation Modal

    //Update ActivateServiceLocation
    $('#update_slactivation').on('submit', function (event) {
        event.preventDefault();
        var formData = SerializeForm(this);
        var Id = $('.u_sl_id').val();
        var url = '/services/update-activatesl/' + Id;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-slactivation').modal('hide');
                            $('#view-slactivation').DataTable().ajax.reload(); // Refresh DataTable
                            $('#update_slactivation')[0].reset();
                            $('.text-danger').hide();
                        }
                        $('.text-danger').hide();
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update ActivateServiceLocation

    // Service Requisition Setup
    // $(document).on('click', '.add-serviceRequisitionSetup', function() {
    //     $('.text-danger').show();
    //     var orgId = $('#sr_org').val();
    //     if(!orgId)
    //     {
    //         $('#sr_org').empty();
    //         $('#sr_org').select2();
    //         fetchOrganizations(null,null,'#sr_org', function(data) {
    //             var options = ["<option selected disabled value=''>Select Organization</option>"];
    //             $.each(data, function(key, value) {
    //                 options.push('<option value="' + value.id + '">' + value.organization + '</option>');
    //             });
    //             $('#sr_org').html(options.join('')).trigger('change');
    //         });
    //     }
        
    //     $('#add-serviceRequisitionSetup').modal('show');
    // });

    // $('#add_serviceRequisitionSetup').submit(function(e) {
    //     e.preventDefault();
    //     var data = SerializeForm(this);
    //     var resp = true;

    //     $(data).each(function(i, field){
    //         if ((field.value === '' || field.value === null) && field.name !== 'sr_description') {
    //             var FieldName = field.name;
    //             var FieldID = '#'+FieldName + "_error";
    //             $(FieldID).text("This field is required");
    //             $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
    //             $( 'input[name= "' +FieldName +'"' ).focus(function() {
    //                 $(FieldID).text("");
    //                 $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
    //             })
    //             $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
    //             $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
    //                 $(FieldID).text("");
    //                 $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
    //             });
    //             resp = false;
    //         }
    //     });

    //     if(resp != false)
    //     {
    //         $.ajax({
    //             url: "/services/addservicerequisition",
    //             method: "POST",
    //             headers: {
    //                 'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
    //             },
    //             data: data,
    //             beforeSend: function() {
    //                 Swal.fire({
    //                     title: "Processing",
    //                     allowOutsideClick: false,
    //                     willOpen: () => {
    //                         Swal.showLoading();
    //                     },
    //                     showConfirmButton: false
    //                 });
    //             },
    //             success: function(response) {

    //                 for (var fieldName in response) {
    //                     var fieldErrors = response[fieldName];
    //                 }
    //                 if (fieldName == 'error')
    //                 {
    //                     Swal.fire({
    //                         text: fieldErrors,
    //                         icon: fieldName,
    //                         confirmButtonText: 'OK'
    //                     })
    //                 }
    //                 else if (fieldName == 'success')
    //                 {
    //                     Swal.fire({
    //                         text: fieldErrors,
    //                         icon: fieldName,
    //                         allowOutsideClick: false,
    //                         confirmButtonText: 'OK'
    //                     }).then((result) => {
    //                         if (result.isConfirmed) {
    //                             $('#add-serviceRequisitionSetup').modal('hide');
    //                             $('#view-serviceRequisitionSetup').DataTable().ajax.reload();
    //                             $('#add_serviceRequisitionSetup').find('select').each(function(){
    //                                 $(this).val($(this).find('option:first').val()).trigger('change');
    //                             });
    //                             $('#add_serviceRequisitionSetup')[0].reset();
    //                             $('.text-danger').hide();
    //                         }
    //                     });
    //                 }
    //                 else if (fieldName == 'info')
    //                 {
    //                     Swal.fire({
    //                         text: fieldErrors,
    //                         icon: fieldName,
    //                         confirmButtonText: 'OK'
    //                     }).then((result) => {
    //                         if (result.isConfirmed) {
    //                             $('#add_serviceRequisitionSetup').find('select').each(function(){
    //                                 $(this).val($(this).find('option:first').val()).trigger('change');
    //                             });
    //                             $('#add_serviceRequisitionSetup')[0].reset();
    //                         }
    //                     });
    //                 }

    //             },
    //             error: function(error) {
    //                 if (error.responseJSON && error.responseJSON.errors) {
    //                     $('.text-danger').show();
    //                     var errors = error.responseJSON.errors;
    //                     for (var fieldName in errors) {
    //                         var fieldErrors = errors[fieldName];
    //                         for (var i = 0; i < fieldErrors.length; i++) {
    //                             fieldName = '#'+fieldName + '_error';
    //                             $(fieldName).text(fieldErrors[i]);
    //                         }
    //                     }
    //                     Swal.close();
    //                 }
    //             }
    //         });
    //     }
    // });

    var ServiceRequisition =  $('#view-serviceRequisitionSetup').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/services/viewservicerequisition',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            { data: 'mandatory', name: 'mandatory' },
            { data: 'desc', name: 'desc' },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "300px"
            },
            {
                targets: 5,
                width: "300px"
            }
        ]
    });

    ServiceRequisition.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    ServiceRequisition.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    ServiceRequisition.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });

    $(document).on('click', '.servicerequisition', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};
        $.ajax({
            url: '/services/servicerequisition-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
            var status = xhr.status;
                if(status == 200)
                {
                    $('#view-serviceRequisitionSetup').DataTable().ajax.reload();
                }
            },
            error: function(xhr, status, error) {
                console.log(error);
            }
        });

    });

    $(document).on('click', '.edit-servicerequisition', function() {
        var servicerequisitionId = $(this).data('servicerequisition-id');
        $('#update_serviceRequisitionSetup')[0].reset();
        $('#ajax-loader').show();
        var url = '/services/servicerequisitionmodal/' + servicerequisitionId;
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                $('#ajax-loader').hide();
                $('.servicerequisition_id').val(response.id);
                var orgName = response.orgName;
                var orgID = response.orgID;
                var location = response.location;
                $('#u_srorg').html("<option selected value='"+orgID+"'>" + orgName + "</option>");
           
                var ServiceRequestStatus = response.ServiceRequestStatus;
                var ServiceRequestStatusId = response.ServiceRequestStatusId;
                $('#usr_status').html("<option selected value='"+ServiceRequestStatusId+"'>" + ServiceRequestStatus + "</option>");
                var ServiceRequestStatusNext = ServiceRequestStatusId == '1' ? 'No' : 'Yes';
                var ServiceRequestStatusNextid = response.ServiceRequestStatusId == '1' ? 0 : 1;
                $('#usr_status').append('<option value="' + ServiceRequestStatusNextid + '">' + ServiceRequestStatusNext + '</option>');

                var Description = response.Description;
                $('#usr_description').val(Description);

                var serviceId = response.serviceId;
                var serviceName = response.serviceName;
                $('#usr_service').find('option:selected').remove();
                $('#usr_service').prepend(`<option selected value="${serviceId}" selected>${serviceName}</option>`);

                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.edt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });

                fetchOrganizations(orgID,orgName,'#u_srorg', function(data) {
                    $('#u_srorg').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        $('#u_srorg').append('<option value="' + value.id + '">' + value.organization + '</option>');
                    });
                });
                $('#edit-serviceRequisitionSetup').modal('show');
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    
    $('#update_serviceRequisitionSetup').on('submit', function (event) {
        event.preventDefault();
        var formData = SerializeForm(this);
        var Id = $('.servicerequisition_id').val();
        var url = '/services/update-servicerequisition/' + Id;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-serviceRequisitionSetup').modal('hide');
                            $('#view-serviceRequisitionSetup').DataTable().ajax.reload(); // Refresh DataTable
                            $('#update_serviceRequisitionSetup')[0].reset();
                            $('.text-danger').hide();
                        }
                        $('.text-danger').hide();
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    // Service Requisition Setup

    //Open Service Location Scheduling Setup
    $(document).on('click', '.add-locationscheduling', function() {
        var orgId = $('#ss_org').val();
        if(orgId)
        {
            fetchServiceLocations(orgId, '#ss_location', function(data) {
                $('#ss_location').html("<option selected disabled value=''>Select Service Location</option>").prop('disabled', false);
                $.each(data, function(key, value) {
                    $('#ss_location').append('<option value="' + value.id + '">' + value.name + '</option>');
                });
            });
            fetchOrganizationSites(orgId, '#ss_site', function(data) {
                $('#ss_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', false);
                $.each(data, function(key, value) {
                    $('#ss_site').append('<option value="' + value.id + '">' + value.name + '</option>');
                });
            });
        }
        else{

            $('#ss_org').empty();
            $('#ss_org').select2();
            fetchOrganizations(null,null,'#ss_org', function(data) {
                var options = ["<option selected disabled value=''>Select Organization</option>"];
                $.each(data, function(key, value) {
                    options.push('<option value="' + value.id + '">' + value.organization + '</option>');
                });
                $('#ss_org').html(options.join('')).trigger('change');
            });
            $('#ss_site').empty();
            $('#ss_site').select2();
            $('#ss_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled',true);
            OrgChangeSites('#ss_org', '#ss_site', '#add_servicelocation');
            $('#ss_location').html("<option selected disabled value=''>Select Service Location</option>").prop('disabled', true);
            OrgChangeServiceLocation('#ss_org', '#ss_location', '#add_locationscheduling');

        }
        $('#add-locationscheduling').modal('show');
    });
    //Open Service Location Scheduling Setup

    //Add Service Location Scheduling
    $('#add_locationscheduling').submit(function(e) {
        e.preventDefault();
        var data = SerializeForm(this);
        var resp = true;
        $(data).each(function(i, field){
            if (((field.value == '') || (field.value == null)) && ((field.name != 'total_patient') && (field.name != 'new_patient') && (field.name != 'followup_patient') && (field.name != 'routine_patient') && (field.name != 'urgent_patient') && (field.name != 'ss_emp')))
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                resp = false;
            }
        });

        if(resp != false)
        {
            $.ajax({
                url: "/services/addlocationscheduling",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {

                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-locationscheduling').modal('hide');
                                $('#view-locationscheduling').DataTable().ajax.reload();
                                $('#add_locationscheduling').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('#add_locationscheduling')[0].reset();
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_locationscheduling').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('#add_locationscheduling')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Service Location Scheduling

    // View Service Location Scheduling
    var ServiceLocationScheduling =  $('#view-locationscheduling').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/services/viewlocationscheduling',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            { data: 'timingnvenue', name: 'timingnvenue' ,render: function(data, type, row) {
                return data.charAt(0).toUpperCase() + data.slice(1);
            }},
            { data: 'otherdetails', name: 'otherdetails' ,render: function(data, type, row) {
                return data.charAt(0).toUpperCase() + data.slice(1);
            }},
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "250px"
            },
            {
                targets: 2,
                width: "250px"
            },
            {
                targets: 5,
                width: "250px"
            }
        ]
    });

    ServiceLocationScheduling.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    ServiceLocationScheduling.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    ServiceLocationScheduling.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Service Location Scheduling

    // Update Service Location Scheduling Status
    $(document).on('click', '.locationscheduling', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};
        $.ajax({
            url: '/services/locationscheduling-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
            var status = xhr.status;
                if(status == 200)
                {
                    $('#view-locationscheduling').DataTable().ajax.reload();
                }
            },
            error: function(xhr, status, error) {
                console.log(error);
            }
        });

    });
    // Update Service Location Scheduling Status

    // Update Service Location Scheduling Modal
    $(document).on('click', '.edit-locationscheduling', function() {
        var locationschedulingId = $(this).data('locationscheduling-id');
        $('#u_ssorg').empty();
        $('#u_sssite').empty();
        $('#u_sspattern').empty();
        $('#u_sslocation').empty();
        $('#u_ssemp').empty();
        $('#update_locationscheduling')[0].reset();
        $('#ajax-loader').show();
        var url = '/services/locationschedulingmodal/' + locationschedulingId;
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                $('#ajax-loader').hide();
                var name = response.name;
                var empName = response.empName;
                var orgName = response.orgName;
                var orgID = response.orgID;
                var siteName = response.siteName;
                var siteId = response.siteId;
                var locationName = response.locationName;
                var locationId = response.locationId;
                var schedulePattern = response.schedulePattern;

                var startFormatted = moment.unix(response.startdateTime).format('MM/DD/YYYY h:mm A');
                var endFormatted = moment.unix(response.enddateTime).format('MM/DD/YYYY h:mm A');
                $('#day_time').data('daterangepicker').setStartDate(startFormatted);
                $('#day_time').data('daterangepicker').setEndDate(endFormatted);
                $('#u_ssorg').html("<option selected value='"+orgID+"'>" + orgName + "</option>");
                $('#u_sssite').html("<option selected value='"+siteId+"'>" + siteName + "</option>");
                $('#u_sslocation').html("<option selected value='"+locationId+"'>" + locationName + "</option>");
                var Pattern = schedulePattern.replace(/\b\w/g, function(match) {
                    return match.toUpperCase();
                });
                $('#u_sspattern').html("<option selected>" + Pattern + "</option>");

                if(empName != null)
                {
                    $('#u_ssemp').html("<option selected value='"+response.emp+"'>" + empName + "</option>");
                }
                $('.u_service_schedule').val(name);
                $('.u_total_patient').val(response.TotalPatientLimit);
                $('.u_new_patient').val(response.NewPatientLimit);
                $('.u_followup_patient').val(response.FollowUpPatientLimit);
                $('.u_routine_patient').val(response.RoutinePatientLimit);
                $('.u_urgent_patient').val(response.UrgentPatientLimit);
                $('.u_slocation_id').val(locationschedulingId);

                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.uedt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });


                fetchOrganizations(orgID,orgName,'#u_ssorg', function(data) {
                    $('#u_ssorg').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        $('#u_ssorg').append('<option value="' + value.id + '">' + value.organization + '</option>');
                    });
                });

                fetchSites(orgID, '#u_sssite', function(data) {
                    if (data.length > 0) {
                        $.each(data, function(key, value) {
                            $('#u_sssite').append('<option value="' + value.id + '">' + value.name + '</option>');
                        });
                    }
                    else {
                        Swal.fire({
                            text: 'Sites are not available for selected Organization',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#edit-locationscheduling').modal('hide');
                            }
                        });
                    }
                }, function(error) {
                    console.log(error);
                },siteId);

                $('#u_ssorg').off('change').on('change', function() {
                    $('#u_sssite').empty();
                    var organizationId = $(this).val();
                    fetchSites(organizationId, '#u_sssite', function(data) {
                        if (data.length > 0) {
                            $('#u_sssite').html("<option selected disabled value=''>Select Site</option>");
                            $.each(data, function(key, value) {
                                $('#u_sssite').append('<option value="' + value.id + '">' + value.name + '</option>');
                            });
                        }
                        else {
                            Swal.fire({
                                text: 'Sites are not available for selected Organization',
                                icon: 'error',
                                confirmButtonText: 'OK'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    $('#edit-locationscheduling').modal('hide');
                                }
                            });
                        }
                    }, function(error) {
                        console.log(error);
                    });
                    fetchServiceLocations(organizationId, '#u_sslocation', function(data) {
                        if (data.length > 0) {
                            $('#u_sslocation').empty();
                            $('#u_sslocation').append('<option selected disabled value="">Select Service Location</option>');
                            $.each(data, function(key, value) {
                                $('#u_sslocation').append('<option value="' + value.id + '">' + value.name + '</option>');
                            });
                            $('#u_sslocation').find('option:contains("Loading...")').remove();
                            $('#u_sslocation').prop('disabled', false);
                        }
                        else{
                            Swal.fire({
                                text: 'Service Locations are not available for selected Organization',
                                icon: 'error',
                                confirmButtonText: 'OK',
                                allowOutsideClick: false
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    $('#edit-locationscheduling').modal('hide');
                                }
                            });

                        }
                    }, function(error) {
                        console.log(error);
                    });
                });

                fetchServiceLocations(orgID, '#u_sslocation', function(data) {
                    if (data.length > 0) {
                        $.each(data, function(key, value) {
                            if(locationId != value.id)
                            {
                                $('#u_sslocation').append('<option value="' + value.id + '">' + value.name + '</option>');
                            }
                        });
                    }
                }, function(error) {
                    console.log(error);
                });

                var SchedulePatternOptions = [
                    {value: "none", label: "None"},
                    {value: "daily", label: "Daily"},
                    {value: "weekly", label: "Weekly"},
                    {value: "monday to saturday", label: "Monday To Saturday"}
                ];

                var filteredOptions = SchedulePatternOptions.filter(function(option) {
                    return option.value !== schedulePattern;
                });

                filteredOptions.forEach(function(option) {
                    $("#u_sspattern").append(new Option(option.label, option.value));
                });

                if(response.emp != null)
                {
                    $('#u_ssemp').append('<option value="">N/A</option>');
                    fetchEmployees(response.emp, '#u_ssemp', function(data) {
                        $.each(data, function(key, value) {
                            $('#u_ssemp').append('<option value="' + value.id + '">' + value.name + '</option>');
                        });
                    }, function(error) {
                        console.log(error);
                    });
                }
                else{
                    $('#u_ssemp').append('<option value="">N/A</option>');
                    fetchEmployees(0, '#u_ssemp', function(data) {
                        $.each(data, function(key, value) {
                            $('#u_ssemp').append('<option value="' + value.id + '">' + value.name + '</option>');
                        });

                    }, function(error) {
                        console.log(error);
                    });
                }



                $('#edit-locationscheduling').modal('show');
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    // Update Service Location Scheduling Modal

    //Update Service Location Scheduling
    $('#update_locationscheduling').on('submit', function (event) {
        event.preventDefault();
        var formData = SerializeForm(this);
        var Id = $('.u_slocation_id').val();
        var url = '/services/update-locationschedule/' + Id;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK',
                        allowOutsideClick:false
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-locationscheduling').modal('hide');
                            $('#view-locationscheduling').DataTable().ajax.reload(); // Refresh DataTable
                            $('#update_locationscheduling')[0].reset();
                            // $('.text-danger').hide();
                        }
                        // $('.text-danger').hide();
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Service Location Scheduling

    // Service booking
    var filterOrgId = $('#fb_org').val();
    if(filterOrgId)
    {
        fetchOrganizationSites(filterOrgId, '#fb_site', function(data) {
            $('#fb_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', false);
            $.each(data, function(key, value) {
                $('#fb_site').append('<option value="' + value.id + '">' + value.name + '</option>');
            });
        });  

        fetchOrgPatient(filterOrgId, '#fb_mrno', function(data) {
            $('#fb_mrno').html("<option selected disabled value=''>Select MR #</option>").prop('disabled', false);
            $.each(data, function(key, value) {
                $('#fb_mrno').append('<option value="' + value.mr_code + '">' + value.mr_code + ' - ' + value.name + ' - ' + value.cell_no + '</option>');
            });
        });
    }
    else{
        $('#fb_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled',true);
        OrgChangeSites('#fb_org', '#fb_site', null);
        
        $('#fb_mrno').html("<option selected disabled value=''>Select MR #</option>").prop('disabled', true);
        OrgChangeMRCode('#fb_org', '#fb_mrno', null);
    }
    // Service booking


    // Open Service Booking
    $(document).on('click', '.add-servicebooking', function() {
        // var orgId = $('#sb_org').val();
        // var orgId = $(this).data('orgid'); 
        var orgId = $('#sb_org').val() || $(this).data('orgid');
        var mrCode = $(this).data('mr');
        var orgName = $(this).data('orgname'); 
        var siteName = $(this).data('sitename'); 
        var siteId = $(this).data('siteid'); 
        var ServiceMode = $(this).data('servicemode'); 
        var ServiceModeId = $(this).data('servicemodeid'); 
        var Physician = $(this).data('empname'); 
        var PhysicianId = $(this).data('empid'); 
        var Service = $(this).data('service'); 
        var ServiceId = $(this).data('serviceid'); 
        var billingCC = $(this).data('billingcc'); 
        var billingCCId = $(this).data('billingccid'); 
        if(orgId)
        {
            if (mrCode && orgId && orgName && siteId && siteName && ServiceModeId && ServiceMode && PhysicianId && Physician && ServiceId && Service && billingCCId && billingCC) {
                $('#sb_org').html('<option value="' + orgId + '" selected>' + orgName + '</option>').prop('disabled', true);
                $('#sb_site').html('<option value="' + siteId + '" selected>' + siteName + '</option>').prop('disabled', true);
                $('#sb_mr').html('<option value="' + mrCode + '" selected>' + mrCode + '</option>').prop('disabled', true);
                $('#sb_serviceMode').html('<option value="' + ServiceModeId + '" selected>' + ServiceMode + '</option>').prop('disabled', true);
                $('#sb_emp').html('<option value="' + PhysicianId + '" selected>' + Physician + '</option>').prop('disabled', true);
                $('#sb_service').html('<option value="' + ServiceId + '" selected>' + Service + '</option>').prop('disabled', true);
                $('#sb_billingCC').html('<option value="' + billingCCId + '" selected>' + billingCC + '</option>').prop('disabled', true);
            } 
            else {
                fetchOrganizationSites(orgId, '#sb_site', function(data) {
                    $('#sb_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', false);
                    $.each(data, function(key, value) {
                        $('#sb_site').append('<option value="' + value.id + '">' + value.name + '</option>');
                    });
                });

                fetchOrgPatient(orgId, '#sb_mr', function(data) {
                    $('#sb_mr').html("<option selected disabled value=''>Select MR #</option>").prop('disabled', false);
                    $.each(data, function(key, value) {
                        $('#sb_mr').append('<option value="' + value.mr_code + '">' + value.mr_code + ' - ' + value.name + ' - ' + value.cell_no + '</option>');
                    });
                });
                            
                $('#sb_emp').html("<option selected disabled value=''>Select Physician</option>").prop('disabled', true);
                SiteChangeEmployees('#sb_site', '#sb_emp', '#add_servicebooking');

                $('#sb_service').html("<option selected disabled value=''>Select Service</option>").prop('disabled', true);
                SiteChangeService('#sb_site', '#sb_service', '#add_servicebooking');

                $('#sb_serviceMode').html("<option selected disabled value=''>Select Service Mode</option>").prop('disabled', true);
                ServiceChangeServiceModes('#sb_site', '#sb_service', '#sb_serviceMode', '#add_servicebooking');
                
                $('#sb_billingCC').html("<option selected disabled value=''>Select Billing Cost Center</option>").prop('disabled', true);
                ServiceChangeCostCenter('#sb_site', '#sb_service', '#sb_billingCC', '#add_servicebooking');
            }
            
            fetchServiceLocations(orgId, '#sb_location', function(data) {
                $('#sb_location').html("<option selected disabled value=''>Select Service Location</option>").prop('disabled', false);
                $.each(data, function(key, value) {
                    $('#sb_location').append('<option value="' + value.id + '">' + value.name + '</option>');
                });
            });

        }
        else{
            $('#sb_org').empty();
            $('#sb_org').select2();
            fetchOrganizations(null,null,'#sb_org', function(data) {
                var options = ["<option selected disabled value=''>Select Organization</option>"];
                $.each(data, function(key, value) {
                    options.push('<option value="' + value.id + '">' + value.organization + '</option>');
                });
                $('#sb_org').html(options.join('')).trigger('change');
            });
            $('#sb_site').empty();
            $('#sb_site').select2();
            $('#sb_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled',true);
            OrgChangeSites('#sb_org', '#sb_site', '#add_servicebooking');

            if (mrCode && orgId && orgName && siteId && siteName && ServiceModeId && ServiceMode && PhysicianId && Physician && ServiceId && Service && billingCCId && billingCC) {
                $('#sb_org').html('<option value="' + orgId + '" selected>' + orgName + '</option>').prop('disabled', true);
                $('#sb_site').html('<option value="' + siteId + '" selected>' + siteName + '</option>').prop('disabled', true);
                $('#sb_mr').html('<option value="' + mrCode + '" selected>' + mrCode + '</option>').prop('disabled', true);
                $('#sb_serviceMode').html('<option value="' + ServiceModeId + '" selected>' + ServiceMode + '</option>').prop('disabled', true);
                $('#sb_emp').html('<option value="' + PhysicianId + '" selected>' + Physician + '</option>').prop('disabled', true);
                $('#sb_service').html('<option value="' + ServiceId + '" selected>' + Service + '</option>').prop('disabled', true);
                $('#sb_billingCC').html('<option value="' + billingCCId + '" selected>' + billingCC + '</option>').prop('disabled', true);
                
                fetchServiceLocations(orgId, '#sb_location', function(data) {
                    $('#sb_location').html("<option selected disabled value=''>Select Service Location</option>").prop('disabled', false);
                    $.each(data, function(key, value) {
                        $('#sb_location').append('<option value="' + value.id + '">' + value.name + '</option>');
                    });
                });
            } 
            else {
                $('#sb_mr').html("<option selected disabled value=''>Select MR #</option>").prop('disabled', true);
                OrgChangeMRCode('#sb_org', '#sb_mr', '#add_servicebooking');

                $('#sb_emp').html("<option selected disabled value=''>Select Physician</option>").prop('disabled', true);
                SiteChangeEmployees('#sb_site', '#sb_emp', '#add_servicebooking');

                $('#sb_service').html("<option selected disabled value=''>Select Service</option>").prop('disabled', true);
                SiteChangeService('#sb_site', '#sb_service', '#add_servicebooking');

                $('#sb_serviceMode').html("<option selected disabled value=''>Select Service Mode</option>").prop('disabled', true);
                ServiceChangeServiceModes('#sb_site', '#sb_service', '#sb_serviceMode', '#add_servicebooking');
                
                $('#sb_billingCC').html("<option selected disabled value=''>Select Billing Cost Center</option>").prop('disabled', true);
                ServiceChangeCostCenter('#sb_site', '#sb_service', '#sb_billingCC', '#add_servicebooking');

                $('#sb_location').html("<option selected disabled value=''>Select Service Location</option>").prop('disabled', true);
                OrgChangeServiceLocation('#sb_org', '#sb_location', '#add_servicebooking');
            }

           
        

        }

        $('#sb_schedule').html("<option selected disabled value=''>Select Service Location Schedule</option>").prop('disabled', true);
        $('#sb_location').html("<option selected disabled value=''>Select Service Location</option>").prop('disabled', true);
        // Show Service Scheduling
        LocationChangeServiceScheduling('#sb_location', '#sb_site', '#sb_schedule', '#add_servicebooking');
        // Show Service Scheduling

        $('#add-servicebooking').modal('show');
    });
    // Open Service Booking

    //Add Service Booking
    $('#add_servicebooking').submit(function(e) {
        e.preventDefault();
        var data = SerializeForm(this);
        var resp = true;
        const excludedFields = ['sb_remarks'];
        // if (((field.value == '') || (field.value == null)))

        $(data).each(function(i, field){
            if (((field.value == '') || (field.value == null)) && !excludedFields.includes(field.name))
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                $( 'textarea[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('textarea[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $( 'textarea[name= "' +FieldName +'"' ).addClass('requirefield');
                resp = false;
            }
        });
        if(resp != false)
        {
            $.ajax({
                url: "/services/addservicebooking",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {
                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                // $('#add-servicebooking').modal('hide');
                                // $('#sb_location').empty();
                                // $('#sb_location').html("<option selected disabled value=''>Select Service Location</option>").prop('disabled', true);
                                // $('#sb_site').empty();
                                // $('#sb_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', true);
                                // $('#view-servicebooking').DataTable().ajax.reload();
                                // $('#add_servicebooking').find('select').each(function(){
                                //     $(this).val($(this).find('option:first').val()).trigger('change');
                                // });
                                // $('#add_servicebooking')[0].reset();
                                // $('.text-danger').hide();
                                location.reload();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#sb_location').empty();
                                $('#sb_location').html("<option selected disabled value=''>Select Service Location</option>").prop('disabled', true);
                                $('#sb_site').empty();
                                $('#sb_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', true);
                                $('#add_servicebooking').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('#add_servicebooking')[0].reset();
                            }
                        });
                    }
                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Service Booking

    // View Service Booking
    var ServiceBooking =  $('#view-servicebooking').DataTable({
        processing: true,
        serverSide: true,
        ajax: {
            url: '/services/viewservicebooking',
            data: function (d) {
                d.site_id = $('#fb_site').val();  
                d.mr_no = $('#fb_mrno').val();    
            }
        },
        // ajax: '/services/viewservicebooking',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            { data: 'serviceBooking', name: 'serviceBooking' },
            { data: 'serviceDetails', name: 'serviceDetails' },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "300px"
            },
            {
                targets: 2,
                width: "300px"
            },
            {
                targets: 3,
                width: "300px"
            },
            {
                targets: 5,
                width: "300px"
            }
        ]
    });

    $('#fb_site, #fb_mrno').on('change', function () {
        ServiceBooking.ajax.reload();  
    });

    $('.clearFilter').on('click', function () {
        $('#fb_site').val($('#fb_site option:first').val()).change();
        $('#fb_mrno').val($('#fb_mrno option:first').val()).change();
        ServiceBooking.ajax.reload();   
    });

    ServiceBooking.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    ServiceBooking.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    ServiceBooking.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Service Booking

    // Update Service Booking Status
    $(document).on('click', '.servicebooking', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};
        $.ajax({
            url: '/services/servicebooking-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
            var status = xhr.status;
                if(status == 200)
                {
                    $('#view-servicebooking').DataTable().ajax.reload();
                }
            },
            error: function(xhr, status, error) {
                console.log(error);
            }
        });

    });
    // Update Service Booking Status

    // Update Service Booking Modal
    $(document).on('click', '.edit-servicebooking', function() {
        var servicebookingId = $(this).data('servicebooking-id');
        $('#u_sb_org').empty();
        $('#u_sb_site').empty();
        $('#u_sb_location').empty();
        $('#u_sb_cc').empty();
        $('#u_sb_sm').empty();
        $('#u_sb_service').empty();
        $('#u_sb_schedule').empty();
        $('#u_sb_emp').empty();
        $('#u_sbp_status').empty();
        $('#u_sbp_priority').empty();
        $('#update_servicebooking')[0].reset();
        $('#ajax-loader').show();
        var url = '/services/servicebookingmodal/' + servicebookingId;
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                $('#ajax-loader').hide();
                var remarks = response.remarks;
                var orgName = response.orgName;
                var orgID = response.orgID;
                var siteName = response.siteName;
                var siteId = response.siteId;
                var locationName = response.locationName;
                var locationId = response.locationId;
                var locationScheduleId = response.locationScheduleId;
                var locationScheduleName = response.locationScheduleName;
                var MR = response.MRno;
                var PatientStatus = response.PatientStatus;
                var PatientPriority = response.PatientPriority;
                var empName = response.empName;
                var empId = response.empId;
                var empName = response.empName;
                
                var serviceName = response.serviceName;
                var serviceID = response.serviceID;
                var servicemodeName = response.servicemodeName;
                var serviceModeID = response.serviceModeID;
                var CCName = response.CCName;
                var CCid = response.CCid;

                var startFormatted = moment.unix(response.startdateTime).format('MM/DD/YYYY h:mm A');
                var endFormatted = moment.unix(response.enddateTime).format('MM/DD/YYYY h:mm A');

                $('#u_sb_org').html("<option selected value='"+orgID+"'>" + orgName + "</option>");
                $('#u_sb_site').html("<option selected value='"+siteId+"'>" + siteName + "</option>");
                $('#u_sb_location').html("<option selected value='"+locationId+"'>" + locationName + "</option>");
                $('#u_sb_schedule').html("<option selected value='"+locationScheduleId+"'>" + locationScheduleName + " (StartTime: " + startFormatted + " EndTime: " + endFormatted + ")</option>");
                $('#u_sbp_status').html("<option selected value='"+PatientStatus+"'>" + capitalizeFirstLetterOfEachWord(PatientStatus) + "</option>");
                $('#u_sbp_priority').html("<option selected value='"+PatientPriority+"'>" + capitalizeFirstLetterOfEachWord(PatientPriority) + "</option>");
                $('#u_sb_emp').html("<option selected value='"+empId+"'>" + capitalizeFirstLetterOfEachWord(empName) + "</option>");
                $('#u_sb_mr').html("<option selected value='"+MR+"'>" + capitalizeFirstLetterOfEachWord(MR) + "</option>");

                $('#u_sb_service').html("<option selected value='"+serviceID+"'>" + serviceName + "</option>");
                $('#u_sb_sm').html("<option selected value='"+serviceModeID+"'>" + servicemodeName + "</option>");
                $('#u_sb_cc').html("<option selected value='"+CCid+"'>" + CCName + "</option>");

                $('.u_sb_remarks').val(remarks);
                $('.u_sbooking_id').val(servicebookingId);

                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.uedt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });


                fetchOrganizations(orgID,orgName,'#u_sb_org', function(data) {
                    $('#u_sb_org').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        $('#u_sb_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                    });
                });

                fetchSites(orgID, '#u_sb_site', function(data) {
                    if (data.length > 0) {
                        $.each(data, function(key, value) {
                            $('#u_sb_site').append('<option value="' + value.id + '">' + value.name + '</option>');
                        });
                    }
                    else {
                        Swal.fire({
                            text: 'Sites are not available for selected Organization',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#edit-servicebooking').modal('hide');
                            }
                        });
                    }
                }, function(error) {
                    console.log(error);
                },siteId);

                $('#u_sb_org').off('change').on('change', function() {
                    $('#u_sb_site').empty();
                    $('#u_sb_site').append('<option selected disabled value="">Select Site</option>');
                    var organizationId = $(this).val();
                    fetchSites(organizationId, '#u_sb_site', function(data) {
                        if (data.length > 0) {
                            $.each(data, function(key, value) {
                                $('#u_sb_site').append('<option value="' + value.id + '">' + value.name + '</option>');
                            });
                        }
                        else {
                            Swal.fire({
                                text: 'Sites are not available for selected Organization',
                                icon: 'error',
                                confirmButtonText: 'OK'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    $('#edit-servicebooking').modal('hide');
                                }
                            });
                        }
                    }, function(error) {
                        console.log(error);
                    });

                    fetchServiceLocations(organizationId, '#u_sb_location', function(data) {
                        if (data.length > 0) {
                            $('#u_sb_location').empty();
                            $('#u_sb_location').append('<option selected disabled value="">Select Service Location</option>');
                            $.each(data, function(key, value) {
                                $('#u_sb_location').append('<option value="' + value.id + '">' + value.name + '</option>');
                            });
                            $('#u_sb_location').find('option:contains("Loading...")').remove();
                            $('#u_sb_location').prop('disabled', false);
                        }
                        else{
                            Swal.fire({
                                text: 'Service Locations are not available for selected Organization',
                                icon: 'error',
                                confirmButtonText: 'OK',
                                allowOutsideClick: false
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    $('#edit-servicebooking').modal('hide');
                                }
                            });

                        }
                    }, function(error) {
                        console.log(error);
                    });
                });

                fetchServiceLocations(orgID, '#u_sb_location', function(data) {
                    if (data.length > 0) {
                        $.each(data, function(key, value) {
                            if(locationId != value.id)
                            {
                                $('#u_sb_location').append('<option value="' + value.id + '">' + value.name + '</option>');
                            }
                        });
                        $('#u_sb_location').find('option:contains("Loading...")').remove();
                        $('#u_sb_location').prop('disabled', false);
                    }
                    else{
                        Swal.fire({
                            text: 'Service Locations are not available for selected Site',
                            icon: 'error',
                            confirmButtonText: 'OK',
                            allowOutsideClick: false
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#edit-servicebooking').modal('hide');
                            }
                        });

                    }
                }, function(error) {
                    console.log(error);
                });

                fetchServiceScheduling(locationId, siteId, '#u_sb_schedule', function(data) {
                    $.each(data, function(key, value) {
                        if(locationScheduleId != value.id)
                        {
                            const startDate = new Date(value.start_timestamp * 1000); // Convert to milliseconds
                            const endDate = new Date(value.end_timestamp * 1000); // Convert to milliseconds

                            const formattedStartDate = `${startDate.getMonth() + 1}-${startDate.getDate()}-${startDate.getFullYear()} ${startDate.getHours()}:${(startDate.getMinutes() < 10 ? '0' : '') + startDate.getMinutes()} ${startDate.getHours() >= 12 ? 'PM' : 'AM'}`;
                            const formattedEndDate = `${endDate.getMonth() + 1}-${endDate.getDate()}-${endDate.getFullYear()} ${endDate.getHours()}:${(endDate.getMinutes() < 10 ? '0' : '') + endDate.getMinutes()} ${endDate.getHours() >= 12 ? 'PM' : 'AM'}`;
                            $('#u_sb_schedule').append(
                                `<option value="${value.id}">${value.name} (StartTime: ${formattedStartDate} - EndTime: ${formattedEndDate})</option>`
                            );
                            // $('#u_sb_schedule').append('<option value="' + value.id + '">' + value.name + ' </option>');
                        }
                    });
                    $('#u_sb_schedule').find('option:contains("Loading...")').remove();
                    $('#u_sb_schedule').prop('disabled', false);

                }, function(error) {
                    console.log(error);
                });


                $('#u_sb_location').off('change').on('change', function() {
                    var locationId = $(this).val();
                    if (locationId) {
                        var siteId = $('#u_sb_site').val();
                        fetchServiceScheduling(locationId, siteId, '#u_sb_schedule', function(data) {
                            if (data.length > 0) {
                                $('#u_sb_schedule').empty();
                                $('#u_sb_schedule').append('<option selected disabled value="">Select Schedule</option>');
                                $.each(data, function(key, value) {
                                    const startDate = new Date(value.start_timestamp * 1000); // Convert to milliseconds
                                    const endDate = new Date(value.end_timestamp * 1000); // Convert to milliseconds

                                    const formattedStartDate = `${startDate.getMonth() + 1}-${startDate.getDate()}-${startDate.getFullYear()} ${startDate.getHours()}:${(startDate.getMinutes() < 10 ? '0' : '') + startDate.getMinutes()} ${startDate.getHours() >= 12 ? 'PM' : 'AM'}`;
                                    const formattedEndDate = `${endDate.getMonth() + 1}-${endDate.getDate()}-${endDate.getFullYear()} ${endDate.getHours()}:${(endDate.getMinutes() < 10 ? '0' : '') + endDate.getMinutes()} ${endDate.getHours() >= 12 ? 'PM' : 'AM'}`;
                                    $('#u_sb_schedule').append(
                                        `<option value="${value.id}">${value.name} (StartTime: ${formattedStartDate} - EndTime: ${formattedEndDate})</option>`
                                    );
                                });
                                $('#u_sb_schedule').find('option:contains("Loading...")').remove();
                                $('#u_sb_schedule').prop('disabled', false);
                            }
                            else {
                                Swal.fire({
                                    text: 'Service Locations Schedules are not available for selected Service Location',
                                    icon: 'error',
                                    confirmButtonText: 'OK'
                                }).then((result) => {
                                    if (result.isConfirmed) {
                                        $('#edit-servicebooking').modal('hide');
                                    }
                                });
                            }

                        }, function(error) {
                            console.log(error);
                        });
                    }
                });

                fetchPhysicians(siteId, '#u_sb_emp', function(data) {
                    $.each(data, function(key, value) {
                        if(empId != value.id)
                        {
                            $('#u_sb_emp').append('<option value="' + value.id + '">' + value.name + '</option>');
                        }
                    });
                    $('#u_sb_emp').find('option:contains("Loading...")').remove();
                    $('#u_sb_emp').prop('disabled', false);

                }, function(error) {
                    console.log(error);
                });
                SiteChangeEmployees('#u_sb_site', '#u_sb_emp', '#update_servicebooking');

                var serviceSelector = '#u_sb_service';
                fetchSiteServices(siteId, serviceSelector, function(data) {
                    const $Service = $(serviceSelector);
                    $Service.empty()
                    .append('<option selected value='+ response.serviceID +'>'+ response.serviceName +'</option>')
                    .append(
                        data.map(({ id, name }) => {
                            if (id != response.serviceID) {
                                return `<option value="${id}">${name}</option>`;
                            }
                        }).join(''))
                    .prop('disabled', false)
                    .find('option:contains("Loading...")').remove();
                    // $Service.trigger('change');
                });
                SiteChangeService('#u_sb_site', '#u_sb_service', '#update_servicebooking');

                var serviceModeSelector = '#u_sb_sm';
                fetchSiteServiceMode(siteId, response.serviceID, serviceModeSelector, function(data) {
                const $ServiceMode = $(serviceModeSelector);
                    $ServiceMode.empty()
                        .append('<option selected value='+ response.serviceModeID +'>'+ response.servicemodeName +'</option>')
                        .append(
                        data.map(({ id, name }) => {
                            if (id != response.serviceModeID) {
                                return `<option value="${id}">${name}</option>`;
                            }
                        }).join(''))
                        .prop('disabled', false)
                        .find('option:contains("Loading...")').remove();
                        // $ServiceMode.trigger('change');
                });
                ServiceChangeServiceModes('#u_sb_site', '#u_sb_service', '#u_sb_sm', '#update_servicebooking');

                var CCSelector = '#u_sb_cc';
                fetchServiceCostCenter(siteId, response.serviceID, CCSelector, function(data) {
                    const $CostCenter = $(CCSelector);
                    if (data && data.length > 0) {
                        $CostCenter.empty()
                             .append('<option selected value='+ response.CCid +'>'+ response.CCName +'</option>')
                             .append(
                                data.map(({ id, name }) => {
                                    if (id != response.CCid) {
                                        return `<option value="${id}">${name}</option>`;
                                    }
                                }).join(''))
                             .prop('disabled', false)
                             .find('option:contains("Loading...")').remove();
                             $CostCenter.trigger('change');
                    } 
                });
                ServiceChangeCostCenter('#u_sb_site', '#u_sb_service', '#u_sb_cc', '#update_servicebooking');

                fetchPatientMR(siteId, '#u_sb_mr', 'serviceBooking', function(data) {
                    $.each(data, function(key, value) {
                        if(MR != value.mr_code)
                        {
                            $('#u_sb_mr').append('<option value="' + value.mr_code + '">' + value.mr_code + '</option>');
                        }
                    });
                    $('#u_sb_mr').find('option:contains("Loading...")').remove();
                    $('#u_sb_mr').prop('disabled', false);

                }, function(error) {
                    console.log(error);
                });
                SiteChangeMRCode('#u_sb_site', '#u_sb_mr', '#update_servicebooking', 'serviceBooking');

                var patientStatusOptions = [
                    {value: "new", label: "New"},
                    {value:     "follow up", label: "Follow Up"}
                ];
                var patientStatus = patientStatusOptions.filter(function(option) {
                    return option.value !== PatientStatus;
                });
                patientStatus.forEach(function(option) {
                    $("#u_sbp_status").append(new Option(option.label, option.value));
                });

                var patientPriorityOptions = [
                    {value: "routine", label: "Routine"},
                    {value: "urgent", label: "Urgent"},
                    {value: "emergency", label: "Emergency"}

                ];
                var patientPriority = patientPriorityOptions.filter(function(option) {
                    return option.value !== PatientPriority;
                });
                patientPriority.forEach(function(option) {
                    $("#u_sbp_priority").append(new Option(option.label, option.value));
                });

                $('#edit-servicebooking').modal('show');
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    // Update Service Booking Modal

    //Update Service Booking
    $('#update_servicebooking').on('submit', function (event) {
        event.preventDefault();
        var formData = SerializeForm(this);
        var Id = $('.u_sbooking_id').val();
        var url = '/services/update-servicebooking/' + Id;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-servicebooking').modal('hide');
                            $('#view-servicebooking').DataTable().ajax.reload(); // Refresh DataTable
                            $('#update_servicebooking')[0].reset();
                            $('.text-danger').hide();
                        }
                        $('.text-danger').hide();
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Service Booking
});
//HR Setup

//Inventory Setup
$(document).ready(function() {
    //Open Inventory Category
    $(document).on('click', '.add-inventorycategory', function() {
        var orgId = $('#ic_org').val();
        if(!orgId)
        {
            $('#ic_org').html("<option selected disabled value=''>Select Organization</option>");
            fetchOrganizations('null', '','#ic_org', function(data) {
                $('#ic_org').find('option:contains("Loading...")').remove();
                $.each(data, function(key, value) {
                    $('#ic_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                });
            });
        }
        $('#add-inventorycategory').modal('show');
    });
    //Open Inventory Category

    //Add Inventory Category
    $('#add_inventorycategory').submit(function(e) {
        e.preventDefault(); 
        var data = SerializeForm(this);
        var resp = true;
        $(data).each(function(i, field){
            if ((field.value == '') || (field.value == null))
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                resp = false;
            }
        });

        if(resp != false)
        {
            $.ajax({
                url: "/inventory/addinvcategory",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {

                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-inventorycategory').modal('hide');
                                $('#view-inventorycategory').DataTable().ajax.reload();
                                $('#add_inventorycategory')[0].reset();
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_inventorycategory')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Inventory Category

    // View Inventory Category Data
    var viewinventoryCat =  $('#view-inventorycategory').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/inventory/inventorycategory',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            { data: 'consumption_group', name: 'consumption_group' },
            { data: 'consumption_method', name: 'consumption_method' },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "300px"
            },
            {
                targets: 5,
                width: "250px"
            }
        ]
    });

    viewinventoryCat.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    viewinventoryCat.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    viewinventoryCat.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Inventory Category Data

    // Update Inventory Category Status
    $(document).on('click', '.inventorycategory_status ', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/inventory/invcat-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
            var status = xhr.status;
                if(status == 200)
                {
                    $('#view-inventorycategory').DataTable().ajax.reload();
                }
                },
                error: function(xhr, status, error) {
                    console.log(error);
            }
        });
    });
    // Update Inventory Category Status

    //Update Inventory Category Modal
    $(document).on('click', '.edit-inventorycategory', function() {
        var InnventoryCatId = $(this).data('inventorycategory-id');
        var url = '/inventory/updateinventorycategory/' + InnventoryCatId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.uedt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('.ic-id').val(response.id);
                $('.u_invcat').val(response.name);
                $('#u_ic_org').html("<option selected value="+ response.orgId +">" + response.orgName + "</option>");
                fetchOrganizations(response.orgId,response.orgName,'#u_ic_org', function(data) {
                    $('#u_ic_org').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        if(response.orgId != value.id)
                        {
                            $('#u_ic_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                        }
                    });
                });
                // var UsageType = response.UsageType;
                // var UsageTypeVal = (UsageType === 'c') ? 'Consumable' : 'Fixed';
                // $('#u_usage_type option[value="' + (UsageType === 'c' ? 'c' : 'f') + '"]').remove();
                // $('#u_usage_type').prepend("<option selected value="+ UsageType +">" + UsageTypeVal + "</option>");
                $('#u_ic_cg').val(response.consumptionGroupId).change();
                $('#u_ic_cm').val(response.consumptionMethodId).change();

                $('#edit-inventorycategory').modal('show');
                $('#ajax-loader').hide();

            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Inventory Category Modal

    //Update Inventory Category
    $('#u_inventorycategory').on('submit', function (event) {
        event.preventDefault();
        var formData = SerializeForm(this);
        var invCatId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'ic-id') {
                invCatId = formData[i].value;
                break;
            }
        }
        var url = 'inventory/update-inventorycategory/' + invCatId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-inventorycategory').modal('hide');
                            $('#view-inventorycategory').DataTable().ajax.reload(); // Refresh DataTable
                            $('#u_inventorycategory')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Inventory Category
});
//Inventory Setup

$(document).ready(function() {
    //Open Inventory Sub Category
    $(document).on('click', '.add-invsubcategory', function() {
        var orgId = $('#isc_org').val();
        if(orgId)
        {
            $('#add-invsubcategory').find('form').trigger('reset');
            $('#isc_catid').html("<option selected disabled value=''>Select Item Category</option>");
            fetchInventoryCategory(orgId,'#isc_org', function(data) {
                $('#isc_catid').find('option:contains("Loading...")').remove();
                $.each(data, function(key, value) {
                    $('#isc_catid').append('<option value="' + value.id + '">' + value.name + '</option>');
                });
            });
          
        }
        else{
            $('#isc_org').html("<option selected disabled value=''>Select Organization</option>");
            fetchOrganizations('null', '','#isc_org', function(data) {
                $('#isc_org').find('option:contains("Loading...")').remove();
                $.each(data, function(key, value) {
                    $('#isc_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                });
            });
            $('#isc_catid').html("<option selected disabled value=''>Select Category</option>").prop('disabled', true);
            OrgChangeItemCategory('#isc_org', '#isc_catid', '#add_invsubcategory');
        }
      
       

        $('#add-invsubcategory').modal('show');
    });
    //Open Inventory Sub Category

    $('#add_invsubcategory').submit(function(e) {
        e.preventDefault();
        var data = SerializeForm(this);
        var resp = true;
        $(data).each(function(i, field){
            if ((field.value == '') || (field.value == null))
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                    $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                        $(FieldID).text("");
                        $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                    });
                resp = false;
            }
        });

        if(resp != false)
        {
            $.ajax({
                url: "/inventory/addinvsubcategory",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {

                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-invsubcategory').modal('hide');
                                $('#view-invsubcategory').DataTable().ajax.reload();
                                $('#add_invsubcategory').find('select').val($('#add_invsubcategory').find('select option:first').val()).trigger('change');
                                $('#add_invsubcategory')[0].reset();
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_invsubcategory').find('select').val($('#add_invsubcategory').find('select option:first').val()).trigger('change');
                                $('#add_invsubcategory')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Inventory Sub Category

    // View Inventory Sub Category Data
    var viewinventorysubCat =  $('#view-invsubcategory').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/inventory/invsubcategory',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            {
                "data": 'name',
                "render": function(data, type, row) {
                    return data.replace(/\b\w/g, function(char) { return char.toUpperCase(); });
                }
            },
            {
                "data": 'catName',
                "render": function(data, type, row) {
                    return data.replace(/\b\w/g, function(char) { return char.toUpperCase(); });
                }
            },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "200px"
            },
            {
                targets: 5,
                width: "250px"
            }
        ]
    });

    viewinventorysubCat.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    viewinventorysubCat.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    viewinventorysubCat.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Inventory Sub Category Data

    // Update Inventory Sub Category Status
    $(document).on('click', '.invsubcategory_status ', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/inventory/invsubcat-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
            var status = xhr.status;
                if(status == 200)
                {
                    $('#view-invsubcategory').DataTable().ajax.reload();
                }
                },
                error: function(xhr, status, error) {
                    console.log(error);
            }
        });
    });
    // Update Inventory Sub Category Status

    //Update Inventory Sub Category Modal
    $(document).on('click', '.edit-invsubcategory', function() {
        var InnventorySubCatId = $(this).data('invsubcategory-id');
        var url = '/inventory/updateinvsubcategory/' + InnventorySubCatId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.uedt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('.u_isc-id').val(response.id);
                $('.u_isc_description').val(response.name);
                $('#u_isc_org').html("<option selected value="+ response.orgId +">" + response.orgName + "</option>");
                fetchOrganizations('null', '','#u_isc_org', function(data) {
                    $('#u_isc_org').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        if(response.orgId != value.id)
                        {
                            $('#u_isc_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                        }
                    });
                });
                $('#u_isc_catid').html("<option selected value="+ response.catId +">" + response.catName + "</option>");
                fetchInventoryCategory(response.orgId,'#u_ssorg', function(data) {
                    $('#u_isc_catid').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        if(response.catId != value.id)
                        {
                            $('#u_isc_catid').append('<option value="' + value.id + '">' + value.name + '</option>');
                        }
                    });
                });
                OrgChangeItemCategory('#u_isc_org', '#u_isc_catid', '#u_invtype');

                $('#edit-invsubcategory').modal('show');
                $('#ajax-loader').hide();

            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Inventory Sub Category Modal

    //Update Inventory Sub Category
    $('#u_invsubcategory').on('submit', function (event) {
        event.preventDefault();
        var formData = SerializeForm(this);
        var catId = $('#u_isc_catid').val();
        var invCatId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'u_isc-id') {
                invCatId = formData[i].value;
                break;
            }
        }
        var url = 'inventory/update-invsubcategory/' + invCatId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-invsubcategory').modal('hide');
                            $('#view-invsubcategory').DataTable().ajax.reload(); // Refresh DataTable
                            $('#u_invsubcategory')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Inventory Sub Category
});

$(document).ready(function() {
    //Open Inventory Type
    $(document).on('click', '.add-invtype', function() {
        var orgId = $('#it_org').val();
        $('#add-invtype').find('form').trigger('reset');
        $('.dt').bootstrapMaterialDatePicker({
            format: 'dddd DD MMMM YYYY - hh:mm A',
            currentDate: new Date()
        });
        if(orgId)
        {
            $('#it_cat').html("<option selected disabled value=''>Select Item Category</option>");
            fetchInventoryCategory(orgId,'#it_cat', function(data) {
                $('#it_cat').find('option:contains("Loading...")').remove();
                $.each(data, function(key, value) {
                    $('#it_cat').append('<option value="' + value.id + '">' + value.name + '</option>');
                });
            });
        }
        else{
            $('#it_org').html("<option selected disabled value=''>Select Organization</option>");
            fetchOrganizations('null', '','#it_org', function(data) {
                $('#it_org').find('option:contains("Loading...")').remove();
                $.each(data, function(key, value) {
                    $('#it_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                });
            });
            $('#it_cat').html("<option selected disabled value=''>Select Category</option>").prop('disabled', true);
            OrgChangeItemCategory('#it_org', '#it_cat', '#add_invtype');
        }
        $('#it_subcat').html("<option selected disabled value=''>Select Item Sub Category</option>").prop('disabled', true);
        CategoryChangeSubCategory('#it_cat', '#it_subcat', '#add_invtype');
        $('#add-invtype').modal('show');
    });
    //Open Inventory Type

    //Add Inventory Type
    $('#add_invtype').submit(function(e) {
        e.preventDefault(); // Prevent the form from submitting normally
        var data = $(this).serializeArray();
        var Category = $('#it_cat').val();
        var SubCategory = $('#it_subcat').val();
        var Org = $('#it_org').val();
        data.push({ name: 'it_cat', value: Category });
        data.push({ name: 'it_subcat', value: SubCategory });
        data.push({ name: 'it_org', value: Org });
        var resp = true;
        $(data).each(function(i, field){
            if ((field.value == '') || (field.value == null))
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                    $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                        $(FieldID).text("");
                        $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                    });
                resp = false;
            }
        });

        if(resp != false)
        {
            $.ajax({
                url: "/inventory/addinvtype",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {

                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-invtype').modal('hide');
                                $('#view-invtype').DataTable().ajax.reload();
                                $('#add_invtype')[0].reset();
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_invtype')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Inventory Type

    // View Inventory Type Data
    var viewinventorytype =  $('#view-invtype').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/inventory/invtype',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            {
                "data": 'name',
                "render": function(data, type, row) {
                    return data.replace(/\b\w/g, function(char) { return char.toUpperCase(); });
                }
            },
            {
                "data": 'orgName',
                "render": function(data, type, row) {
                    return data.replace(/\b\w/g, function(char) { return char.toUpperCase(); });
                }
            },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "200px"
            },
            {
                targets: 5,
                width: "250px"
            }
        ]
    });

    viewinventorytype.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    viewinventorytype.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    viewinventorytype.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Inventory Type Data

    // Update Inventory Type Status
    $(document).on('click', '.invtype_status ', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/inventory/invtype-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
            var status = xhr.status;
                if(status == 200)
                {
                    $('#view-invtype').DataTable().ajax.reload();
                }
                },
                error: function(xhr, status, error) {
                    console.log(error);
            }
        });
    });
    // Update Inventory Type Status

    //Update Inventory Type Modal
    $(document).on('click', '.edit-invtype', function() {
        var InnventoryTypeId = $(this).data('invtype-id');
        var url = '/inventory/updateinvtype/' + InnventoryTypeId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.uedt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('.u_it-id').val(response.id);
                $('.u_it_description').val(response.name);
                $('#u_it_catid').html("<option selected value="+ response.catId +">" + response.catName + "</option>");
                $('#u_it_subcat').html("<option selected value="+ response.subcatId +">" + response.subcatName + "</option>").prop('disabled', false);
                $('#u_it_org').html("<option selected value="+ response.orgId +">" + response.orgName + "</option>");
                
                fetchInventoryCategory(response.orgId,'#u_it_catid', function(data) {
                    $('#u_it_catid').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        if(response.catId != value.id)
                        {
                            $('#u_it_catid').append('<option value="' + value.id + '">' + value.name + '</option>');
                        }
                    });
                });

                OrgChangeItemCategory('#u_it_org', '#u_it_catid', '#u_invtype');

                fetchSelectedInventorySubCategory(response.catId,'#u_it_subcat', function(data) {
                    $('#u_it_subcat').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        console.log(value.id);
                        console.log(response.subcatId);

                        if(response.subcatId != value.id)
                        {
                            $('#u_it_subcat').append('<option value="' + value.id + '">' + value.name + '</option>');
                        }
                    });
                });
                CategoryChangeSubCategory('#u_it_catid', '#u_it_subcat', '#u_invtype');

                fetchOrganizations(response.orgId,response.orgName,'#u_it_org', function(data) {
                    $('#u_it_org').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        if(response.orgId != value.id)
                        {
                            $('#u_it_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                        }
                    });
                });


                $('#edit-invtype').modal('show');
                $('#ajax-loader').hide();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Inventory Type Modal

    //Update Inventory Type
    $('#u_invtype').on('submit', function (event) {
        event.preventDefault();
        var formData = SerializeForm(this);
        var invtypeId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'u_it-id') {
                invtypeId = formData[i].value;
                break;
            }
        }
        var url = 'inventory/update-invtype/' + invtypeId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-invtype').modal('hide');
                            $('#view-invtype').DataTable().ajax.reload(); // Refresh DataTable
                            $('#u_invtype')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Inventory Type
});

$(document).ready(function() {
    //Open Add Inventory Generic Setup
    $(document).on('click', '.add-invgeneric', function() {
        var orgId = $('#ig_org').val();
        $('#ig_pm').hide();
        $('#add-invgeneric').find('form').trigger('reset');
        $('.dt').bootstrapMaterialDatePicker({
            format: 'dddd DD MMMM YYYY - hh:mm A',
            currentDate: new Date()
        });
        if(orgId)
        {
            $('#ig_cat').html("<option selected disabled value=''>Select Item Category</option>");
            fetchInventoryCategory(orgId,'#ig_cat', function(data) {
                $('#ig_cat').find('option:contains("Loading...")').remove();
                $.each(data, function(key, value) {
                    $('#ig_cat').append('<option value="' + value.id + '">' + value.name + '</option>');
                });
            });
        }
        else{
            $('#ig_org').html("<option selected disabled value=''>Select Organization</option>");
            fetchOrganizations('null', '','#ig_org', function(data) {
                $('#ig_org').find('option:contains("Loading...")').remove();
                $.each(data, function(key, value) {
                    $('#ig_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                });
            });
            $('#ig_cat').html("<option selected disabled value=''>Select Category</option>").prop('disabled', true);
            OrgChangeItemCategory('#ig_org', '#ig_cat', '#u_invtype');
        }
        $('#ig_subcat').html("<option selected disabled value=''>Select Item Sub Category</option>").prop('disabled', true);
        CategoryChangeSubCategory('#ig_cat', '#ig_subcat', '#add_invgeneric');

        $('#ig_type').html("<option selected disabled value=''>Select Item Type</option>").prop('disabled', true);
        SubCategoryChangeInventoryType('#ig_subcat', '#ig_type', '#add_invgeneric');

        $('#ig_cat').change(function() {
            var itemCat = $(this).val();
            CheckInventoryCategoryConsumption(itemCat, '#ig_patientmandatory', function(bool) {
                if (bool) {
                    $('#ig_pm').show();
                } else {
                    $('#ig_pm').hide();
                    $('#ig_patientmandatory').val('n');
                }
            });
        });
        
        $('#add-invgeneric').modal('show');
    });
    //Open Inventory Generic Setup
    

    //Add Inventory Generic
    $('#add_invgeneric').submit(function(e) {
        e.preventDefault(); 
        var data = SerializeForm(this);

        var resp = true;
        $(data).each(function(i, field){
            if ((field.value == '') || (field.value == null) && field.name != 'ig_patientmandatory')
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                    $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                        $(FieldID).text("");
                        $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                    });
                resp = false;
            }
        });
      
        if(resp != false)
        {
            $.ajax({
                url: "/inventory/addinvgeneric",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {

                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-invgeneric').modal('hide');
                                $('#view-invgeneric').DataTable().ajax.reload();
                                $('#add_invgeneric')[0].reset();
                                $('#add_invgeneric').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_invgeneric').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('#add_invgeneric')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Inventory Generic

    // View Inventory Generic Data
    var viewinventorygeneric =  $('#view-invgeneric').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/inventory/invgeneric',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            {
                "data": 'name',
                "render": function(data, type, row) {
                    return data.replace(/\b\w/g, function(char) { return char.toUpperCase(); });
                }
            },
            { data: 'patientMandatory', name: 'patientMandatory' },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "200px"
            },
            {
                targets: 5,
                width: "250px"
            }
        ]
    });

    viewinventorygeneric.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    viewinventorygeneric.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    viewinventorygeneric.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Inventory Generic Data

    // Update Inventory Generic Status
    $(document).on('click', '.invgeneric_status ', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/inventory/invgeneric-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
            var status = xhr.status;
                if(status == 200)
                {
                    $('#view-invgeneric').DataTable().ajax.reload();
                }
                },
                error: function(xhr, status, error) {
                    console.log(error);
            }
        });
    });
    // Update Inventory Generic Status

    //Update Inventory Generic Modal
    $(document).on('click', '.edit-invgeneric', function() {
        var InnventoryGenericId = $(this).data('invgeneric-id');
        var url = '/inventory/updateinvgeneric/' + InnventoryGenericId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.uedt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('.u_ig-id').val(response.id);
                $('.u_ig_description').val(response.name);
                $('#u_ig_cat').html("<option selected value="+ response.catId +">" + response.catName + "</option>");
                $('#u_ig_subcat').html("<option selected value="+ response.subcatId +">" + response.subcatName + "</option>");
                $('#u_ig_org').html("<option selected value="+ response.orgId +">" + response.orgName + "</option>");
                $('#u_ig_type').html("<option selected value="+ response.typeId +">" + response.typeName + "</option>");

                 CheckInventoryCategoryConsumption(response.catId, '#u_ig_patientmandatory', function(bool) {
                    if (bool) {
                        $('#u_ig_pm').show();
                    } else {
                        $('#u_ig_pm').hide();
                        $('#u_ig_patientmandatory').val('n');
                    }
                });

                $('#u_ig_cat').change(function() {
                    var itemCat = $(this).val();
                    CheckInventoryCategoryConsumption(itemCat, '#u_ig_patientmandatory', function(bool) {
                        if (bool) {
                            $('#u_ig_pm').show();
                        } else {
                            $('#u_ig_pm').hide();
                            $('#u_ig_patientmandatory').val('n');
                        }
                    });
                });

                fetchInventoryCategory(response.orgId,'#u_ig_cat', function(data) {
                    $('#u_ig_cat').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        if(response.catId != value.id)
                        {
                            $('#u_ig_cat').append('<option value="' + value.id + '">' + value.name + '</option>');
                        }
                    });
                });
                OrgChangeItemCategory('#u_ig_org', '#u_ig_cat', '#u_invgeneric');

                fetchSelectedInventorySubCategory(response.catId,'#u_ig_subcat', function(data) {
                    $('#u_ig_subcat').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        if(response.subcatId != value.id)
                        {
                            $('#u_ig_subcat').append('<option value="' + value.id + '">' + value.name + '</option>');
                        }
                    });
                });
                CategoryChangeSubCategory('#u_ig_cat', '#u_ig_subcat', '#edit-invgeneric');

                fetchOrganizations(response.orgId,response.orgName,'#u_ig_org', function(data) {
                    $('#u_ig_org').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        if(response.orgId != value.id)
                        {
                            $('#u_ig_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                        }
                    });
                });

                fetchSelectedInventoryType(response.catId,response.subcatId,response.orgId,'#u_ig_type', function(data) {
                    $('#u_ig_type').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        if(response.typeId != value.id)
                        {
                            $('#u_ig_type').append('<option value="' + value.id + '">' + value.name + '</option>');
                        }
                    });
                });

                SubCategoryChangeInventoryType('#u_ig_subcat', '#u_ig_type', '#u_invgeneric');
                
                $('#u_ig_patientmandatory').val(response.patientMandatory).change();
                $('#edit-invgeneric').modal('show');
                $('#ajax-loader').hide();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Inventory Generic Modal

    //Update Inventory Generic
    $('#u_invgeneric').on('submit', function (event) {
        event.preventDefault();
        var formData = SerializeForm(this);
        var invgenericId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'u_ig-id') {
                invgenericId = formData[i].value;
                break;
            }
        }
        var url = 'inventory/update-invgeneric/' + invgenericId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-invgeneric').modal('hide');
                            $('#view-invgeneric').DataTable().ajax.reload(); // Refresh DataTable
                            $('#u_invgeneric')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Inventory Generic
});

$(document).ready(function() {
    //Open Add Inventory Brand Setup
    $(document).on('click', '.add-invbrand', function() {
        var orgId = $('#ib_org').val();
        $('#add_invbrand').find('form').trigger('reset');
        if(orgId)
        {
            $('#ib_cat').html("<option selected disabled value=''>Select Item Category</option>");
            fetchInventoryCategory(orgId,'#ib_cat', function(data) {
                $('#ib_cat').find('option:contains("Loading...")').remove();
                $.each(data, function(key, value) {
                    $('#ib_cat').append('<option value="' + value.id + '">' + value.name + '</option>');
                });
            });
        }
        else{
            $('#ib_org').html("<option selected disabled value=''>Select Organization</option>");
            fetchOrganizations('null', '','#ib_org', function(data) {
                $('#ib_org').find('option:contains("Loading...")').remove();
                $.each(data, function(key, value) {
                    $('#ib_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                });
            });
            $('#ib_cat').html("<option selected disabled value=''>Select Category</option>").prop('disabled', true);
            OrgChangeItemCategory('#ib_org', '#ib_cat', '#u_invtype');
        }
        $('#ib_type').html("<option selected disabled value=''>Select Item Type</option>").prop('disabled', true);
        $('#ib_subcat').html("<option selected disabled value=''>Select Sub Category</option>").prop('disabled', true);
        $('#ib_generic').html("<option selected disabled value=''>Select Item Generic</option>").prop('disabled', true);
        CategoryChangeSubCategory('#ib_cat', '#ib_subcat', '#add_invbrand');
        SubCategoryChangeInventoryType('#ib_subcat', '#ib_type', '#add_invgeneric');
        TypeChangeInventoryGeneric('#ib_type', '#ib_generic', '#add_invgeneric');
        
        $('#add-invbrand').modal('show');
    });

    //Open Inventory Brand Setup

    //Add Inventory Brand
    $('#add_invbrand').submit(function(e) {
        e.preventDefault(); // Prevent the form from submitting normally
        var data = SerializeForm(this);
        var resp = true;
        $(data).each(function(i, field){
            if ((field.value == '') || (field.value == null))
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                    $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                        $(FieldID).text("");
                        $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                    });
                resp = false;
            }
        });
        if(resp != false)
        {
            $.ajax({
                url: "/inventory/addinvbrand",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {

                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-invbrand').modal('hide');
                                $('#view-invbrand').DataTable().ajax.reload();
                                $('#add_invbrand')[0].reset();
                                $('#add_invbrand').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_invbrand').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('#add_invbrand')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Inventory Brand

    // View Inventory Brand Data
    var viewinventorybrand =  $('#view-invbrand').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/inventory/invbrand',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            {
                "data": 'name',
                "render": function(data, type, row) {
                    return data.replace(/\b\w/g, function(char) { return char.toUpperCase(); });
                }
            },
            {
                "data": 'genericName',
                "render": function(data, type, row) {
                    return data.replace(/\b\w/g, function(char) { return char.toUpperCase(); });
                }
            },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "200px"
            },
            {
                targets: 4,
                width: "250px"
            }
        ]
    });

    viewinventorybrand.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    viewinventorybrand.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    viewinventorybrand.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Inventory Brand Data

    // Update Inventory Brand Status
    $(document).on('click', '.invbrand_status ', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/inventory/invbrand-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
            var status = xhr.status;
                if(status == 200)
                {
                    $('#view-invbrand').DataTable().ajax.reload();
                }
                },
                error: function(xhr, status, error) {
                    console.log(error);
            }
        });
    });
    // Update Inventory Brand Status

    //Update Inventory Brand Modal
    $(document).on('click', '.edit-invbrand', function() {
        var InnventoryBrandId = $(this).data('invbrand-id');
        var url = '/inventory/updateinvbrand/' + InnventoryBrandId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.uedt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('.u_ib-id').val(response.id);
                $('.u_ib_description').val(response.name);
                $('#u_ib_cat').html("<option selected value="+ response.catId +">" + response.catName + "</option>");
                $('#u_ib_subcat').html("<option selected value="+ response.subcatId +">" + response.subcatName + "</option>");
                $('#u_ib_org').html("<option selected value="+ response.orgId +">" + response.orgName + "</option>");
                $('#u_ib_type').html("<option selected value="+ response.typeId +">" + response.typeName + "</option>");
                $('#u_ib_generic').html("<option selected value="+ response.genericId +">" + response.genericName + "</option>");

                fetchInventoryCategory(response.orgId,'#u_ib_cat', function(data) {
                    $('#u_ib_cat').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        if(response.catId != value.id)
                        {
                            $('#u_ib_cat').append('<option value="' + value.id + '">' + value.name + '</option>');
                        }
                    });
                });
                OrgChangeItemCategory('#u_ib_org', '#u_ib_cat', '#u_invgeneric');

                fetchSelectedInventorySubCategory(response.catId,'#u_ib_subcat', function(data) {
                    $('#u_ib_subcat').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        if(response.subcatId != value.id)
                        {
                            $('#u_ib_subcat').append('<option value="' + value.id + '">' + value.name + '</option>');
                        }
                    });
                });
                CategoryChangeSubCategory('#u_ib_cat', '#u_ib_subcat', '#u_invgeneric');

                fetchOrganizations(response.orgId,response.orgName,'#u_ib_org', function(data) {
                    $('#u_ib_org').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        if(response.orgId != value.id)
                        {
                            $('#u_ib_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                        }
                    });
                });

                fetchSelectedInventoryType(response.catId,response.subcatId,response.orgId,'#u_ib_type', function(data) {
                    $('#u_ib_type').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        if(response.typeId != value.id)
                        {
                            $('#u_ib_type').append('<option value="' + value.id + '">' + value.name + '</option>');
                        }
                    });
                });
                SubCategoryChangeInventoryType('#u_ib_subcat', '#u_ib_type', '#u_invbrand');

                fetchSelectedInventoryGeneric(response.typeId,'#u_ib_generic', function(data) {
                    $('#u_ib_generic').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        if(response.genericId != value.id)
                        {
                            $('#u_ib_generic').append('<option value="' + value.id + '">' + value.name + '</option>');
                        }
                    });
                });
                TypeChangeInventoryGeneric('#u_ib_type', '#u_ib_generic', '#u_invbrand');

                $('#edit-invbrand').modal('show');
                $('#ajax-loader').hide();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Inventory Brand Modal

    //Update Inventory Brand
    $('#u_invbrand').on('submit', function (event) {
        event.preventDefault();
        var formData = SerializeForm(this);
        var invbrandId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'u_ib-id') {
                invbrandId = formData[i].value;
                break;
            }
        }
        var url = 'inventory/update-invbrand/' + invbrandId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-invbrand').modal('hide');
                            $('#view-invbrand').DataTable().ajax.reload(); // Refresh DataTable
                            $('#u_invbrand')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                console.log(xhr.responseText);
            }
        });
    });
    //Update Inventory Brand
});

$(document).ready(function() {
    //Open Add Inventory Transaction Type Setup
    $(document).on('click', '.add-invtransactiontype', function() {
        $('#add_invtransactiontype').find('form').trigger('reset');
        var orgId = $('#itt_org').val();
        $('#source_action,#destination_action').prop('disabled', true);
        $('#inventory_location_value').val('');
        FetchAllServiceLocation('#inventory_location_value', '#add_invtransactiontype');
        if(!orgId)
        {
            $('#itt_org').html("<option selected disabled value=''>Select Organization</option>");
            fetchOrganizations('null', '','#itt_org', function(data) {
                $('#itt_org').find('option:contains("Loading...")').remove();
                $.each(data, function(key, value) {
                    $('#itt_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                });
            });
            // fetchOrganizationSites(orgId, '#itt_site', function(data) {
            //     $('#itt_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', false);
            //     $.each(data, function(key, value) {
            //         $('#itt_site').append('<option value="' + value.id + '">' + value.name + '</option>');
            //     });
            // });
        }
        // else{
        //     $('#itt_org').html("<option selected disabled value=''>Select Organization</option>");
        //     fetchOrganizations('null', '','#itt_org', function(data) {
        //         $('#itt_org').find('option:contains("Loading...")').remove();
        //         $.each(data, function(key, value) {
        //             $('#itt_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
        //         });
        //     });
        //     // $('#itt_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', true);
        //     // OrgChangeSites('#itt_org', '#itt_site', '#add_invtransactiontype');
        // }
        $('#request_mandatory').on('change', function() {
            var mandatoryValue = $(this).val();
            if (mandatoryValue === 'y') {
                $('#request_location_mandatory').val('y').prop('disabled', true).trigger('change');
            } else if (mandatoryValue === 'n') {
                $('#request_location_mandatory').val('').prop('disabled', false);
            }
        });

        $('#source_location_type, #destination_location_type').on('change', function() {
            var selectedText = $(this).find('option:selected').text().trim(); // Get selected text
            var $actionDropdown;
            var selectedOption;
            
            // Determine which dropdown to update
            if ($(this).attr('id') === 'source_location_type') {
                $actionDropdown = $('#source_action');
                selectedOption = "Source";
                $('#source_action').prop('disabled', false);

            } else {
                $actionDropdown = $('#destination_action');
                selectedOption = "Destination";
                $('#destination_action').prop('disabled', false);
            }

            // Update the action dropdown based on the selected location type
            if (selectedText.toLowerCase() === 'inventory location') {
                $actionDropdown.html(`
                    <option selected disabled>Select ${selectedOption} Action</option>
                    <option value="a">Add</option>
                    <option value="s">Subtract</option>
                `).prop('disabled', false);
            } else {
                $actionDropdown.html(`
                    <option selected disabled>Select ${selectedOption} Action</option>
                    <option value="r">Reversal</option>
                    <option value="n">Not Applicable</option>
                `).prop('disabled', false);
            }
        });

        
        $('#add-invtransactiontype').modal('show');
    });
    $(document).on('change', 'input[name="selectedSL[]"]', function() {
        updateHiddenAllServiceLocation();
    });
    //Open Add Inventory Transaction Type Setup

    //Add Inventory Transaction Type
    $('#add_invtransactiontype').submit(function(e) {
        e.preventDefault();
        updateHiddenAllServiceLocation();
        var data = SerializeForm(this);
        var resp = true;
        $(data).each(function(i, field){
            if ((field.value == '') || (field.value == null))
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                    $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                        $(FieldID).text("");
                        $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                    });
                resp = false;
            }
        });

        if(resp != false)
        {
            $.ajax({
                url: "/inventory/addinvtransactiontype",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {
                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-invtransactiontype').modal('hide');
                                $('#view-invtransactiontype').DataTable().ajax.reload();
                                $('#add_invtransactiontype')[0].reset();
                                $('#add_invtransactiontype').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_invtransactiontype').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('#add_invtransactiontype')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Inventory Transaction Type

    // View Inventory Transaction Type Data
    var viewinvtransactiontype =  $('#view-invtransactiontype').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/inventory/invtransactiontype',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            { data: 'sourceDestination', name: 'sourceDestination' },
            { data: 'locationDetails', name: 'locationDetails' },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "300px"
            },
            {
                targets: 5,
                width: "250px"
            }
        ]
    });

    viewinvtransactiontype.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    viewinvtransactiontype.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    viewinvtransactiontype.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Inventory Transaction Type Data

    // Update Inventory Transaction Type Status
    $(document).on('click', '.invtransactiontype_status ', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/inventory/invtransactiontype-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
            var status = xhr.status;
                if(status == 200)
                {
                    $('#view-invtransactiontype').DataTable().ajax.reload();
                }
                },
                error: function(xhr, status, error) {
                    console.log(error);
            }
        });
    });
    // Update Inventory Transaction Type Status

    //Update Inventory Transaction Type Modal
    $(document).on('click', '.edit-invtransactiontype', function() {
        var InnventoryTransactionTypeId = $(this).data('invtransactiontype-id');
        $('input[name="uselectedSL[]"]').prop('checked', false);
        var url = '/inventory/updateinvtransactiontype/' + InnventoryTransactionTypeId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.uedt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('#u_itt-id').val(response.id);
                $('#u_description').val(response.name);
                $('#u_itt_org').html("<option selected value="+ response.orgId +">" + response.orgName + "</option>");

                fetchOrganizations('null', '','#u_itt_org', function(data) {
                    $('#u_itt_org').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        if(response.orgId != value.id)
                        {
                            $('#u_itt_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                        }
                    });
                });
                $('#u_activity_type').val(response.activitytypeId).change();
               
                $('input[name="u_inventorylocation_value"]').val(response.serviceLocation);

                $.ajax({
                    url: '/services/getallsl',
                    type: 'GET',
                    success: function(resp) {
                        $('#uinvserviceLocationModal .modal-body .row').empty();
                        resp.forEach(function(item) {
                            let checkboxHtml = `
                                <div class="col-md-3">
                                    <div class="custom-control custom-checkbox mb-3">
                                        <input type="checkbox" name="uselectedSL[]" data-id="${item.id}" data-name="${item.name}" class="custom-control-input" id="usl_${item.id}">
                                        <label class="custom-control-label" for="usl_${item.id}">${item.name}</label>
                                    </div>
                                </div>
                            `;
                            $('#uinvserviceLocationModal .modal-body .row').append(checkboxHtml);
                        });

                        var serviceLocationIds = response.serviceLocationId;
                        if (serviceLocationIds) {
                            var serviceLocationIdsArray = serviceLocationIds.split(',');
                            for(var i = 0; i < serviceLocationIdsArray.length; i++) {
                                $('#usl_' + serviceLocationIdsArray[i]).prop('checked', true);
                            }
                        }
                    },
                    error: function(xhr, status, error) {
                        if (typeof errorCallback === "function") {
                            errorCallback(error);
                        }
                    }
                });

                // $('#u_inventory_location').val(response.serviceLocationId).change();
                $('#u_applicable_location').val(response.ApplicableLocation).change();
                $('#u_transaction_expired_status').val(response.TransactionExpiredStatus).change();

                $('#u_request_mandatory').on('change', function() {
                    var mandatoryValue = $(this).val();
                    if (mandatoryValue === 'y') {
                        $('#u_request_location_mandatory').val('y').prop('disabled', true).trigger('change');
                    } else if (mandatoryValue === 'n') {
                        $('#u_request_location_mandatory').val('').prop('disabled', false);
                    }
                });
                $('#u_request_mandatory').val(response.requestMandatory).change();
                $('#u_request_location_mandatory').val(response.requestLocationMandatory).change();

                $('#u_source_location_type, #u_destination_location_type').on('change', function() {
                    var selectedText = $(this).find('option:selected').text().trim(); // Get selected text
                    var $actionDropdown;
                    var selectedOption;
                    
                    if ($(this).attr('id') === 'u_source_location_type') {
                        $actionDropdown = $('#u_source_action');
                        selectedOption = "Source";
                        $('#u_source_action').prop('disabled', false);
        
                    } else {
                        $actionDropdown = $('#u_destination_action');
                        selectedOption = "Destination";
                        $('#u_destination_action').prop('disabled', false);
                    }
        
                    if (selectedText.toLowerCase() === 'inventory location') {
                        $actionDropdown.html(`
                            <option selected disabled>Select ${selectedOption} Action</option>
                            <option value="a">Add</option>
                            <option value="s">Subtract</option>
                        `).prop('disabled', false);
                    } else {
                        $actionDropdown.html(`
                            <option selected disabled>Select ${selectedOption} Action</option>
                            <option value="r">Reversal</option>
                            <option value="n">Not Applicable</option>
                        `).prop('disabled', false);
                    }
                });

                $('#u_source_location_type').val(response.sourceLocationTypeId).change();
                $('#u_source_action').val(response.sourceAction).change();
                $('#u_destination_location_type').val(response.destinationLocationTypeId).change();
                $('#u_destination_action').val(response.destinationAction).change();

                $('#edit-invtransactiontype').modal('show');
                $('#ajax-loader').hide();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    $(document).on('change', 'input[name="uselectedSL[]"]', function() {
        updateHiddenUpdatedServiceLocation();
    });
    //Update Inventory Transaction Type Modal

    //Update Inventory Transaction Type
    $('#u_invtransactiontype').on('submit', function (event) {
        event.preventDefault();
        updateHiddenUpdatedServiceLocation();
        var formData = SerializeForm(this);
        var invtransactiontypeId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'u_itt-id') {
                invtransactiontypeId = formData[i].value;
                break;
            }
        }
        var url = 'inventory/update-invtransactiontype/' + invtransactiontypeId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-invtransactiontype').modal('hide');
                            $('#view-invtransactiontype').DataTable().ajax.reload(); // Refresh DataTable
                            $('#u_invtransactiontype')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Inventory Transaction Type
});

$(document).ready(function() {
    // Showing Inventory Type
    OrgChangeSites('#itt_org', '#itt_site', '#add_invmanagement');

    //Open Add Inventory Management Setup
    $(document).on('click', '.add-invmanagement', function() {
        $('#itt_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', true);
        $('#itt_org').html("<option selected disabled value=''>Select Organization</option>");
        fetchOrganizations('null', '','#itt_org', function(data) {
            $('#itt_org').find('option:contains("Loading...")').remove();
            $.each(data, function(key, value) {
                $('#itt_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
            });
        });
        $('#add-invmanagement').modal('show');
    });
    //Open Add Inventory Management Setup
});

$(document).ready(function() {
    //Open Vendor Registration Setup
    $(document).on('click', '.add-vendorregistration', function() {
        var orgId = $('#vendor_org').val();
        if(!orgId)
        {
            $('#vendor_org').html("<option selected disabled value=''>Select Organization</option>");
            fetchOrganizations('null', '','#vendor_org', function(data) {
                $('#vendor_org').find('option:contains("Loading...")').remove();
                $.each(data, function(key, value) {
                    $('#vendor_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                });
            });
        }
        $('#add-vendorregistration').modal('show');
    });
    //Open Vendor Registration Setup

    // //Add Vendor Registration
    $('#add_vendorregistration').submit(function(e) {
        e.preventDefault();
        var data = SerializeForm(this);
        var resp = true;
        $(data).each(function(i, field){
            if (((field.value == '') || (field.value == null)) && (field.name != 'vendor_landline'))
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                $( 'textarea[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('textarea[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $( 'textarea[name= "' +FieldName +'"' ).addClass('requirefield');
                resp = false;
            }
        });

        if(resp != false)
        {
            $.ajax({
                url: "/inventory/addvendorregistration",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {
                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-vendorregistration').modal('hide');
                                $('#view-vendorregistration').DataTable().ajax.reload();
                                $('#add_vendorregistration')[0].reset();
                                $('#add_vendorregistration').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_vendorregistration').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('#add_vendorregistration')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    // //Add Vendor Registration

    // View Vendor Data
    var viewVendor =  $('#view-vendorregistration').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/inventory/vendorregistration',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            {
                "data": 'address',
                "render": function(data, type, row) {
                    return data.replace(/\b\w/g, function(char) { return char.toUpperCase(); });
                }
            },
            { data: 'contactDetails', name: 'contactDetails' },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "300px"
            },
            {
                targets: 2,
                width: "250px"
            },
            {
                targets: 3,
                width: "250px"
            },
            {
                targets: 5,
                width: "300px"
            }
        ]
    });

    viewVendor.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    viewVendor.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    viewVendor.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Vendor Data

    // Update Vendor Status
    $(document).on('click', '.vendor_status ', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/inventory/vendor-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
            var status = xhr.status;
                if(status == 200)
                {
                    $('#view-vendorregistration').DataTable().ajax.reload();
                }
                },
                error: function(xhr, status, error) {
                    console.log(error);
            }
        });
    });
    // Update Vendor Status

    //Update Vendor Registration Modal
    $(document).on('click', '.edit-vendor', function() {
        var vendorId = $(this).data('vendor-id');
        var url = '/inventory/updatevendorregistration/' + vendorId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                console.log(response);
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.uedt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('.u_vendor-id').val(response.id);
                $('.u_vendor_desc').val(response.name);
                $('#u_vendor_org').html("<option selected value="+ response.orgId +">" + response.orgName + "</option>");

                fetchOrganizations('null', '','#u_vendor_org', function(data) {
                    $('#u_vendor_org').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        if(response.orgId != value.id)
                        {
                            $('#u_vendor_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                        }
                    });
                });
                $('.u_vendor_address').val(response.address);
                $('.u_vendor_name').val(response.personName);
                $('.u_vendor_email').val(response.personEmail);
                $('.u_vendor_cell').val(response.cellNo);
                $('.u_vendor_landline').val(response.landlineNo);
                $('.u_vendor_remarks').val(response.remarks);

                $('#edit-vendorregistration').modal('show');
                $('#ajax-loader').hide();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Vendor Registration Modal

    //Update Vendor Registration
    $('#update_vendorregistration').on('submit', function (event) {
        event.preventDefault();
        var formData = SerializeForm(this);
        var vendorId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'u_vendor-id') {
                vendorId = formData[i].value;
                break;
            }
        }
        var url = 'inventory/update-vendorregistration/' + vendorId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });

            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-vendorregistration').modal('hide');
                            $('#view-vendorregistration').DataTable().ajax.reload(); // Refresh DataTable
                            $('#u_vendorregistration')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Vendor Registration
});

// Third Party Registration Setup
$(document).ready(function() {
    //Open Third Party Registration Setup
    $(document).on('click', '.tp-registration', function() {
        var orgId = $('#tp_org').val();
        if(!orgId)
        {
            $('#tp_org').html("<option selected disabled value=''>Select Organization</option>");
            fetchOrganizations('null', '','#tp_org', function(data) {
                $('#tp_org').find('option:contains("Loading...")').remove();
                $.each(data, function(key, value) {
                    $('#tp_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                });
            });
        }
        $('.tp_corporate').hide();
        $('#vendor_cat').change(function() {
            var selectedType = $(this).val();
            if (selectedType === 'c') {
                $('.tp_corporate').show();
            } else {
                $('.tp_corporate').hide();
            }
        });

        $('#tp-registration').modal('show');
    });
    //Open Third Party Registration Setup

    //Add Third Party Registration
    $('#register_tp').submit(function(e) {
        e.preventDefault();
        var data = SerializeForm(this);
        var resp = true;
        $(data).each(function(i, field){
            if (((field.value == '') || (field.value == null)) && (field.name != 'tp_landline') && (field.name != 'tp_remarks')  && (field.name != 'tp_corporate_name'))
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                $( 'textarea[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('textarea[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $( 'textarea[name= "' +FieldName +'"' ).addClass('requirefield');
                resp = false;
            }
        });

        var VendorCat = $('#vendor_cat').val();
        if (VendorCat === 'c') {
            var CorporateField = $('input[name="tp_corporate_name"]');
            if (CorporateField.val() == '' || CorporateField.val() == null) {
                $('#tp_corporate_name_error').text("This field is required");
                CorporateField.addClass('requirefield');
                CorporateField.focus(function() {
                    $('#tp_corporate_name_error').text("");
                    $(this).removeClass("requirefield");
                });
                resp = false;
            }
        }

        if(resp != false)
        {
            $.ajax({
                url: "/inventory/addthirdpartyregistration",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {
                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#tp-registration').modal('hide');
                                $('#view-tpregistration').DataTable().ajax.reload();
                                $('#register_tp')[0].reset();
                                $('#register_tp').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#register_tp').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('#register_tp')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Third Party Registration

    // View Third Party Data
    var viewThirdParty =  $('#view-tpregistration').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/inventory/thirdpartyregistration',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            {
                "data": 'address',
                "render": function(data, type, row) {
                    return data.replace(/\b\w/g, function(char) { return char.toUpperCase(); });
                }
            },
            { data: 'contactDetails', name: 'contactDetails' },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "300px"
            },
            {
                targets: 2,
                width: "250px"
            },
            {
                targets: 3,
                width: "300px"
            },
            {
                targets: 4,
                width: "300px"
            }
        ]
    });

    viewThirdParty.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    viewThirdParty.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    viewThirdParty.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Third Party Data

    // Update Third Party Status
    $(document).on('click', '.tp_status ', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/inventory/tp-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
                var status = xhr.status;
                if(status == 200)
                {
                    $('#view-tpregistration').DataTable().ajax.reload();
                }
            },
            error: function(xhr, status, error) {
                console.log(error);
            }
        });
    });
    // Update Third Party Status

    //Update Third Party Modal
    $(document).on('click', '.edit-tp', function() {
        var tpId = $(this).data('tp-id');
        var url = '/inventory/updatetpregistration/' + tpId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.uedt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('.u_tp-id').val(response.id);
                $('#u_tp_org').html("<option selected value="+ response.orgId +">" + response.orgName + "</option>");
                fetchOrganizations('null', '','#u_tp_org', function(data) {
                    $('#u_tp_org').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        if(response.orgId != value.id)
                        {
                            $('#u_tp_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                        }
                    });
                });
                if(response.vendorCat == 'c'){
                    $('.ucorporateName').show();
                    $('.u_tp_corporate_name').prop('required', true);
                }
                else{
                    $('.ucorporateName').hide();
                    $('.u_tp_corporate_name').prop('required', false);
                }
                $('.u_registration_type').val(response.registrationType).change();
              
                $('.u_vendor_cat').val(response.vendorCat).change();
                $('.u_vendor_cat').change(function() {
                    var selectedType = $(this).val();
                    if (selectedType === 'c') {
                        $('.ucorporateName').show();
                        $('.u_tp_corporate_name').prop('required', true);

                    } else {
                        $('.ucorporateName').hide();
                        $('.u_tp_corporate_name').prop('required', false);
                    }
                });
                $('.u_tp_corporate_name').val(response.corporateName);
                $('.u_tp_name').val(response.personName);
                $('.u_tp_email').val(response.personEmail);
                $('.u_tp_cell').val(response.cellNo);
                $('.u_tp_landline').val(response.landlineNo);
                $('.u_tp_address').val(response.address);
                $('.u_tp_remarks').val(response.remarks);
                $('#edit-tp').modal('show');
                $('#ajax-loader').hide();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Third Party Modal

    //Update Third Party Registration
    $('#u_register_tp').on('submit', function (event) {
        event.preventDefault();
        var formData = SerializeForm(this);
        var tpId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'u_tp-id') {
                tpId = formData[i].value;
                break;
            }
        }
        var url = 'inventory/update-tpregistration/' + tpId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });

            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-tp').modal('hide');
                            $('#view-tpregistration').DataTable().ajax.reload(); // Refresh DataTable
                            $('#u_register_tp')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Third Party Registration
});
// Third Party Registration Setup

// Consumption Group Setup
$(document).ready(function() {
    //Open Consumption Group Setup
    $(document).on('click', '.add-consumptiongroup', function() {
        var orgId = $('#cg_org').val();
        if(!orgId)
        {
            $('#cg_org').html("<option selected disabled value=''>Select Organization</option>");
            fetchOrganizations('null', '','#cg_org', function(data) {
                $('#cg_org').find('option:contains("Loading...")').remove();
                $.each(data, function(key, value) {
                    $('#cg_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                });
            });
        }
        $('#add-consumptiongroup').modal('show');
    });
    //Open Consumption Group Setup

    //Add Consumption Group
    $('#add_consumptiongroup').submit(function(e) {
        e.preventDefault();
        var data = SerializeForm(this);
        var resp = true;
        $(data).each(function(i, field){
            if (((field.value == '') || (field.value == null)))
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                $( 'textarea[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('textarea[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $( 'textarea[name= "' +FieldName +'"' ).addClass('requirefield');
                resp = false;
            }
        });

        if(resp != false)
        {
            $.ajax({
                url: "/inventory/addconsumptiongroup",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {
                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-consumptiongroup').modal('hide');
                                $('#view-consumptiongroup').DataTable().ajax.reload();
                                $('#add_consumptiongroup')[0].reset();
                                $('#add_consumptiongroup').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_consumptiongroup').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('#add_consumptiongroup')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Consumption Group

    // View Consumption Group
    var viewConsumptionGroup =  $('#view-consumptiongroup').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/inventory/viewconsumptiongroup',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            { data: 'remarks', name: 'remarks' },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "300px"
            },
            {
                targets: 2,
                width: "250px"
            },
            {
                targets: 3,
                width: "300px"
            }
            
        ]
    });

    viewConsumptionGroup.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    viewConsumptionGroup.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    viewConsumptionGroup.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Consumption Group

    // Update Consumption Group Status
    $(document).on('click', '.cg_status ', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/inventory/cg-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
                var status = xhr.status;
                if(status == 200)
                {
                    $('#view-consumptiongroup').DataTable().ajax.reload();
                }
            },
            error: function(xhr, status, error) {
                console.log(error);
            }
        });
    });
    // Update Consumption Group Status

    //Update Consumption Group Modal
    $(document).on('click', '.edit-cg', function() {
        var tpId = $(this).data('cg-id');
        var url = '/inventory/updateconsumptiongroup/' + tpId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.uedt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('.u_cg-id').val(response.id);
                $('#u_cg_org').html("<option selected value="+ response.orgId +">" + response.orgName + "</option>");
                fetchOrganizations('null', '','#u_cg_org', function(data) {
                    $('#u_cg_org').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        if(response.orgId != value.id)
                        {
                            $('#u_cg_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                        }
                    });
                });
               
                $('.u_cg_desc').val(response.desc);
                $('.u_cg_remarks').val(response.remarks);
                $('#edit-cg').modal('show');
                $('#ajax-loader').hide();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Consumption Group Modal

    //Update Consumption Group
    $('#u_consumptiongroup').on('submit', function (event) {
        event.preventDefault();
        var formData = SerializeForm(this);
        var tpId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'u_cg-id') {
                tpId = formData[i].value;
                break;
            }
        }
        var url = 'inventory/update-consumptiongroup/' + tpId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });

            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-cg').modal('hide');
                            $('#view-consumptiongroup').DataTable().ajax.reload(); // Refresh DataTable
                            $('#u_consumptiongroup')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Consumption Group
});
// Consumption Group Setup

// Consumption Method Setup
$(document).ready(function() {
    //Open Consumption Method Setup
    $(document).on('click', '.add-consumptionmethod', function() {
        var orgId = $('#cm_org').val();
        if(!orgId)
        {
            $('#cm_org').html("<option selected disabled value=''>Select Organization</option>");
            fetchOrganizations('null', '','#cm_org', function(data) {
                $('#cm_org').find('option:contains("Loading...")').remove();
                $.each(data, function(key, value) {
                    $('#cm_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                });
            });
        }
        $('#add-consumptionmethod').modal('show');
    });
    //Open Consumption Method Setup

    //Add Consumption Method
    $('#add_consumptionmethod').submit(function(e) {
        e.preventDefault();
        var data = SerializeForm(this);
        var resp = true;
        $(data).each(function(i, field){
            if (((field.value == '') || (field.value == null)))
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                $( 'textarea[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('textarea[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $( 'textarea[name= "' +FieldName +'"' ).addClass('requirefield');
                resp = false;
            }
        });

        if(resp != false)
        {
            $.ajax({
                url: "/inventory/addconsumptionmethod",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {
                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-consumptionmethod').modal('hide');
                                $('#view-consumptionmethod').DataTable().ajax.reload();
                                $('#add_consumptionmethod')[0].reset();
                                $('#add_consumptionmethod').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_consumptionmethod').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('#add_consumptionmethod')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Consumption Method

    // View Consumption Method
    var viewConsumptionMethod =  $('#view-consumptionmethod').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/inventory/viewconsumptionmethod',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            { data: 'criteria', name: 'criteria' },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "350px"
            },
            {
                targets: 2,
                width: "350px"
            },
            {
                targets: 4,
                width: "350px"
            }
        ]
    });

    viewConsumptionMethod.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    viewConsumptionMethod.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    viewConsumptionMethod.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Consumption Method

    // Update Consumption Method Status
    $(document).on('click', '.cm_status ', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/inventory/cm-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
                var status = xhr.status;
                if(status == 200)
                {
                    $('#view-consumptionmethod').DataTable().ajax.reload();
                }
            },
            error: function(xhr, status, error) {
                console.log(error);
            }
        });
    });
    // Update Consumption Method Status

    //Update Consumption Method Modal
    $(document).on('click', '.edit-cm', function() {
        var tpId = $(this).data('cm-id');
        var url = '/inventory/updateconsumptionmethod/' + tpId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.uedt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('.u_cm-id').val(response.id);
                $('#u_cm_org').html("<option selected value="+ response.orgId +">" + response.orgName + "</option>");
                fetchOrganizations('null', '','#u_cm_org', function(data) {
                    $('#u_cm_org').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        if(response.orgId != value.id)
                        {
                            $('#u_cm_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                        }
                    });
                });
                $('.u_cm_desc').val(response.desc);
                $('.u_cm_criteria').val(response.criteria);
                $('#u_cm_group').val(response.groupId).change();

                $('#edit-cm').modal('show');
                $('#ajax-loader').hide();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Consumption Method Modal

    //Update Consumption Method
    $('#u_consumptionmethod').on('submit', function (event) {
        event.preventDefault();
        var formData = SerializeForm(this);
        var tpId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'u_cm-id') {
                tpId = formData[i].value;
                break;
            }
        }
        var url = 'inventory/update-consumptionmethod/' + tpId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });

            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-cm').modal('hide');
                            $('#view-consumptionmethod').DataTable().ajax.reload(); // Refresh DataTable
                            $('#u_consumptionmethod')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Consumption Method
});
// Consumption Method Setup

// Stock Monitoring Setup
$(document).ready(function() {
    //Open Stock Monitoring Setup
    $(document).on('click', '.add-stockmonitoring', function() {
        var orgId = $('#sm_org').val();
        if(orgId)
        {
            $('#sm_org').html("<option selected disabled value=''>Select Organization</option>");
            fetchOrganizations('null', '','#sm_org', function(data) {
                $('#sm_org').find('option:contains("Loading...")').remove();
                $.each(data, function(key, value) {
                    $('#sm_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                });
            });
            $('#sm_site').html("<option selected disabled value=''>Select Site</option>");
            fetchOrganizationSites(orgId, '#sm_site', function(data) {
                $.each(data, function(key, value) {
                    $('#sm_site').append('<option value="' + value.id + '">' + value.name + '</option>');
                });
            });

            $('#sm_generic').html("<option selected disabled value=''>Select Item Generic</option>");
            fetchOrganizationItemGeneric(orgId, '#sm_generic', function(data) {
                $.each(data, function(key, value) {
                    $('#sm_generic').append('<option value="' + value.id + '">' + value.name + '</option>');
                });
            });
            
        }
        else{
            $('#sm_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', true);
            OrgChangeSites('#sm_org', '#sm_site', '#add_stockmonitoring');

            $('#sm_generic').html("<option selected disabled value=''>Select Item Generic</option>").prop('disabled', true);
            OrgChangeInventoryGeneric('#sm_org', '#sm_generic', '#add_stockmonitoring');
        }
        $('#sm_location').html("<option selected disabled value=''>Select Service Location</option>").prop('disabled', true);
        SiteChangeActivatedServiceLocation('#sm_site','#sm_location', '#add_stockmonitoring');
        
        $('#sm_brand').html("<option selected disabled value=''>Select Item Brand</option>").prop('disabled', true);
        GenericChangeBrand('#sm_generic', '#sm_brand', '#add_stockmonitoring');
        
        $('#add-stockmonitoring').modal('show');
    });
    //Open Stock Monitoring Setup

    //Add Stock Monitoring Method
    $('#add_stockmonitoring').submit(function(e) {
        e.preventDefault();
        var data = SerializeForm(this);
        var resp = true;
        $(data).each(function(i, field){
            if (((field.value == '') || (field.value == null)) && (field.name != 'sm_brand'))
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                $( 'textarea[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('textarea[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $( 'textarea[name= "' +FieldName +'"' ).addClass('requirefield');
                resp = false;
            }
        });

        if(resp != false)
        {
            $.ajax({
                url: "/inventory/addstockmonitoring",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {
                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-stockmonitoring').modal('hide');
                                $('#view-stockmonitoring').DataTable().ajax.reload();
                                $('#add_stockmonitoring')[0].reset();
                                $('#add_stockmonitoring').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_stockmonitoring').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('#add_stockmonitoring')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Stock Monitoring Method

    // View Stock Monitoring 
    var viewStockMonitoring =  $('#view-stockmonitoring').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/inventory/viewstockmonitoring',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            { data: 'stock_details', name: 'stock_details' },
            { data: 'contact_details', name: 'contact_details' },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "300px"
            },
            {
                targets: 2,
                width: "300px"
            },
            {
                targets: 3,
                width: "350px"
            },
            {
                targets: 5,
                width: "300px"
            }
        ]
    });

    viewStockMonitoring.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    viewStockMonitoring.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    viewStockMonitoring .on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Stock Monitoring 

    // Update Stock Monitoring  Status
    $(document).on('click', '.sm_status ', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/inventory/sm-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
                var status = xhr.status;
                if(status == 200)
                {
                    $('#view-stockmonitoring').DataTable().ajax.reload();
                }
            },
            error: function(xhr, status, error) {
                console.log(error);
            }
        });
    });
    // Update Stock Monitoring  Status

    //Update Stock Monitoring Modal
    $(document).on('click', '.edit-sm', function() {
        var smId = $(this).data('sm-id');
        var url = '/inventory/updatestockmonitoring/' + smId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.uedt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('.u_sm-id').val(response.id);
                $('#u_sm_org').html("<option selected value="+ response.orgId +">" + response.orgName + "</option>");
                fetchOrganizations('null', '','#u_sm_org', function(data) {
                    $('#u_sm_org').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        if(response.orgId != value.id)
                        {
                            $('#u_sm_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                        }
                    });
                });

                $('#u_sm_site').html("<option selected value="+ response.siteId +">" + response.siteName + "</option>");
                fetchSites(response.orgId, '#u_sm_site', function(data) {
                    $.each(data, function(key, value) {
                        $('#u_sm_site').append('<option value="' + value.id + '">' + value.name + '</option>');
                    });
                }, function(error) {
                    console.log(error);
                },response.siteId);
                OrgChangeSites('#u_sm_org', '#u_sm_site', '#u_stockmonitoring');

                $('#u_sm_generic').html("<option selected value="+ response.genericId +">" + response.genericName + "</option>");
                fetchOrganizationItemGeneric(response.orgId, '#u_sm_generic', function(data) {
                    $.each(data, function(key, value) {
                        if(response.genericId != value.id)
                        {
                            $('#u_sm_generic').append('<option value="' + value.id + '">' + value.name + '</option>');
                        }
                    });
                });
                OrgChangeInventoryGeneric('#u_sm_org', '#u_sm_generic', '#u_stockmonitoring');

                $('#u_sm_brand').html("<option selected value="+ response.brandId +">" + response.brandName + "</option>");
                fetchGenericItemBrand(response.genericId, '#u_sm_brand', function(data) {
                    $.each(data, function(key, value) {
                        if(response.brandId != value.id)
                        {
                            $('#u_sm_brand').append('<option value="' + value.id + '">' + value.name + '</option>');
                        }
                    });
                });
                GenericChangeBrand('#u_sm_generic', '#u_sm_brand', '#u_stockmonitoring');

                $('#u_sm_servicelocation').html("<option selected value="+ response.serviceLocationId +">" + response.serviceLocation + "</option>");
                fetchActiveSL(response.siteId, '#u_sm_servicelocation', function(data) {
                    $.each(data, function(key, value) {
                        if(response.serviceLocationId != value.id)
                        {
                            $('#u_sm_servicelocation').append('<option value="' + value.id + '">' + value.name + '</option>');
                        }
                    });
                });
                SiteChangeActivatedServiceLocation('#u_sm_site','#u_sm_servicelocation', '#u_stockmonitoring');


                $('#u_sm_min_stock').val(response.minStock);
                $('#u_sm_max_stock').val(response.maxStock);
                $('#u_sm_monthly_consumption').val(response.monthlyConsumption);
                $('#u_sm_min_reorder').val(response.minReorder);
                $('#u_sm_primary_email').val(response.PrimaryEmail);
                $('#u_sm_secondary_email').val(response.secondaryEmail);

                $('#edit-sm').modal('show');
                $('#ajax-loader').hide();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Stock Monitoring Modal

    //Update Stock Monitoring Method
    $('#u_stockmonitoring').on('submit', function (event) {
        event.preventDefault();
        var formData = SerializeForm(this);
        var smId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'u_sm-id') {
                smId = formData[i].value;
                break;
            }
        }
        var url = 'inventory/update-stockmonitoring/' + smId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });

            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-sm').modal('hide');
                            $('#view-stockmonitoring').DataTable().ajax.reload(); // Refresh DataTable
                            $('#u_stockmonitoring')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Stock Monitoring Method
});
// Stock Monitoring Setup

// Inventory Source Destination Type Setup
$(document).ready(function() {
    // Open Inventory Source Destination Type Setup
    $(document).on('click', '.add-invsdt', function() {
        var orgId = $('#invsdt_org').val();
        if(orgId)
        {
            $('#invsdt_org').html("<option selected disabled value=''>Select Organization</option>");
            fetchOrganizations('null', '','#invsdt_org', function(data) {
                $('#invsdt_org').find('option:contains("Loading...")').remove();
                $.each(data, function(key, value) {
                    $('#invsdt_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                });
            });
        }
        $('#add-invsdt').modal('show');
    });
    //Open Inventory Source Destination Type Setup

    //Add Inventory Source Destination Type
    $('#add_invsdt').submit(function(e) {
        e.preventDefault();
        var data = SerializeForm(this);
        var resp = true;
        $(data).each(function(i, field){
            if (((field.value == '') || (field.value == null)) && (field.name != 'sm_brand'))
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                resp = false;
            }
        });

        if(resp != false)
        {
            $.ajax({
                url: "/inventory/addsourcedestinationtype",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {
                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-invsdt').modal('hide');
                                $('#view-invsdt').DataTable().ajax.reload();
                                $('#add_invsdt')[0].reset();
                                $('#add_invsdt').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_invsdt').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('#add_invsdt')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Inventory Source Destination Type

    // View Inventory Source Destination Type
    var viewInventorySourceDestinationType =  $('#view-invsdt').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/inventory/viewsourcedestinationtype',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            { data: 'type', name: 'type' },
            { data: 'third_party_status', name: 'third_party_status' },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "300px"
            },
            {
                targets: 2,
                width: "300px"
            },
            {
                targets: 3,
                width: "350px"
            },
            {
                targets: 5,
                width: "300px"
            }
        ]
    });

    viewInventorySourceDestinationType.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    viewInventorySourceDestinationType.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    viewInventorySourceDestinationType .on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // Inventory Source Destination Type

    // Update Inventory Source Destination Type Status
    $(document).on('click', '.invsdt_status ', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/inventory/invsdt-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
                var status = xhr.status;
                if(status == 200)
                {
                    $('#view-invsdt').DataTable().ajax.reload();
                }
            },
            error: function(xhr, status, error) {
                console.log(error);
            }
        });
    });
    // Update Inventory Source Destination Type Status

    //Update Inventory Source Destination Type Modal
    $(document).on('click', '.edit-invsdt', function() {
        var invsdtId = $(this).data('invsdt-id');
        var url = '/inventory/updatesourcedestinationtype/' + invsdtId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.uedt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('.u_invsdt-id').val(response.id);
                $('#u_invsdt_org').html("<option selected value="+ response.orgId +">" + response.orgName + "</option>");
                fetchOrganizations('null', '','#u_invsdt_org', function(data) {
                    $('#u_invsdt_org').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        if(response.orgId != value.id)
                        {
                            $('#u_invsdt_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                        }
                    });
                });

                $('#u_invsd_type').val(response.type);
                $('#u_invsdt_tps').val(response.third_party).change();
                $('#edit-invsdt').modal('show');
                $('#ajax-loader').hide();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Inventory Source Destination Type Modal

    //Update Inventory Source Destination Type
    $('#u_invsdt').on('submit', function (event) {
        event.preventDefault();
        var formData = SerializeForm(this);
        var invsdtId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'u_invsdt-id') {
                invsdtId = formData[i].value;
                break;
            }
        }
        var url = 'inventory/update-sourcedestinationtype/' + invsdtId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });

            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-invsdt').modal('hide');
                            $('#view-invsdt').DataTable().ajax.reload(); // Refresh DataTable
                            $('#u_invsdt')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Inventory Source Destination Type
});
// Inventory Source Destination Type Setup

// Inventory Transaction Activity Setup
$(document).ready(function() {
    // Open Inventory Transaction Activity Setup
    $(document).on('click', '.add-invta', function() {
        var orgId = $('#invta_org').val();
        if(orgId)
        {
            $('#invta_org').html("<option selected disabled value=''>Select Organization</option>");
            fetchOrganizations('null', '','#invta_org', function(data) {
                $('#invta_org').find('option:contains("Loading...")').remove();
                $.each(data, function(key, value) {
                    $('#invta_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                });
            });
        }
        $('#add-invta').modal('show');
    });
    //Open Inventory Transaction Activity Setup

    //Add Inventory Transaction Activity
    $('#add_invta').submit(function(e) {
        e.preventDefault();
        var data = SerializeForm(this);
        var resp = true;
        $(data).each(function(i, field){
            if (((field.value == '') || (field.value == null)) && (field.name != 'sm_brand'))
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                resp = false;
            }
        });

        if(resp != false)
        {
            $.ajax({
                url: "/inventory/addtransactionactivity",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {
                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-invta').modal('hide');
                                $('#view-invta').DataTable().ajax.reload();
                                $('#add_invta')[0].reset();
                                $('#add_invta').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_invta').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('#add_invta')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Inventory Transaction Activity

    // View Inventory Transaction Activity
    var viewInventoryTransactionActivity =  $('#view-invta').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/inventory/viewtransactionactivity',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            { data: 'desc', name: 'desc' },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "300px"
            },
            {
                targets: 2,
                width: "300px"
            },
            {
                targets: 4,
                width: "300px"
            }
        ]
    });

    viewInventoryTransactionActivity.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    viewInventoryTransactionActivity.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    viewInventoryTransactionActivity .on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    //View Inventory Transaction Activity

    // Update Inventory Transaction Activity Status
    $(document).on('click', '.invta_status ', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/inventory/invta-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
                var status = xhr.status;
                if(status == 200)
                {
                    $('#view-invta').DataTable().ajax.reload();
                }
            },
            error: function(xhr, status, error) {
                console.log(error);
            }
        });
    });
    // Update Inventory Transaction Activity Status

    //Update Inventory Transaction Activity Modal
    $(document).on('click', '.edit-invta', function() {
        var invtaId = $(this).data('invta-id');
        var url = '/inventory/updatetransactionactivity/' + invtaId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                console.log(response);
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.uedt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('.u_invta-id').val(response.id);
                $('#u_invta_org').html("<option selected value="+ response.orgId +">" + response.orgName + "</option>");
                fetchOrganizations('null', '','#u_invta_org', function(data) {
                    $('#u_invta_org').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        if(response.orgId != value.id)
                        {
                            $('#u_invta_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                        }
                    });
                });

                $('#u_invtransactionactivity').val(response.desc);
                $('#edit-invta').modal('show');
                $('#ajax-loader').hide();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Inventory Transaction Activity Modal

    //Update Inventory Transaction Activity
    $('#u_invta').on('submit', function (event) {
        event.preventDefault();
        var formData = SerializeForm(this);
        var invsdtId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'u_invta-id') {
                invsdtId = formData[i].value;
                break;
            }
        }
        var url = 'inventory/update-transactionactivity/' + invsdtId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });

            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-invta').modal('hide');
                            $('#view-invta').DataTable().ajax.reload(); 
                            $('#u_invta')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                console.log(xhr.responseText);
            }
        });
    });
    //Update Inventory Transaction Activity
});
// Inventory Transaction Activity Setup

$(document).ready(function() {
    //Open Medication Routes Setup
    $(document).on('click', '.add-medicationroutes', function() {
        var orgId = $('#medicationroute_org').val();
        if(!orgId)
        {
            $('#medicationroute_org').html("<option selected disabled value=''>Select Organization</option>");
            fetchOrganizations('null', '','#medicationroute_org', function(data) {
                $('#medicationroute_org').find('option:contains("Loading...")').remove();
                $.each(data, function(key, value) {
                    $('#medicationroute_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                });
            });
        }
        $('#add-medicationroutes').modal('show');
    });
    //Open Medication Routes Setup

    //Add Medication Routes
    $('#add_medicationroutes').submit(function(e) {
        e.preventDefault();
        var data = SerializeForm(this);
        var resp = true;
        $(data).each(function(i, field){
            if ((field.value == '') || (field.value == null))
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                resp = false;
            }
        });

        if(resp != false)
        {
            $.ajax({
                url: "/inventory/addmedicationroutes",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {
                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-medicationroutes').modal('hide');
                                $('#view-medicationroutes').DataTable().ajax.reload();
                                $('#add_medicationroutes')[0].reset();
                                $('#add_medicationroutes').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_medicationroutes').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('#add_medicationroutes')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Medication Routes

    // View Medication Routes Data
    var viewmedicationRoutes =  $('#view-medicationroutes').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/inventory/medicationroutes',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            {
                "data": 'name',
                "render": function(data, type, row) {
                    return data.replace(/\b\w/g, function(char) { return char.toUpperCase(); });
                }
            },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "300px"
            },
            {
                targets: 4,
                width: "250px"
            }
        ]
    });

    viewmedicationRoutes.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    viewmedicationRoutes.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    viewmedicationRoutes.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Medication Routes Data

    // Update Medication Routes Status
    $(document).on('click', '.medicationRoute_status ', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/inventory/medicationroute-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
            var status = xhr.status;
                if(status == 200)
                {
                    $('#view-medicationroutes').DataTable().ajax.reload();
                }
                },
                error: function(xhr, status, error) {
                    console.log(error);
            }
        });
    });
    // Update Medication Routes Status

    //Update Medication Routes Modal
    $(document).on('click', '.edit-medicationRoute', function() {
        var medicationRouteId = $(this).data('medicationroute-id');
        var url = '/inventory/updatemedicationroutes/' + medicationRouteId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.uedt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('.u_medicationroute-id').val(response.id);
                $('.u_medicationroute').val(response.name);
                $('#u_medicationroute_org').html("<option selected value="+ response.orgId +">" + response.orgName + "</option>");

                fetchOrganizations('null', '','#u_medicationroute_org', function(data) {
                    $('#u_medicationroute_org').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        if(response.orgId != value.id)
                        {
                            $('#u_medicationroute_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                        }
                    });
                });
                $('#edit-medicationroutes').modal('show');
                $('#ajax-loader').hide();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Medication Routes Modal

    //Update Medication Routes
    $('#update_medicationroutes').on('submit', function (event) {
        event.preventDefault();
        var formData = SerializeForm(this);
        var medicationRouteId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'u_medicationroute-id') {
                medicationRouteId = formData[i].value;
                break;
            }
        }
        var url = 'inventory/update-medicationRoute/' + medicationRouteId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });

            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-medicationroutes').modal('hide');
                            $('#view-medicationroutes').DataTable().ajax.reload(); // Refresh DataTable
                            $('#u_medicationroutes')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Medication Routes
});

$(document).ready(function() {
    //Open Medication Frequency Setup
    $(document).on('click', '.add-medicationfrequency', function() {
        var orgId = $('#medicationfrequency_org').val();
        if(!orgId)
        {
            $('#medicationfrequency_org').html("<option selected disabled value=''>Select Organization</option>");
            fetchOrganizations('null', '','#medicationfrequency_org', function(data) {
                $('#medicationfrequency_org').find('option:contains("Loading...")').remove();
                $.each(data, function(key, value) {
                    $('#medicationfrequency_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                });
            });
        }
        $('#add-medicationfrequency').modal('show');
    });
    //Open Medication Frequency Setup

    //Add Medication Frequency
    $('#add_medicationfrequency').submit(function(e) {
        e.preventDefault();
        var data = SerializeForm(this);
        var resp = true;
        $(data).each(function(i, field){
            if ((field.value == '') || (field.value == null))
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                resp = false;
            }
        });

        if(resp != false)
        {
            $.ajax({
                url: "/inventory/addmedicationfrequency",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {
                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-medicationfrequency').modal('hide');
                                $('#view-medicationfrequency').DataTable().ajax.reload();
                                $('#add_medicationfrequency')[0].reset();
                                $('#add_medicationfrequency').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_medicationfrequency').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('#add_medicationfrequency')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Medication Frequency

    // View Medication Frequency Data
    var viewmedicationFrequency =  $('#view-medicationfrequency').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/inventory/medicationfrequency',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            {
                "data": 'name',
                "render": function(data, type, row) {
                    return data.replace(/\b\w/g, function(char) { return char.toUpperCase(); });
                }
            },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "300px"
            },
            {
                targets: 4,
                width: "250px"
            }
        ]
    });

    viewmedicationFrequency.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    viewmedicationFrequency.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    viewmedicationFrequency.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Medication Frequency Data

    // Update Medication Frequency Status
    $(document).on('click', '.medicationfrequency_status ', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/inventory/medicationfrequency-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
            var status = xhr.status;
                if(status == 200)
                {
                    $('#view-medicationfrequency').DataTable().ajax.reload();
                }
                },
                error: function(xhr, status, error) {
                    console.log(error);
            }
        });
    });
    // Update Medication Frequency Status

    //Update Medication Frequency Modal
    $(document).on('click', '.edit-medicationfrequency', function() {
        var medicationFrequencyId = $(this).data('medicationfrequency-id');
        var url = '/inventory/updatemedicationfrequency/' + medicationFrequencyId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.uedt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('.u_medicationfrequency-id').val(response.id);
                $('.u_medicationfrequency').val(response.name);
                $('#u_medicationfrequency_org').html("<option selected value="+ response.orgId +">" + response.orgName + "</option>");

                fetchOrganizations('null', '','#u_medicationfrequency_org', function(data) {
                    $('#u_medicationfrequency_org').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        if(response.orgId != value.id)
                        {
                            $('#u_medicationfrequency_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                        }
                    });
                });
                $('#edit-medicationfrequency').modal('show');
                $('#ajax-loader').hide();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Medication Frequency Modal

    //Update Medication Frequency
    $('#update_medicationfrequency').on('submit', function (event) {
        event.preventDefault();
        var formData = SerializeForm(this);
        var medicationFrequencyId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'u_medicationfrequency-id') {
                medicationFrequencyId = formData[i].value;
                break;
            }
        }
        var url = 'inventory/update-medicationfrequency/' + medicationFrequencyId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });

            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-medicationfrequency').modal('hide');
                            $('#view-medicationfrequency').DataTable().ajax.reload(); // Refresh DataTable
                            $('#u_medicationfrequency')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Medication Frequency


});

$(document).ready(function() {
    //Open Add Requisition For Material Consumption Setup
    $(document).on('click', '.add-materialconsumption', function() {
        var orgId = $('#mc_org').val();
        if(!orgId)
        {
           
            $('#mc_org').html("<option selected disabled value=''>Select Organization</option>");
            fetchOrganizations('null', '','#mc_org', function(data) {
                $('#mc_org').find('option:contains("Loading...")').remove();
                $.each(data, function(key, value) {
                    $('#mc_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                });
            });
            $('#mc_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled',true);
            OrgChangeSites('#mc_org', '#mc_site', '#add_materialconsumption');

              $('#mc_itemcat').html("<option selected disabled value=''>Select Category</option>").prop('disabled', true);
            OrgChangeItemCategory('#mc_org', '#mc_itemcat', '#u_invtype');
        }
        else{
            fetchOrganizationSites(orgId, '#mc_site', function(data) {
                $('#mc_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', false);
                $.each(data, function(key, value) {
                    $('#mc_site').append('<option value="' + value.id + '">' + value.name + '</option>');
                });
            });
            fetchInventoryCategory(orgId,'#mc_itemcat', function(data) {
                $('#mc_itemcat').html("<option selected disabled value=''>Select Item Category</option>").prop('disabled', false);
                $.each(data, function(key, value) {
                    $('#mc_itemcat').append('<option value="' + value.id + '">' + value.name + '</option>');
                });
            });
        }
        $('#mc_transactiontype').html("<option selected disabled value=''>Select Transaction Type</option>").prop('disabled',true);
        $('#mc_itemgeneric').html("<option selected disabled value=''>Select Item Generic</option>").prop('disabled',true);
        $('#mc_patient').html("<option selected disabled value=''>Select Patient MR#</option>").prop('disabled',true);
        $('#mc_itemsubcat').html("<option selected disabled value=''>Select Item Sub Category</option>").prop('disabled',true);
        $('#mc_itemtype').html("<option selected disabled value=''>Select Item Type</option>").prop('disabled',true);
       
        SiteChangeTransactionTypes('#mc_site', '#mc_transactiontype', '#add_materialconsumption',true);
        SiteChangeMRCode('#mc_site', '#mc_patient', '#add_materialconsumption', 'materialConsumption');
        CategoryChangeSubCategory('#mc_itemcat', '#mc_itemsubcat', '#add_materialconsumption');
        SubCategoryChangeInventoryType('#mc_itemsubcat', '#mc_itemtype', '#add_materialconsumption');

        TypeChangeInventoryGeneric('#mc_itemtype', '#mc_itemgeneric', '#add_materialconsumption');

        $(document).on('change', '#mc_transactiontype', function() {
            var TransactionTypeID = $(this).val();
            CheckTransactionTypes(TransactionTypeID, '#mc_transactiontype')
                .then(function (data) {
                    $.each(data, function (key, value) {
                        if (value.transaction_type == 'general consumption') {
                            $('#patientSelect').hide();
                        }
                        else
                        {
                            $('#patientSelect').show();
                        }
                    });
                })
                .fail(function (error) {
                    console.error(error);
                });
        });

        $('#add-materialconsumption').modal('show');
    });
    //Open Add Requisition For Material Consumption Setup

    //Add Requisition For Material Consumption
    $('#add_materialconsumption').submit(function(e) {
        e.preventDefault();
        var data = SerializeForm(this);
        var transactionTypevalue = data.find(function(item) {
            return item.name === 'mc_transactiontype';
        });
        var logic = false; 
        if (transactionTypevalue) {
            CheckTransactionTypes(transactionTypevalue.value, '#mc_transactiontype')
                .then(function (transactionTypedata) {
                    $.each(transactionTypedata, function (key, value) {
                        if (value.transaction_type == 'general consumption') {
                            console.log('if');
                            logic = true;
                        }
                    });
                    var resp = true;
                    $(data).each(function(i, field){
                        if (((field.value == '') || (field.value == null)) && (!logic || field.name != 'mc_patient'))
                        {
                            var FieldName = field.name;
                            var FieldID = '#'+FieldName + "_error";
                            $(FieldID).text("This field is required");
                            $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                            $( 'input[name= "' +FieldName +'"' ).focus(function() {
                                $(FieldID).text("");
                                $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                            })
                            $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                            $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                                $(FieldID).text("");
                                $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                            });
                            $( 'textarea[name= "' +FieldName +'"' ).focus(function() {
                                $(FieldID).text("");
                                $('textarea[name= "' +FieldName +'"' ).removeClass("requirefield");
                            })
                            $( 'textarea[name= "' +FieldName +'"' ).addClass('requirefield');
                            resp = false;
                        }
                    });

                    if(resp != false)
                    {
                        $.ajax({
                            url: "/inventory/addmaterialconsumption",
                            method: "POST",
                            headers: {
                                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                            },
                            data: data,
                            beforeSend: function() {
                                Swal.fire({
                                    title: "Processing",
                                    allowOutsideClick: false,
                                    willOpen: () => {
                                        Swal.showLoading();
                                    },
                                    showConfirmButton: false
                                });
                            },
                            success: function(response) {
                                for (var fieldName in response) {
                                    var fieldErrors = response[fieldName];
                                }
                                if (fieldName == 'error')
                                {
                                    Swal.fire({
                                        text: fieldErrors,
                                        icon: fieldName,
                                        confirmButtonText: 'OK'
                                    })
                                }
                                else if (fieldName == 'success')
                                {
                                    Swal.fire({
                                        text: fieldErrors,
                                        icon: fieldName,
                                        allowOutsideClick: false,
                                        confirmButtonText: 'OK'
                                    }).then((result) => {
                                        if (result.isConfirmed) {
                                            $('#add-materialconsumption').modal('hide');
                                            $('#view-materialconsumption').DataTable().ajax.reload();
                                            $('#add_materialconsumption')[0].reset();
                                            $('#add_materialconsumption').find('select').each(function(){
                                                $(this).val($(this).find('option:first').val()).trigger('change');
                                            });
                                            $('.text-danger').hide();
                                        }
                                    });
                                }
                                else if (fieldName == 'info')
                                {
                                    Swal.fire({
                                        text: fieldErrors,
                                        icon: fieldName,
                                        confirmButtonText: 'OK'
                                    }).then((result) => {
                                        if (result.isConfirmed) {
                                            $('#add-materialconsumption').modal('hide');
                                        }
                                    });
                                }
                            },
                            error: function(error) {
                                if (error.responseJSON && error.responseJSON.errors) {
                                    $('.text-danger').show();
                                    var errors = error.responseJSON.errors;
                                    for (var fieldName in errors) {
                                        var fieldErrors = errors[fieldName];
                                        for (var i = 0; i < fieldErrors.length; i++) {
                                            fieldName = '#'+fieldName + '_error';
                                            $(fieldName).text(fieldErrors[i]);
                                        }
                                    }
                                    Swal.close();
                                }
                            }
                        });
                    }
                })
                .fail(function (error) {
                    console.error(error);
                });
        }

    });
    //Add Requisition For Material Consumption

    // View Requisition For Material Consumption Data
    var viewRequisitionMaterialConsumption =  $('#view-materialconsumption').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/inventory/materialconsumption',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'requisition_detail', name: 'requisition_detail' },
            { data: 'service_details', name: 'service_details' },
            { data: 'inventory_details', name: 'inventory_details' },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "300px"
            },
              {
                targets: 2,
                width: "250px"
            },
              {
                targets: 3,
                width: "250px"
            },
            {
                targets: 5,
                width: "300px"
            }
        ]
    });

    viewRequisitionMaterialConsumption.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    viewRequisitionMaterialConsumption.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    viewRequisitionMaterialConsumption.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Requisition For Material Consumption Data

    // Update Requisition For Material Consumption Status
    $(document).on('click', '.mc_status ', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/inventory/materialconsumption-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
            var status = xhr.status;
                if(status == 200)
                {
                    $('#view-materialconsumption').DataTable().ajax.reload();
                }
                },
                error: function(xhr, status, error) {
                    console.log(error);
            }
        });
    });
    // Update Requisition For Material Consumption Status

    //Update Requisition For Material Consumption Modal
    $(document).on('click', '.edit-materialconsumption', function() {
        var RequisitionId = $(this).data('mc-id');
        var url = '/inventory/updatematerialconsumption/' + RequisitionId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.uedt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('.u_mc-id').val(response.id);

                $('#u_mc_org').html("<option selected value="+ response.orgId +">" + response.orgName + "</option>");
                fetchOrganizations('null', '','#u_mc_org', function(data) {
                    $('#u_mc_org').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        if(response.orgId != value.id)
                        {
                            $('#u_mc_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                        }
                    });
                });

                $('#u_mc_site').html("<option selected value='"+response.siteId+"'>" + response.siteName + "</option>");
                fetchSites(response.orgId, '#u_mc_site', function(data) {
                    if (data.length > 0) {
                        $.each(data, function(key, value) {
                            $('#u_mc_site').append('<option value="' + value.id + '">' + value.name + '</option>');
                        });
                    }
                    else {
                        Swal.fire({
                            text: 'Sites are not available for selected Organization',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#edit-materialconsumption').modal('hide');
                            }
                        });
                    }
                }, function(error) {
                    console.log(error);
                },response.siteId);
                OrgChangeSites('#u_mc_org', '#u_mc_site', '#activate_cc');

                $('#u_mc_transactionType').html("<option selected value='"+response.transactionTypeId+"'>" + response.transactionType + "</option>");
                SiteChangeTransactionTypes('#u_mc_site', '#u_mc_transactionType', '#add_materialconsumption',true);
                fetchTransactionTypes(response.siteId, '#u_mc_transactionType', true, function(data) {
                    if (data && data.length > 0) {
                        $.each(data, function(key, value) {
                            if(value.id != response.transactionTypeId){
                                $('#u_mc_transactionType').append('<option value="' + value.id + '">' + value.name + '</option>');
                            }
                        });
                    } else {
                        Swal.fire({
                            text: 'Transaction Types are not availables for selected Site',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#edit-materialconsumption').modal('hide');
                            }
                        });

                    }
                });

                CheckTransactionTypes(response.transactionTypeId, '#u_mc_transactionType')
                    .then(function (data) {
                        $.each(data, function (key, value) {
                            if (value.transaction_type == 'general consumption') {
                                $('#u_patientSelect').hide();
                                $('#u_mc_patient').empty();
                                $('#u_patientSelect').prop('required', false);
                                $('#u_mc_patient').append('<option selected value=""></option>');
                            }
                            else
                            {
                                $('#u_patientSelect').show();
                                $('#u_patientSelect').prop('required', true);

                                fetchPatientMR(response.siteId, '#u_mc_patient', 'materialConsumption',  function(data) {
                                    $('#u_mc_patient').empty();
                                    if(response.mr == '')
                                    {
                                        $('#u_mc_patient').append('<option selected disabled value="">Select Patient MR#</option>');
                                    }
                                    else{
                                        $('#u_mc_patient').html("<option selected value='"+response.mr+"'>" + response.mr + "</option>");
                                    }
                                    
                                    $.each(data, function(key, value) {
                                        if (response.mr != value.mr_code) {
                                            $('#u_mc_patient').append('<option value="' + value.mr_code + '">' + value.mr_code + '</option>');
                                        }
                                    });
                                    $('#u_mc_patient').find('option:contains("Loading...")').remove();
                                    $('#u_mc_patient').prop('disabled', false);
                
                                }, function(error) {
                                    console.log(error);
                                });
                                SiteChangeMRCode('#u_mc_site', '#u_mc_patient', '#add_materialconsumption', 'materialConsumption');
                            
                            }
                        });
                    })
                    .fail(function (error) {
                        console.error(error);
                });

                $(document).on('change', '#u_mc_transactionType', function() {
                    var TransactionTypeID = $(this).val();
                    CheckTransactionTypes(TransactionTypeID, '#mc_transactiontype')
                        .then(function (data) {
                            $.each(data, function (key, value) {
                                if (value.transaction_type == 'general consumption') {
                                    $('#u_patientSelect').hide();
                                    $('#u_mc_patient').empty();
                                    $('#u_patientSelect').prop('required', false);
                                    $('#u_mc_patient').append('<option selected value=""></option>');
                                }
                                else
                                {
                                    $('#u_patientSelect').show();
                                    $('#u_patientSelect').prop('required', true);

                                    fetchPatientMR(response.siteId, '#u_mc_patient', 'materialConsumption', function(data) {
                                        $('#u_mc_patient').empty();
                                        if(response.mr == '')
                                        {
                                            $('#u_mc_patient').append('<option selected disabled value="">Select Patient MR#</option>');
                                        }
                                        else{
                                            $('#u_mc_patient').html("<option selected value='"+response.mr+"'>" + response.mr + "</option>");
                                        }
                                        
                                        $.each(data, function(key, value) {
                                            if (response.mr != value.mr_code) {
                                                $('#u_mc_patient').append('<option value="' + value.mr_code + '">' + value.mr_code + '</option>');
                                            }
                                        });
                                        $('#u_mc_patient').find('option:contains("Loading...")').remove();
                                        $('#u_mc_patient').prop('disabled', false);
                    
                                    }, function(error) {
                                        console.log(error);
                                    });
                                    SiteChangeMRCode('#u_mc_site', '#u_mc_patient', '#add_materialconsumption', 'materialConsumption');
                                }
                            });
                        })
                        .fail(function (error) {
                            console.error(error);
                        });
                });

                $('#u_mc_cat').html("<option selected value='"+response.catId+"'>" + response.catName + "</option>");
                fetchInventoryCategory('inv_cat','#u_mc_cat', function(data) {
                    $('#u_mc_cat').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        if(response.catId != value.id)
                        {
                            $('#u_mc_cat').append('<option value="' + value.id + '">' + value.name + '</option>');
                        }
                    });
                });

                 OrgChangeItemCategory('#u_mc_org', '#u_mc_cat', '#u_mc_transactionType');


                $('#u_mc_subcat').html("<option selected value='"+response.subCatId+"'>" + response.subCatName + "</option>");
                fetchSelectedInventorySubCategory(response.catId,'#u_mc_subcat', function(data) {
                    $('#u_mc_subcat').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        if(response.subcatId != value.id)
                        {
                            $('#u_mc_subcat').append('<option value="' + value.id + '">' + value.name + '</option>');
                        }
                    });
                });
                CategoryChangeSubCategory('#u_mc_cat', '#u_mc_subcat', '#add_materialconsumption');

                $('#u_mc_itemtype').html("<option selected value='"+response.invTypeId+"'>" + response.invType + "</option>");
                fetchSelectedInventoryType(response.catId,response.subCatId,response.orgId,'#u_mc_itemtype', function(data) {
                    $('#u_mc_itemtype').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        if(response.invTypeId != value.id)
                        {
                            $('#u_mc_itemtype').append('<option value="' + value.id + '">' + value.name + '</option>');
                        }
                    });
                });
                SubCategoryChangeInventoryType('#u_mc_subcat', '#u_mc_itemtype', '#add_materialconsumption');

                $('#u_mc_itemgeneric').html("<option selected value='"+response.invGenericId+"'>" + response.invGeneric + "</option>");
                fetchSelectedInventoryGeneric(response.invTypeId,'#u_mc_itemgeneric', function(data) {
                    $('#u_mc_itemgeneric').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        if(response.invGenericId != value.id)
                        {
                            $('#u_mc_itemgeneric').append('<option value="' + value.id + '">' + value.name + '</option>');
                        }
                    });
                });
                TypeChangeInventoryGeneric('#u_mc_itemtype', '#u_mc_itemgeneric', '#add_materialconsumption');

                $('#u_mc_qty').val(response.qty);
                $('#u_mc_remarks').val(response.remarks);

                $('#edit-materialconsumption').modal('show');
                $('#ajax-loader').hide();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Requisition For Material Consumption Modal

    //Update Requisition For Material Consumption
    $('#update_materialconsumption').on('submit', function (event) {
        event.preventDefault();
        var formData = SerializeForm(this);
        var materialconsumptionId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'u_mc-id') {
                materialconsumptionId = formData[i].value;
                break;
            }
        }
        var url = 'inventory/update-materialconsumption/' + materialconsumptionId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-materialconsumption').modal('hide');
                            $('#view-materialconsumption').DataTable().ajax.reload(); // Refresh DataTable
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                console.log(xhr.responseText);
            }
        });
    });
    //Update Requisition For Material Consumption
});

$(document).ready(function() {

    //Open Patient Registration Setup
    $(document).on('click', '.add-patient', function() {
        var orgId = $('#patient_org').val();
        $('.text-danger').show();
        if(orgId)
        {
            fetchOrganizationSites(orgId, '#patient_site', function(data) {
                $('#patient_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', false);
                $.each(data, function(key, value) {
                    $('#patient_site').append('<option value="' + value.id + '">' + value.name + '</option>');
                });
            });
        }
        else{

            $('#patient_org').empty();
            $('#patient_org').select2();
            fetchOrganizations(null,null,'#patient_org', function(data) {
                var options = ["<option selected disabled value=''>Select Organization</option>"];
                $.each(data, function(key, value) {
                    options.push('<option value="' + value.id + '">' + value.organization + '</option>');
                });
                $('#patient_org').html(options.join('')).trigger('change');
            });
            $('#patient_site').empty();
            $('#patient_site').select2();
            $('#patient_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled',true);
            OrgChangeSites('#patient_org', '#patient_site', '#add_servicelocation');
        }
        $('#add-patient').modal('show');
    });
    //Open Patient Registration Setup

    $('#patient_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', true);
    OrgChangeSites('#patient_org', '#patient_site', '#add_patient');
    $('#patient_division').html("<option selected disabled value=''>Select Division</option>").prop('disabled', true);
    ProvinceChangeDivision('#patient_province', '#patient_division', '#add_patient');
    $('#patient_district').html("<option selected disabled value=''>Select District</option>").prop('disabled', true);
    DivisionChangeDistrict('#patient_division', '#patient_district', '#add_patient');
    // Add Patient
    $('#add_patient').submit(function(e) {
        e.preventDefault();
        var formData = new FormData($('#add_patient')[0]);
        var relation = $('#relation').val();
        var GuardianRelation = $('#guardian_relation').val();
        var religion = $('#religion').val();
        var maritalStatus = $('#marital_status').val();
        var Gender = $('#patient_gender').val();
        var Org = $('#patient_org').val();
        var Site = $('#patient_site').val();
        var Province = $('#patient_province').val();
        var Division = $('#patient_division').val();
        var District = $('#patient_district').val();
        var Language = $('#language').val();

        var imgValue = $('#patient_img')[0].files[0];
        formData.append('relation', relation);
        formData.append('guardian_relation', GuardianRelation);
        formData.append('religion', religion);
        formData.append('language', Language);
        formData.append('marital_status', maritalStatus);
        formData.append('patient_gender', Gender);
        formData.append('patient_org', Org);
        formData.append('patient_site', Site);
        formData.append('patient_province', Province);
        formData.append('patient_division', Division);
        formData.append('patient_district', District);
        formData.append('patient_img', imgValue);

        var resp = true;
        const excludedFields = ['old_mrcode', 'familyno', 'next_of_kin', 'relation', 'patient_cnic', 'patient_additionalcell', 'patient_landline', 'patient_email', 'patient_img'];
        var firstErrorElement = null;

        formData.forEach(function(value, key) {
            var fieldName = key;
            var fieldValue = value;
            if (((fieldValue == '') || (fieldValue == 'null') || (fieldValue === 'undefined')) && !excludedFields.includes(fieldName))
            {
                var FieldName = fieldName;
                var FieldID = '#'+FieldName + "_error";

                if (!firstErrorElement) {
                    firstErrorElement = FieldName;
                }
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $( 'textarea[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('textarea[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $( 'textarea[name= "' +FieldName +'"' ).addClass('requirefield');

                $('input[name="' + FieldName + '"][type="file"]').parent().addClass('requirefield');
                $( 'input[name="' + FieldName + '"][type="file"]').focus(function() {
                    $(FieldID).text("");

                    $('input[name="' + FieldName + '"][type="file"]').parent().removeClass('requirefield');
                })
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                resp = false;

            }
        });
        // If we found an error element, focus on it
        if (firstErrorElement) {
            $('input[name="' + firstErrorElement + '"], textarea[name="' + firstErrorElement + '"], select[name="' + firstErrorElement + '"]').focus().addClass('requirefield');
        }
        if(resp != false)
        {
            $.ajax({
                url: "/patient/addpatient",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: formData,
                processData: false,
                contentType: false,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {
                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (response.error)
                    {
                        Swal.fire({
                            text: response.error,
                            icon: 'error',
                            confirmButtonText: 'OK',
                            allowOutsideClick: false
                        })
                    }
                    if (response.success)
                    {
                        Swal.fire({
                            text: response.success,
                            icon: 'success',
                            allowOutsideClick: false,
                            showCancelButton: true,
                            showDenyButton: true,
                            confirmButtonText: 'Register Only',
                            denyButtonText: 'Register & Confirm Arrival',
                            cancelButtonText: 'Register & Book Appointment'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-patient').modal('hide');
                                $('#view-patient').DataTable().ajax.reload(); // Refresh DataTable
                                $('#add_patient').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('#add_patient')[0].reset();
                                $('.text-danger').hide();
                            }
                            else if (result.isDenied) {
                                $('#add-patient').modal('hide');
                                
                                $('#pio_org').html("<option selected value='"+ response.org_id +"'>"+ response.orgName +"</option>").prop('disabled',true);
                                $('#pio_site').html("<option selected value='"+ response.site_id +"'>"+ response.siteName +"</option>").prop('disabled',true);
                                fetchServiceLocations(response.org_id, '#pio_serviceLocation', function(data) {
                                    const $serviceLocation = $('#pio_serviceLocation');
                                    if (data && data.length > 0) {
                                        $serviceLocation.empty()
                                             .append('<option selected disabled value="">Select Service Location</option>')
                                             .append(data.map(({id, name}) => `<option value="${id}">${name}</option>`).join(''))
                                             .prop('disabled', false)
                                             .find('option:contains("Loading...")').remove();
                                    } else {
                                        Swal.fire({
                                            text: 'Service Locations are not availables for selected Organization',
                                            icon: 'error',
                                            confirmButtonText: 'OK'
                                        }).then((result) => {
                                            if (result.isConfirmed) {
                                                $serviceLocation.empty()
                                                .append('<option selected disabled value="">Select Service Location</option>')
                                                .prop('disabled', true);
                                            }
                                        });

                                    }
                                });
                                fetchPhysicians(response.site_id, '#pio_emp', function(data) {
                                    const $emp = $('#pio_emp');
                                    if (data && data.length > 0) {
                                        $emp.empty()
                                            .append('<option selected disabled value="">Select Physician</option>')
                                            .append(data.map(({id, name}) => `<option value="${id}">${name}</option>`).join(''))
                                            .prop('disabled', false)
                                            .find('option:contains("Loading...")').remove();
                                            $emp.trigger('change');
                                    } else {
                                            Swal.fire({
                                                text: 'There are no physicians available for this location.',
                                                icon: 'error',
                                                confirmButtonText: 'OK',
                                                allowOutsideClick: false
                                            }).then((result) => {
                                                if (result.isConfirmed) {
                                                    $emp.off('change');
                                                }
                                            });
                                    }
                                });
                                // SiteChangeService('#pio_site', '#pio_service', '#add_patientinout');
                                fetchSiteServices(response.site_id, '#pio_service', function(data) {
                                    if (data && data.length > 0) {
                                        const $Service = $('#pio_service');
                                        $Service.empty()
                                            .append('<option selected disabled value="">Select Service</option>')
                                            .append(data.map(({id, name}) => `<option value="${id}">${name}</option>`).join(''))
                                            .prop('disabled', false)
                                            .find('option:contains("Loading...")').remove();
                                            $Service.trigger('change');
                                    } else {
                                            Swal.fire({
                                                text: 'Services are not Activated for selected Site',
                                                icon: 'error',
                                                confirmButtonText: 'OK',
                                                allowOutsideClick: false
                                            }).then((result) => {
                                                if (result.isConfirmed) {
                                                    $Service.off('change');
                                                    $Service.prop('disabled', true);
                                                }
                                            });
                                    }
                                });

                                $('#pio_serviceSchedule').html("<option selected disabled>Select Service Location Schedule</option>").prop('disabled',true);
                                LocationChangeServiceScheduling('#pio_serviceLocation', '#pio_site', '#pio_serviceSchedule', '#add_patientinout');

                                $('#pio_serviceMode').html("<option selected disabled value=''>Select Service Mode</option>").prop('disabled',true);
                                ServiceChangeServiceModes('#pio_site', '#pio_service', '#pio_serviceMode', '#add_patientinout');
                                $('#pio_billingCC').html("<option selected disabled value=''>Select Billing Cost Center</option>").prop('disabled',true);
                                ServiceChangeCostCenter('#pio_site', '#pio_service', '#pio_billingCC', '#add_patientinout');
                                $('#pio_serviceStart').bootstrapMaterialDatePicker({ format : 'dddd DD MMMM YYYY - hh:mm A' });
                                // $('input[name="booking_id"]').val('00');
                                openPatientInOutModal(response.mr_code);


                                // $('#add-patientinout').modal({
                                //     backdrop: 'static',
                                //     keyboard: false
                                // }).modal('show');
                            }
                            else {
                                $('#add-patient').modal('hide');
                                $('#pOrg').text(response.orgName);
                                $('#pSite').text(response.siteName);
                                $('#pMrno').text(response.mr_code);
                                $('.pb_org').val(response.org_id);
                                $('.pb_site').val(response.site_id);
                                $('.pb_mr').val(response.mr_code);
                                $('#sb_schedule').html("<option selected disabled value=''>Select Service Location Schedule</option>").prop('disabled', true);

                                fetchServiceLocations(response.org_id, '#sb_location', function(data) {
                                    const $serviceLocation = $('#sb_location');
                                    if (data && data.length > 0) {
                                        $serviceLocation.empty()
                                            .append('<option selected disabled value="">Select Service Location</option>')
                                            .append(data.map(({id, name}) => `<option value="${id}">${name}</option>`).join(''))
                                            .prop('disabled', false)
                                            .find('option:contains("Loading...")').remove();
                                    } else {
                                        Swal.fire({
                                            text: 'Service Locations are not available for selected Organization',
                                            icon: 'error',
                                            confirmButtonText: 'OK'
                                        }).then((result) => {
                                            if (result.isConfirmed) {
                                                $('#add-servicebooking').modal('hide');
                                                $('#view-patient').DataTable().ajax.reload(); // Refresh DataTable
                                                $('#add_patient').find('select').each(function(){
                                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                                });
                                                $('#add_patient')[0].reset();
                                                $('.text-danger').hide();
                                            }
                                        });
                                    }
                                });
                                // Show Service Scheduling
                                LocationChangeServiceScheduling('#sb_location', '#sb_site', '#sb_schedule', '#add_servicebooking');
                                // Show Service Scheduling
                                fetchPhysicians(response.site_id, '#sb_emp', function(data) {
                                    $('#sb_emp').html("<option selected disabled value=''>Select Designated Physician</option>");
                                    $.each(data, function(key, value) {
                                        $('#sb_emp').append('<option value="' + value.id + '">' + value.name + '</option>');
                                    });
                                    $('#sb_emp').find('option:contains("Loading...")').remove();
                                    $('#sb_emp').prop('disabled', false);
                                }, function(error) {
                                    console.log(error);
                                });


                                fetchSiteServices(response.site_id, '#sb_service', function(data) {
                                    const $Service = $('#sb_service');
                                    $Service.empty()
                                    .append("<option selected disabled value=''>Select Service</option>")
                                    .append(
                                        data.map(({ id, name }) => {
                                            if (id != response.serviceID) {
                                                return `<option value="${id}">${name}</option>`;
                                            }
                                        }).join(''))
                                    .prop('disabled', false)
                                    .find('option:contains("Loading...")').remove();
                                });

                                $('#sb_serviceMode').html("<option selected disabled value=''>Select Service Mode</option>").prop('disabled', true);
                                ServiceChangeServiceModes('#sb_site', '#sb_service', '#sb_serviceMode', '#add_servicebooking');
                                
                                $('#sb_billingCC').html("<option selected disabled value=''>Select Billing Cost Center</option>").prop('disabled', true);
                                ServiceChangeCostCenter('#sb_site', '#sb_service', '#sb_billingCC', '#add_servicebooking');

                                $('#add-servicebooking').css('overflow', 'auto').modal({
                                    backdrop: 'static',
                                    keyboard: false
                                }).modal('show');
                                

                            }
                        });
                    }
                    if (response.info)
                    {
                        Swal.fire({
                            text: response.info,
                            icon: 'info',
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                var imgReset = $('#patient_img').dropify();
                                imgReset = imgReset.data('dropify');
                                imgReset.resetPreview();
                                imgReset.clearElement();
                                $('#add_patient').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('#add_patient')[0].reset();
                            }
                        });
                    }
                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    // Add Patient

    // View Patient
    var viewpatient =  $('#view-patient').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/patient/patientdata',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'patient_detail', name: 'patient_detail' },
            { data: 'identity', name: 'identity' },
            { data: 'contact', name: 'contact' },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "300px"
            },
            {
                targets: 2,
                width: "300px"
            },
            {
                targets: 3,
                width: "350px"
            },
            {
                targets: 5,
                width: "350px"
            }
        ]
    });

    viewpatient.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    viewpatient.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    viewpatient.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Patient

    // Patient Details
    $(document).on('click', '.patient-detail', function() {
        var patientId = $(this).data('patient-id');
        var url = '/patient/patientdetail/' + patientId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                $('#patient-detail').modal('show');
                $('#ajax-loader').hide();
                var imgPath = response.Image;
                $('#patientImg').attr('src', imgPath);
                $('#patientName').text(response.patientName);
                $('#patientAddress').text(response.patientAddress);
                $('#mr_no').text(response.MR);
                $('#guardianName').text(response.patientGuardianName);
                $('#guardianRelation').text(response.patientGuardianRelation);
                $('#nextofKin').text(response.patientNextOfKin?.trim() ? response.patientNextOfKin : 'N/A');
                $('#nextofkinRelation').text(response.patientNextOfKinRelation?.trim() ? response.patientNextOfKinRelation : 'N/A');
                
                $('#patientLanguage').text(response.Language);
                $('#patientReligion').text(response.Religion);
                $('#patientMaritalStatus').text(response.MaritalStatus);
                $('#patientoldMR').text(response.oldMR);
                $('#patientGender').text(response.Gender);
                $('#patientDOB').text(response.DateOfBirth);
                $('#patientOrg').text(response.Org);
                $('#patientSite').text(response.Site);
                $('#patientProvince').text(response.Province);
                $('#patientDivision').text(response.Division);
                $('#patientDistrict').text(response.District);
                $('#patientCNIC').text(response.CNIC);
                $('#patientFamilyNo').text(response.familyNo);
                $('#patientCell').text(response.CellNo);
                $('#patientAdditionalCell').text(response.AdditionalCellNo);
                $('#patientLandline').text(response.Landline);
                $('#patientEmail').text(response.Email);
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    // Patient Details

    // Update Patient Status
    $(document).on('click', '.patient_status', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};
        $.ajax({
            url: '/patient/patient-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
            var status = xhr.status;
                if(status == 200)
                {
                    $('#view-patient').DataTable().ajax.reload();
                }
            },
            error: function(xhr, status, error) {
                console.log(error);
            }
        });

    });
    // Update Patient Status

    //Update Patient Modal
    $(document).on('click', '.edit-patient', function() {
        $('.text-danger').show();
        var patientId = $(this).data('patient-id');
        var url = '/patient/updatepatient/' + patientId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                $('#up-id').val(patientId);
                $('#up_name').val(response.patientName);
                $('#up_guardianName').val(response.guardianName);
                const guardianRelations = ["Father", "Husband"];
                let guardianRelationOptions = '<option selected>' + response.guardianRelation + '</option>';
                for (let guardianRelation of guardianRelations) {
                    if (guardianRelation !== response.guardianRelation) {
                        guardianRelationOptions += '<option>' + guardianRelation + '</option>';
                    }
                }
                $('#up_guardianRelation').html(guardianRelationOptions);
                $('#up_nextofkin').val(response.noxtofKin);

                const nextofkinRelations = [ "Father", "Mother", "Brother", "Sister", "GrandParent", "Spouse", "Child", "Grandparent", "Grandchild", "Uncle", "Aunt", "Niece", "Nephew", "Cousin", "Legal Guardian", "Friend", "Partner"];
                let nextofkinRelationOptions = '';
                if (!response.noxtofKinRelation || response.noxtofKinRelation.trim() === '') {
                    nextofkinRelationOptions = '<option selected disabled value="">Select Next of Kin Relation</option>';
                } else {
                    nextofkinRelationOptions = '<option selected>' + response.noxtofKinRelation + '</option>';
                }
                
                for (let nextofkinRelation of nextofkinRelations) {
                    if (nextofkinRelation !== response.noxtofKinRelation) {
                        nextofkinRelationOptions += '<option>' + nextofkinRelation + '</option>';
                    }
                }

                const languages = ["Urdu", "Sindhi", "Balochi", "Punjabi", "Pashto", "Hindko", "Siraiki", "Memoni", "Gujrati", "Brahui", "Shina", "Burushaski", "Wakhi", "Balti", "Kashmiri", "Khowar"];
                let languageOptions = '<option selected>' + response.language + '</option>';
                for (let language of languages) {
                    if (language !== response.language) {
                        languageOptions += '<option>' + language + '</option>';
                    }
                }
                $('#up_language').html(languageOptions);
                // $('#up_language').val(response.language);
                
                
                $('#up_nextofkinRelation').html(nextofkinRelationOptions);
                $('#up_oldmr').val(response.oldMRNo);

                $('#up_gender').html("<option selected value="+response.genderId+">" + response.genderName + "</option>");
                $.ajax({
                    url: 'hr/getgender',
                    type: 'GET',
                    data: {
                        genderID: response.genderId,
                    },
                    beforeSend: function() {
                        $('#up_gender').append('<option>Loading...</option>');
                    },
                    success: function(resp) {
                        $('#up_gender').find('option:contains("Loading...")').remove(); // Remove the loading option
                        $.each(resp, function(key, value) {
                            $('#up_gender').append('<option value="' + value.id + '">' + value.name + '</option>');
                        });
                    },
                    error: function(xhr, status, error) {
                        console.log(error);
                    }
                });


                const Religions = ["Islam", "Hindu", "Christian", "Sikh"];
                let ReligionsOptions = '<option selected>' + response.Religion + '</option>';
                for (let Religion of Religions) {
                    if (Religion !== response.Religion) {
                        ReligionsOptions += '<option>' + Religion + '</option>';
                    }
                }
                $('#up_religion').html(ReligionsOptions);

                const MaritalStatuses = ["Single", "Married", "Divorced", "Widowed"];
                let MaritalStatusOptions = '<option selected>' + response.MaritalStatus + '</option>';
                for (let MaritalStatus of MaritalStatuses) {
                    if (MaritalStatus !== response.MaritalStatus) {
                        MaritalStatusOptions += '<option>' + MaritalStatus + '</option>';
                    }
                }
                $('#up_maritalStatus').html(MaritalStatusOptions);

                var formattedDOB = moment(response.DOB).format('YYYY-MM-DD');
                $('#up_dob').each(function() {
                    var dobElement = $(this);
                    dobElement.val(formattedDOB);
                });

                $('#up_org').html("<option selected value="+response.orgId+">" + response.orgName + "</option>");
                fetchOrganizations(response.orgId,response.orgName,'#up_org', function(data) {
                    $('#up_org').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        $('#up_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                    });
                });

                $('#up_site').html("<option selected value="+response.siteId+">" + response.siteName + "</option>");
                fetchSites(response.orgId, '#up_site', function(data) {
                    if (data.length > 0) {
                        $.each(data, function(key, value) {
                            $('#up_site').append('<option value="' + value.id + '">' + value.name + '</option>');
                        });
                    }
                    else {
                        Swal.fire({
                            text: 'Sites are not available for selected Organization',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#edit-patient').modal('hide');
                            }
                        });
                    }
                }, function(error) {
                    console.log(error);
                },response.siteId);

                $('#up_org').off('change').on('change', function() {
                    $('#up_site').empty();
                    var organizationId = $(this).val();
                    fetchSites(organizationId, '#up_site', function(data) {
                        if (data.length > 0) {
                            $.each(data, function(key, value) {
                                $('#up_site').append('<option value="' + value.id + '">' + value.name + '</option>');
                            });
                        }
                        else {
                            Swal.fire({
                                text: 'Sites are not available for selected Organization',
                                icon: 'error',
                                confirmButtonText: 'OK'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    $('#edit-patient').modal('hide');
                                }
                            });
                        }

                    }, function(error) {
                        console.log(error);
                    });
                });

                $('#up_province').html("<option selected value="+response.provinceId+">" + response.provinceName + "</option>");
                $.ajax({
                        url: 'territory/updateprovince',
                        type: 'GET',
                        data: {
                            provinceId: response.provinceId,
                        },
                        beforeSend: function() {
                            $('#up_province').append('<option>Loading...</option>');
                        },
                        success: function(resp) {
                            $('#up_province').find('option:contains("Loading...")').remove(); // Remove the loading option
                            $.each(resp, function(key, value) {
                                $('#up_province').append('<option value="' + value.id + '">' + value.name + '</option>');
                            });
                        },
                        error: function(xhr, status, error) {
                            console.log(error);
                        }
                });

                $('#up_division').html("<option selected value="+response.divisionId+">" + response.divisionName + "</option>");
                $.ajax({
                    url: 'territory/updatedivision',
                    type: 'GET',
                    data: {
                        provinceId: response.provinceId,
                        divisionId: response.divisionId,
                    },
                    beforeSend: function() {
                        $('#up_division').append('<option>Loading...</option>');
                    },
                    success: function(resp) {
                        $('#up_division').find('option:contains("Loading...")').remove(); // Remove the loading option
                        $.each(resp, function(key, value) {
                            $('#up_division').append('<option value="' + value.id + '">' + value.name + '</option>');
                        });
                    },
                    error: function(xhr, status, error) {
                        console.log(error);
                    }
                });
                $('#up_district').html("<option selected value="+response.districtId+">" + response.districtName + "</option>");
                $.ajax({
                    url: 'territory/updatedistrict',
                    type: 'GET',
                    data: {
                        divisionId: response.divisionId,
                    },
                    beforeSend: function() {
                        $('#up_district').append('<option>Loading...</option>');
                    },
                    success: function(resp) {
                        $('#up_district').find('option:contains("Loading...")').remove(); // Remove the loading option
                        $.each(resp, function(key, value) {
                            $('#up_district').append('<option value="' + value.id + '">' + value.name + '</option>');
                        });
                    },
                    error: function(xhr, status, error) {
                        console.log(error);
                    }
                });

                $('#up_province').change(function() {
                        var province_id = $(this).val();
                        $.ajax({
                            url: 'territory/updatedivision',
                            type: 'GET',
                            data: {
                                provinceId: province_id,
                            },
                            beforeSend: function() {
                                $('#up_division').append('<option>Loading...</option>');
                            },
                            success: function(resp) {
                                    $('#up_division').html("<option selected disabled value=''>Select Division</option>");
                                $.each(resp, function(key, value) {
                                    $('#up_division').append('<option value="' + value.id + '">' + value.name + '</option>');
                                });
                            },
                            error: function(xhr, status, error) {
                                console.log(error);
                            }
                        });
                });

                $('#up_division').change(function() {
                    var divisionid = $(this).val();
                    $.ajax({
                        url: 'territory/updatedistrict',
                        type: 'GET',
                        data: {
                            divisionId: divisionid,
                        },
                        beforeSend: function() {
                            $('#up_district').append('<option>Loading...</option>');
                        },
                        success: function(resp) {
                                $('#up_district').html("<option selected disabled value=''>Select District</option>");
                            $.each(resp, function(key, value) {
                                $('#up_district').append('<option value="' + value.id + '">' + value.name + '</option>');
                            });
                        },
                        error: function(xhr, status, error) {
                            console.log(error);
                        }
                    });
                });

                $('#up_cnic').val(response.cnic);
                $('#up_familyno').val(response.familyNo);
                $('#up_cell').val(response.cellNo);
                $('#up_additionalCell').val(response.additionalCell);
                $('#up_landline').val(response.Landline);
                $('#up_email').val(response.Email);
                $('#up_houseno').val(response.HouseNo);
                $('#up_address').val(response.Address);
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.up_edt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });

                var image = response.Image;
                var patient_img_input = $('#u_patientImg');
                if(image)
                {
                    var imgName = image.trim().substring(image.lastIndexOf('/') + 1);
                    var dropifyRenderImg = patient_img_input.closest('.dropify-wrapper').find('.dropify-render');

                    dropifyRenderImg.find('img').attr('src', image);

                    var imgdropifyInfos = patient_img_input.closest('.dropify-wrapper').find('.dropify-infos');
                    var imgfilenameInner = imgdropifyInfos.find('.dropify-filename-inner');
                    imgfilenameInner.text(imgName);

                    patient_img_input.attr('data-default-file', image);
                    patient_img_input.dropify('destroy');
                    patient_img_input.dropify();
                }
                else{
                    var dropifyRenderImg = patient_img_input.closest('.dropify-wrapper').find('.dropify-render');
                   
                    dropifyRenderImg.find('img').attr('src', '');

                    var imgdropifyInfos = patient_img_input.closest('.dropify-wrapper').find('.dropify-infos');
                    var imgfilenameInner = imgdropifyInfos.find('.dropify-filename-inner');
                    imgfilenameInner.text('Upload Your Image');

                    patient_img_input.attr('data-default-file', '');
                    patient_img_input.dropify('destroy');
                    patient_img_input.dropify();
                }

                $('#edit-patient').modal('show');
                $('#ajax-loader').hide();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Patient Modal

    //Update Patient Details
    $('#update_patient').on('submit', function (event) {
        event.preventDefault();
        var formData = new FormData(this);
        var patientId = $('#up-id').val();
        var img = $('#u_patientImg')[0].files[0];
        formData.append('u_patientImg', img);
        var org = $('#up_org').val();
        if(org)
        {
            formData.append('up_org', org);
        }

        var patientId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'up-id') {
                patientId = formData[i].value;
                break;
            }
        }

        var url = 'patient/update-patient/' + patientId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            processData: false,
            contentType: false,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });

            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-patient').modal('hide');
                            $('#view-patient').DataTable().ajax.reload(); // Refresh DataTable
                            $('#update_patient')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                console.log(xhr.responseText);
            }
        });
    });
    //Update Patient Details
});
//Patient Registration

//Patient Arrival & Departure
$(document).ready(function() {
    var filterOrgId = $('#pad_org').val();
    if(filterOrgId)
    {
        fetchOrganizationSites(filterOrgId, '#pad_site', function(data) {
            $('#pad_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', false);
            $.each(data, function(key, value) {
                $('#pad_site').append('<option value="' + value.id + '">' + value.name + '</option>');
            });
        });  

        fetchOrgPatient(filterOrgId, '#pad_mrno', function(data) {
            $('#pad_mrno').html("<option selected disabled value=''>Select MR #</option>").prop('disabled', false);
            $.each(data, function(key, value) {
                $('#pad_mrno').append('<option value="' + value.mr_code + '">' + value.mr_code + ' - ' + value.name + ' - ' + value.cell_no + '</option>');
            });
        });
    }
    else{
        $('#pad_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled',true);
        OrgChangeSites('#pad_org', '#pad_site', null);
        
        $('#pad_mrno').html("<option selected disabled value=''>Select MR #</option>").prop('disabled', true);
        OrgChangeMRCode('#pad_org', '#pad_mrno', null);
    }

    //Open Patient Arrival & Departure Setup
    function getEncryptedParams() {
        const urlParams = new URLSearchParams(window.location.search);
        const mr = urlParams.get('mr');
        const billedamount = urlParams.get('billedamount');
        const orgname = urlParams.get('orgname');
        const orgid = urlParams.get('orgid');
        const sitename = urlParams.get('sitename');
        const siteid = urlParams.get('siteid');
        const servicemode = urlParams.get('servicemode');
        const servicemodeId = urlParams.get('smid');
        const empname = urlParams.get('empname');
        const empId = urlParams.get('eid');
        const service = urlParams.get('service');
        const serviceId = urlParams.get('sid');
        const billingcc = urlParams.get('billingcc');
        const billingccId = urlParams.get('bcid');
        const patientstatusval = urlParams.get('patientstatusval');
        const patientstatus = urlParams.get('patientstatus');
        const patientpriorityval = urlParams.get('patientpriorityval');
        const patientpriority = urlParams.get('patientpriority');
        const locationname = urlParams.get('locationname');
        const locationid = urlParams.get('locationid');
        const schedulename = urlParams.get('schedulename');
        const scheduleid = urlParams.get('scheduleid');
    
        return { mr, billedamount, orgid, orgname, sitename, siteid, servicemode, servicemodeId, empname, empId, service, serviceId, billingcc, billingccId, 
            patientstatusval, patientstatus, patientpriorityval, patientpriority, locationname, locationid, schedulename, scheduleid};
    }
    
    const encryptedParams = getEncryptedParams();
    const hasEmptyParam = Object.values(encryptedParams).some(param => param === null || param === '');
    if (!hasEmptyParam) {
        
        fetch('/decrypt-data', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
            },
            body: JSON.stringify(encryptedParams)
        })
        .then(response => response.json())
        .then(data => {
            openPatientInOutModal(
                data.mr, 
                data.billedamount, 
                data.orgname, 
                data.orgid, 
                data.sitename, 
                data.siteid, 
                data.servicemode, 
                data.servicemodeId, 
                data.empname, 
                data.empId, 
                data.service, 
                data.serviceId, 
                data.billingcc, 
                data.billingccId,
                data.patientstatusval,
                data.patientstatus,
                data.patientpriorityval,
                data.patientpriority,
                data.locationname,
                data.locationid,
                data.schedulename,
                data.scheduleid
            );
        })
        .catch(error => console.error('Error:', error));
    } 
   
    
    $(document).on('click', '.add-patientinout', function() {
        openPatientInOutModal();
    });
    

    $('#enterMR').change(function() {
        clearTimeout(typingTimer);
        const selectedMr = $(this).val();
        
        if (selectedMr && selectedMr.length >= 9) { // Assuming a valid MR number has at least 9 characters
            typingTimer = setTimeout(doneTyping, doneTypingInterval);
        } else {
            $("#pio_mr_error").text("Please select a valid MR #.");
            $("#patientArrivalDetails").hide();
            // $("#booking-status, #patientArrivalDetails").hide();
            $('#ajax-loader').hide();
        }
    });

    // $('#enterMR').keyup(function() {
    //     clearTimeout(typingTimer);
    //     if ($('#enterMR').val().length >= minLength) {
    //         typingTimer = setTimeout(doneTyping, doneTypingInterval);
    //     } else {
    //         $("#pio_mr_error").text("At least 9 characters are required for the MR #");
    //         $("#booking-status").hide();
    //         $("#patientArrivalDetails").hide();
    //         $('#ajax-loader').hide();
    //     }
    // });

    // $('#enterMR').keydown(function() {
    //     clearTimeout(typingTimer);
    // });
    //Open Patient Arrival & Departure Setup

    //Add Patient Arrival & Departure
    $('#add_patientinout').submit(function(e) {
        console.log('submit');
        e.preventDefault();
        var data = SerializeForm(this);
        var resp = true;
        $(data).each(function(i, field){
            if ((field.value == '' || field.value == null) && field.name != 'pio_remarks') 
            // if (((field.value == '') || (field.value == null)))
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                $( 'textarea[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('textarea[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $( 'textarea[name= "' +FieldName +'"' ).addClass('requirefield');
                resp = false;
            }
        });

        if(resp != false)
        {
            $.ajax({
                url: "/patient/addpatientarrival",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {

                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                // $('#add-patientinout').modal('hide');
                                // $('#sb_location').empty();
                                // $('#sb_location').html("<option selected disabled value=''>Select Service Location</option>").prop('disabled', true);
                                // $('#sb_site').empty();
                                // $('#sb_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', true);
                                // $('#view-patientinout').DataTable().ajax.reload();
                                // $('#add_patientinout').find('select').each(function(){
                                //     $(this).val($(this).find('option:first').val()).trigger('change');
                                // });
                                // $('#add_patientinout')[0].reset();
                                // $('.text-danger').hide();
                                const url = new URL(window.location);
                                url.search = ''; // Clear all query parameters
                                history.replaceState(null, '', url); // Update the URL without reloading
                                // const url = new URL(window.location);
                                // url.searchParams.delete('mr'); // Remove the 'mr' parameter
                                // history.replaceState(null, '', url); // Update the URL without reloading
                                location.reload();
                            }
                        });
                    }
                    // else if (fieldName == 'info')
                    // {
                    //     Swal.fire({
                    //         text: fieldErrors,
                    //         icon: fieldName,
                    //         confirmButtonText: 'OK'
                    //     }).then((result) => {
                    //         if (result.isConfirmed) {
                    //             $('#sb_location').empty();
                    //             $('#sb_location').html("<option selected disabled value=''>Select Service Location</option>").prop('disabled', true);
                    //             $('#sb_site').empty();
                    //             $('#sb_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', true);
                    //             $('#add_servicebooking').find('select').each(function(){
                    //                 $(this).val($(this).find('option:first').val()).trigger('change');
                    //             });
                    //             $('#add_servicebooking')[0].reset();
                    //         }
                    //     });
                    // }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Patient Arrival & Departure

    // View Patient Arrival & Departure
    var viewpatientArrivalDeparture =  $('#view-patientinout').DataTable({
        processing: true,
        serverSide: true,
        // ajax: '/patient/patientarrivaldeparture',
        ajax: {
            url: '/patient/patientarrivaldeparture',
            data: function (d) {
                d.site_id = $('#pad_site').val();  
                d.mr_no = $('#pad_mrno').val();    
            }
        },
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            { data: 'serviceBooking', name: 'serviceBooking' },
            { data: 'serviceDetails', name: 'serviceDetails' },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "25%"
            },
            {
                targets: 2,
                width: "25%"
            },
            {
                targets: 3,
                width: "25%"
            },
            {
                targets: 5,
                width: "25%"
            }
        ]
        // columns: [
        //     { data: 'id_raw', name: 'id_raw', visible: false },
        //     { data: 'id', name: 'id' },
        //     { data: 'bookingdetails', name: 'bookingdetails' },
        //     { data: 'patientarivalDetails', name: 'patientarivalDetails' },
        //     { data: 'status', name: 'status' },
        //     { data: 'action', name: 'action', orderable: false, searchable: false }
        // ],
        // columnDefs: [
        //     {
        //         targets: 1,
        //         width: "350px"
        //     },
        //     {
        //         targets: 2,
        //         width: "350px"
        //     },
        //     {
        //         targets: 3,
        //         width: "350px"
        //     }
           
        // ]
    });

     $('#pad_site, #pad_mrno').on('change', function () {
        viewpatientArrivalDeparture.ajax.reload();  
    });

    $('.clearFilter').on('click', function () {
        $('#pad_site').val($('#pad_site option:first').val()).change();
        $('#pad_mrno').val($('#pad_mrno option:first').val()).change();
        viewpatientArrivalDeparture.ajax.reload();   
    });

    viewpatientArrivalDeparture.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    viewpatientArrivalDeparture.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    viewpatientArrivalDeparture.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Patient Arrival & Departure

    // Update Patient Arrival & Departure Status
    $(document).on('click', '.pio_status', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};
        $.ajax({
            url: '/patient/patientinout-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
            var status = xhr.status;
                if(status == 200)
                {
                    $('#view-patientinout').DataTable().ajax.reload();
                }
            },
            error: function(xhr, status, error) {
                console.log(error);
            }
        });

    });
    // Update Patient Arrival & Departure Status

    // End Patient Arrival & Departure
    $(document).on('click', '#endService', function() {
        $('#endServiceModal').modal('show');
        $("#date-format1").val("");
        $('#date-format1').bootstrapMaterialDatePicker({ format : 'dddd DD MMMM YYYY - hh:mm A' });
        var id = $(this).data('id');
        $('#pio_id').val(id);
    });

    $('#end_service').submit(function(e) {
        e.preventDefault();
        var data = SerializeForm(this);
        $.ajax({
            url: '/patient/serviceend',
            method: 'POST',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {


                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                }
                if (fieldName == 'success')
                {
                    $('#ajax-loader').hide();
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#add-patientinout').modal('hide');
                            $('#view-patientinout').DataTable().ajax.reload();
                            $('.text-danger').hide();
                            $('#endServiceModal').modal('hide');
                        }
                    });
                }
                else if (fieldName == 'error')
                {
                    $( 'input[name= "pio_serviceEnd"' ).addClass('requirefield');
                    $( 'input[name= "pio_serviceEnd"' ).focus(function() {
                        $('#pio_serviceEnd_error').text("");
                        $('input[name= "pio_serviceEnd"' ).removeClass("requirefield");
                    })
                    $('#pio_serviceEnd_error').text(fieldErrors);
                    $('#ajax-loader').hide();
                }
            },
            error: function(xhr, status, error) {
                console.log(error);
            }
        });
    });
    // End Patient Arrival & Departure

    //Update Patient Arrival & Departure Modal
    $(document).on('click', '.edit-patientinout', function() {
        var patientinoutId = $(this).data('patientinout-id');
        var url = '/patient/updatepatientinout/' + patientinoutId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                $('#patientinout_id').val(patientinoutId);
                $('#u_pio_org').html("<option selected value="+response.orgId+">" + response.orgName + "</option>").prop('disabled',true);
                $('#u_pio_site').html("<option selected value="+response.siteId+">" + response.siteName + "</option>").prop('disabled',true);
                $('#u_pio_status').html("<option selected>" + response.patientStatus + "</option>").prop('disabled',true);
                $('#u_pio_priority').html("<option selected>" + response.patientPriority + "</option>").prop('disabled',true);
                $('#u_pio_location').html("<option selected>" + response.locationName + "</option>").prop('disabled',true);
                $('#u_pio_schedule').html("<option selected>" + response.locationSchedule + "</option>").prop('disabled',true);
                $('#u_pio_emp').html("<option selected>" + response.empName + "</option>").prop('disabled',true);
                var startFormatted = moment.unix(response.start_timestamp).format('MM/DD/YYYY h:mm A');
                var endFormatted = moment.unix(response.end_timestamp).format('MM/DD/YYYY h:mm A');
                $('#u_pio_scheduleDatetime').data('daterangepicker').setStartDate(startFormatted);
                $('#u_pio_scheduleDatetime').data('daterangepicker').setEndDate(endFormatted);
                $('#u_pio_scheduleDatetime').prop('disabled',true);
                $('#u_pio_mr').val(response.mrNo).prop('disabled',true);
                $('#u_pio_service').html("<option selected value="+response.serviceID+">" + response.serviceName + "</option>").prop('disabled',true);
                $('#u_pio_serviceMode')
                .html("<option selected value='" + response.serviceModeID + "'>" + response.service_modeName + " (Rs " + response.billedAmount + ")</option>")
                .prop('disabled', true);
                $('#u_pio_billingCC').html("<option selected value="+response.CCID+">" + response.CCName + "</option>").prop('disabled',true);
                var formattedstartTime = moment(response.StartTime, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('#u_pio_serviceStart').val(formattedstartTime);

                if(response.EndTime != null)
                {
                    var formattedendTime = moment(response.EndTime, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                    $('#u_pio_serviceEnd').val(formattedendTime);
                }
                else{
                    $('#u_pio_serviceEnd').attr('placeholder', 'Select Service End Time');
                }

                // var serviceSelector = '#u_pio_service';
                // fetchSiteServices(response.siteId, serviceSelector, function(data) {
                //     const $Service = $(serviceSelector);
                //     $Service.empty()
                //     .append('<option selected value='+ response.serviceID +'>'+ response.serviceName +'</option>')
                //     .append(
                //         data.map(({ id, name }) => {
                //             if (id != response.serviceID) {
                //                 return `<option value="${id}">${name}</option>`;
                //             }
                //         }).join(''))
                //     .prop('disabled', false)
                //     .find('option:contains("Loading...")').remove();
                //     $Service.trigger('change');
                // });

                // var serviceModeSelector = '#u_pio_serviceMode';
                // fetchSiteServiceMode(response.siteId, response.serviceID, serviceModeSelector, function(data) {
                //     const $ServiceMode = $(serviceModeSelector);
                //     $ServiceMode.off('change'); // Remove any existing 'change' event listeners
                //     $ServiceMode.empty()
                //         .append('<option selected value='+ response.serviceModeID +'>'+ response.service_modeName +'</option>')
                //         .append(
                //         data.map(({ id, name }) => {
                //             if (id != response.serviceModeID) {
                //                 return `<option value="${id}">${name}</option>`;
                //             }
                //         }).join(''))
                //         .prop('disabled', false)
                //         .find('option:contains("Loading...")').remove();
                // });
                // ServiceChangeServiceModes('#u_pio_site', '#u_pio_service', '#u_pio_serviceMode', '#update_patientinout');

                // var CCSelector = '#u_pio_billingCC';
                // fetchServiceCostCenter(response.siteId, response.serviceID, CCSelector, function(data) {
                //     const $CostCenter = $(CCSelector);
                //     $CostCenter.empty()
                //             .append('<option selected value='+ response.CCID +'>'+ response.CCName +'</option>')
                //             .append(
                //             data.map(({ id, name }) => {
                //                 if (id != response.CCID) {
                //                     return `<option value="${id}">${name}</option>`;
                //                 }
                //             }).join(''))
                //             .prop('disabled', false)
                //             .find('option:contains("Loading...")').remove();
                // });

                // ServiceChangeCostCenter('#u_pio_site', '#u_pio_service', '#u_pio_billingCC', '#update_patientinout');

                $('#u_pio_payMode').html("<option selected>" + response.paymentMode + "</option>");
                var PaymentMode = [
                    {value: "Cash", label: "Cash"},
                    {value: "Card", label: "Card"}
                ];
                var PaymentMode = PaymentMode.filter(function(option) {
                    return option.value !== response.paymentMode;
                });
                PaymentMode.forEach(function(option) {
                    $("#u_pio_payMode").append(new Option(option.label, option.value));
                });

                $('#u_pio_amount').val(response.Amount);

                $('#edit-patientinout').modal('show');
                $('#ajax-loader').hide();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Patient Arrival & Departure Modal

    //Update Patient Arrival & Departure
    $('#update_patientinout').on('submit', function (event) {
        event.preventDefault();
        var formData = SerializeForm(this);
        var patientInOutId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'patientinout_id') {
                patientInOutId = formData[i].value;
                break;
            }
        }
        var url = 'patient/update-patientinout/' + patientInOutId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });

            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-patientinout').modal('hide');
                            $('#view-patientinout').DataTable().ajax.reload(); // Refresh DataTable
                            $('#u_patientinout')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                console.log(xhr.responseText);
            }
        });
    });
    //Update Patient Arrival & Departure

});
//Patient Arrival & Departure

// Chart Of Accounts Strategy
$(document).ready(function() {
    //Add Chart Of Accounts Strategy
    $('#add_accountStrategy').submit(function(e) {
        e.preventDefault(); // Prevent the form from submitting normally
        // var data = $(this).serializeArray();
        var data = SerializeForm(this);

        var resp = true;
        $(data).each(function(i, field){
            if ((field.value == '') || (field.value == null))
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $( 'textarea[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('textarea[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $( 'textarea[name= "' +FieldName +'"' ).addClass('requirefield');
                
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                resp = false;
            }

        });

        if(resp != false)
        {
            $.ajax({
                url: "/finance/addaccountstrategy",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {

                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-accountStrategy').modal('hide');
                                $('#view-accountStrategy').DataTable().ajax.reload();
                                $('#add_accountStrategy').find('select').val($('#add_accountStrategy').find('select option:first').val()).trigger('change');
                                $('#add_accountStrategy')[0].reset();
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_accountStrategy').find('select').val($('#add_accountStrategy').find('select option:first').val()).trigger('change');
                                $('#add_accountStrategy')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Chart Of Accounts Strategy

    // View Chart Of Accounts Strategy Data
    var viewAccountStrategy =  $('#view-accountStrategy').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/finance/accountstrategydata',
        order: [[0, 'asc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            {
                "data": 'remarks',
                "render": function(data, type, row) {
                    return data.replace(/\b\w/g, function(char) { return char.toUpperCase(); });
                }
            },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "300px"
            },
            {
                targets: 4,
                width: "250px"
            }
        ]
    });

    viewAccountStrategy.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    viewAccountStrategy.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    viewAccountStrategy.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Chart Of Accounts Strategy Data

    // Update Chart Of Accounts Strategy Status
    $(document).on('click', '.accountstrategy_status', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/finance/accountstrategy-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
            var status = xhr.status;
            if(response.info)
            {
                $('#ajax-loader').hide();
                Swal.fire({
                    text: response['info'],
                    icon: 'info',
                    confirmButtonText: 'OK'
                }).then((result) => {
                    if (result.isConfirmed) {
                        
                        $('#view-accountStrategy').DataTable().ajax.reload();
                    }
                });
            }
            else if(status == 200)
                {
                    $('#view-accountStrategy').DataTable().ajax.reload();
                }
            },
            error: function(xhr, status, error) {
                    console.log(error);
            }
        });

    });
    // Update Chart Of Accounts Strategy Status

    //Update Chart Of Accounts Strategy Modal
    $(document).on('click', '.edit-accountStrategy', function() {
        var accountStrategyId = $(this).data('accountstrategy-id');
        var url = '/finance/updateaccountstrategy/' + accountStrategyId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.edt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('.as-id').val(response.id);
                $('.u_accountStrategy').val(response.desc);
                $('.u_as_remarks').val(response.remarks);
                $('#edit-accountStrategy').modal('show');
                $('#ajax-loader').hide();
                const Levels = ["1", "2", "3", "4","5", "6", "7", "8","9", "10"];
                const ordinals = ["First Level", "Second Level", "Third Level", "Fourth Level", "Fifth Level", "Sixth Level", 
                                "Seventh Level", "Eighth Level", "Ninth Level", "Tenth Level"];
                let LevelOptions = '<option selected value="'+response.Level+'">' + response.HierarchyLevel + '</option>';
                for (let Level of Levels) {
                    if (Level != response.Level) {
                        console.log(Level,response.Level);
                        let ordinalLabel = ordinals[parseInt(Level) - 1];
                        LevelOptions += '<option value="'+Level+'">' + ordinalLabel + '</option>';
                    }
                }
                $('.u_as_level').html(LevelOptions);
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Chart Of Accounts Strategy Modal

    //Update Chart Of Accounts Strategy
    $('#u_accountStrategy').on('submit', function (event) {
        event.preventDefault();
        var formData = $(this).serializeArray();
        var Id;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'as-id') {
                Id = formData[i].value;
                break;
            }
        }
        var url = 'finance/update-accountstrategy/' + Id;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'info')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-accountStrategy').modal('hide');
                            $('#view-accountStrategy').DataTable().ajax.reload();
                        }
                    });
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-accountStrategy').modal('hide');
                            $('#view-accountStrategy').DataTable().ajax.reload(); // Refresh DataTable
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Chart Of Accounts Strategy

});
// Chart Of Accounts Strategy

// Chart Of Accounts Strategy Setup
$(document).ready(function() {
    //Add Chart Of Accounts Strategy Setup
    $('#add_accountStrategySetup').submit(function(e) {
        e.preventDefault(); // Prevent the form from submitting normally
        var data = SerializeForm(this);
        // var data = $(this).serializeArray();
        var resp = true;
        $(data).each(function(i, field){
            if ((field.value == '') || (field.value == null))
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                resp = false;
            }

        });

        if(resp != false)
        {
            $.ajax({
                url: "/finance/addaccountstrategysetup",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {

                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                // $('#add-accountStrategySetup').modal('hide');
                                // $('#view-accountStrategySetup').DataTable().ajax.reload();
                                // $('#add_accountStrategySetup')[0].reset();
                                // $('#add_accountStrategySetup').find('select').val($('#add_accountStrategySetup').find('select option:first').val()).trigger('change');
                                // $('.text-danger').hide();
                                location.reload();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_accountStrategySetup').find('select').val($('#add_accountStrategySetup').find('select option:first').val()).trigger('change');
                                $('#add_accountStrategySetup')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Chart Of Accounts Strategy Setup

    // View Chart Of Accounts Strategy Setup Data
    var viewAccountStrategySetup =  $('#view-accountStrategySetup').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/finance/accountstrategysetupdata',
        order: [[0, 'asc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            { data: 'account_level_setup', name: 'account_level_setup' },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "300px"
            },
            {
                targets: 4,
                width: "300px"
            }
        ]
    });

    viewAccountStrategySetup.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    viewAccountStrategySetup.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    viewAccountStrategySetup.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Chart Of Accounts Strategy Setup Data

    // Update Chart Of Accounts Strategy Setup Status
    $(document).on('click', '.accountstrategysetup_status', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/finance/accountstrategysetup-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
                var status = xhr.status;
                if(status == 200)
                {
                    $('#ajax-loader').hide();
                    Swal.fire({
                        text: 'Status Updated Successfully',
                        icon: 'success',
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            location.reload();
                        }
                    });
                }
            },
                error: function(xhr, status, error) {
                    console.log(error);
            }
        });
    });
    // Update Chart Of Accounts Strategy Setup Status

    //Update Chart Of Accounts Strategy Setup Modal
    $(document).on('click', '.edit-accountStrategySetup', function() {
        var accountStrategySetupId = $(this).data('accountstrategysetup-id');
        var url = '/finance/updateaccountstrategysetup/' + accountStrategySetupId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.edt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('.ass-id').val(response.id);
                $('.u_ass_org').html("<option selected value="+response.OrgId+">" + response.Org + "</option>");
                fetchAccountStrategyOrganizations(response.OrgId,'.u_ass_org', function(data) {
                    $('.u_ass_org').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        $('.u_ass_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                    });
                });

                $('.u_ass_level').html("<option selected value="+response.accountLevelId+">" + response.accountLevel + "</option>");
                fetchAccountStrategy(response.accountLevelId,'.u_asu_ass_levels_org', function(data) {
                    $('.u_ass_level').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        $('.u_ass_level').append('<option value="' + value.id + '">' + value.name + '</option>');
                    });
                });
                $('#edit-accountStrategySetup').modal('show');
                $('#ajax-loader').hide();

            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Chart Of Accounts Strategy Setup Modal

    //Update Chart Of Accounts Setup Strategy
    $('#u_accountStrategySetup').on('submit', function (event) {
        event.preventDefault();
        var formData = $(this).serializeArray();
        var Id;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'ass-id') {
                Id = formData[i].value;
                break;
            }
        }
        var url = 'finance/update-accountstrategysetup/' + Id;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            // $('#edit-accountStrategySetup').modal('hide');
                            // $('#view-accountStrategySetup').DataTable().ajax.reload(); // Refresh DataTable
                            // $('#u_accountStrategySetup')[0].reset();
                            // $('.text-danger').hide();
                            location.reload();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Chart Of Accounts Setup Strategy

    //View Account Level Setup Modal
    $(document).on('click', '.setup_al', function() {
        var level = $(this).data('level');
        var accountStrategySetupId = $(this).data('accountstrategysetup-id');
        $('#setup-accountLevel').find('.close').show();
        showLevel(1,level,accountStrategySetupId);
        $('#setup-accountLevel').modal({
            backdrop: 'static',
            keyboard: false,
            show: true
        });
    });
    //View Account Level Setup Modal

    //Exit Account Level Setup Modal
    $(document).on('click', '.exit_al', function() {
        $('#view-accountStrategySetup').DataTable().ajax.reload(); 
    });
    //Exit Account Level Setup Modal

    //View Account Levels Modal
    $(document).on('click', '.view_al', function() {
        var level = $(this).data('level');
        var accountStrategySetupId = $(this).data('accountstrategysetup-id');
        var url = '/finance/viewaccountlevels/';
        $.ajax({
            url: url,
            type: 'GET',
            data: {
                accountStrategySetupId: accountStrategySetupId,
                maxLevel: level,
            },
            dataType: 'json',
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(data) {
                // Call a function to render the data using Nestable
                updateNestableLoop(data,level);
                $('#view-accountLevel').modal('show');
                $('#ajax-loader').hide();
            },
            error: function(error) {
                console.log(error);
            }
        });
        // $('#view-accountLevel').modal('show');
    });
    //View Account Levels Modal

});
// Chart Of Accounts Strategy Setup

// Transaction Sources Or Destinations
$(document).ready(function() {
    //Add Transaction Sources Or Destinations
    $('#add_transactionsd').submit(function(e) {
        e.preventDefault(); // Prevent the form from submitting normally
        var data = SerializeForm(this);
        var resp = true;
        $(data).each(function(i, field){
            if ((field.value == '') || (field.value == null))
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $( 'textarea[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('textarea[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $( 'textarea[name= "' +FieldName +'"' ).addClass('requirefield');
                
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                resp = false;
            }

        });

        if(resp != false)
        {
            $.ajax({
                url: "/finance/addtransactionsd",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {

                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-transactionsd').modal('hide');
                                $('#view-transactionsd').DataTable().ajax.reload();
                                $('#add_transactionsd').find('select').val($('#add_transactionsd').find('select option:first').val()).trigger('change');
                                $('#add_transactionsd')[0].reset();
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_transactionsd').find('select').val($('#add_transactionsd').find('select option:first').val()).trigger('change');
                                $('#add_transactionsd')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Transaction Sources Or Destinations

    // View Transaction Sources Or Destinations
    var viewTransactionSourceDestination =  $('#view-transactionsd').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/finance/transactionsddata',
        order: [[0, 'asc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            {
                "data": 'name',
                "render": function(data, type, row) {
                    return data.replace(/\b\w/g, function(char) { return char.toUpperCase(); });
                }
            },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "300px"
            },
            {
                targets: 4,
                width: "300px"
            }
        ]
    });

    viewTransactionSourceDestination.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    viewTransactionSourceDestination.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    viewTransactionSourceDestination.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Transaction Sources Or Destinations

    // Update Transaction Sources Or Destinations Status
    $(document).on('click', '.transactionsd_status', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/finance/transactionsd-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
                var status = xhr.status;
                if(status == 200)
                {
                    $('#view-transactionsd').DataTable().ajax.reload();
                }
            },
            error: function(xhr, status, error) {
                    console.log(error);
            }
        });

    });
    // Update Transaction Sources Or Destinations Status

    //Update Transaction Sources Or Destinations Status
    $(document).on('click', '.edit-transactionsd', function() {
        var TransactionSourceDestinationId = $(this).data('transactionsd-id');
        var url = '/finance/updateransactionsd/' + TransactionSourceDestinationId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                console.log(response);
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('#date-format1').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('.tsd-id').val(response.id);
                $('.u_transactionsd').val(response.name);
                $('.u_tsd_org').html("<option selected value='"+response.orgId+"'>" + response.orgName + "</option>");
                fetchOrganizations(response.orgId,response.orgName,'.u_tsd_org', function(data) {
                    $('.u_tsd_org').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        $('.u_tsd_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                    });
                });
                $('#edit-transactionsd').modal('show');
                $('#ajax-loader').hide();
              
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Transaction Sources Or Destinations Status

    //Update Transaction Sources Or Destinations Status
    $('#u_transactionsd').on('submit', function (event) {
        event.preventDefault();
        var formData = $(this).serializeArray();
        var Id;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'tsd-id') {
                Id = formData[i].value;
                break;
            }
        }
        var url = 'finance/update-transactionsd/' + Id;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'info')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-transactionsd').modal('hide');
                            $('#view-transactionsd').DataTable().ajax.reload();
                        }
                    });
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-transactionsd').modal('hide');
                            $('#view-transactionsd').DataTable().ajax.reload(); // Refresh DataTable
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Transaction Sources Or Destinations Status

});
// Transaction Sources Or Destinations

// Financial Ledger Types
$(document).ready(function() {
    //Add Financial Ledger Types
    $('#add_ledgertypes').submit(function(e) {
        e.preventDefault(); // Prevent the form from submitting normally
        var data = SerializeForm(this);
        var resp = true;
        $(data).each(function(i, field){
            if ((field.value == '') || (field.value == null))
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $( 'textarea[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('textarea[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $( 'textarea[name= "' +FieldName +'"' ).addClass('requirefield');
                
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                resp = false;
            }
        });

        if(resp != false)
        {
            $.ajax({
                url: "/finance/addfinacialLedgertype",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {

                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-ledgertypes').modal('hide');
                                $('#view-ledgertypes').DataTable().ajax.reload();
                                $('#add_ledgertypes').find('select').val($('#add_ledgertypes').find('select option:first').val()).trigger('change');
                                $('#add_ledgertypes')[0].reset();
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_ledgertypes').find('select').val($('#add_ledgertypes').find('select option:first').val()).trigger('change');
                                $('#add_ledgertypes')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Financial Ledger Types

    // View Financial Ledger Types
    var viewFinancialLedgerTypes =  $('#view-ledgertypes').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/finance/financialledgertypedata',
        order: [[0, 'asc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            {
                "data": 'name',
                "render": function(data, type, row) {
                    return data.replace(/\b\w/g, function(char) { return char.toUpperCase(); });
                }
            },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "300px"
            },
            {
                targets: 4,
                width: "300px"
            }
        ]
    });

    viewFinancialLedgerTypes.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    viewFinancialLedgerTypes.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    viewFinancialLedgerTypes.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Financial Ledger Types

    // Update Financial Ledger Types Modal
    $(document).on('click', '.ledgertype_status', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/finance/financialledgertype-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
                var status = xhr.status;
                if(status == 200)
                {
                    $('#view-ledgertypes').DataTable().ajax.reload();
                }
            },
            error: function(xhr, status, error) {
                    console.log(error);
            }
        });

    });
    // Update Financial Ledger Types Modal

    //Update Financial Ledger Types
    $(document).on('click', '.edit-ledgertype', function() {
        var LedgerTypeId = $(this).data('ledgertype-id');
        var url = '/finance/updatefinancialledgertype/' + LedgerTypeId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('#date-format1').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('.u_ledgertype-id').val(response.id);
                $('.u_ledgertype').val(response.name);
                $('.u_flt_org').html("<option selected value='"+response.orgId+"'>" + response.orgName + "</option>");
                fetchOrganizations(response.orgId,response.orgName,'.u_flt_org', function(data) {
                    $('.u_flt_org').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        $('.u_flt_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                    });
                });
                $('#edit-ledgertypes').modal('show');
                $('#ajax-loader').hide();
              
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Financial Ledger Types Modal

    //Update Financial Ledger Type
    $('#u_ledgertypes').on('submit', function (event) {
        event.preventDefault();
        var formData = $(this).serializeArray();
        var Id;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'u_ledgertype-id') {
                Id = formData[i].value;
                break;
            }
        }
        var url = '/finance/update-financialledger/' + Id;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'info')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-ledgertypes').modal('hide');
                            $('#view-ledgertypes').DataTable().ajax.reload();
                        }
                    });
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-ledgertypes').modal('hide');
                            $('#view-ledgertypes').DataTable().ajax.reload(); // Refresh DataTable
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                console.log(xhr.responseText);
            }
        });
    });
    //Update Financial Ledger Type
});
// Financial Ledger Types

// Financial Payroll Additions
$(document).ready(function() {
    //Add  Payroll Additions
    $('#add_payrolladdition').submit(function(e) {
        e.preventDefault(); // Prevent the form from submitting normally
        var data = SerializeForm(this);
        var resp = true;
        $(data).each(function(i, field){
            if ((field.value == '') || (field.value == null))
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $( 'textarea[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('textarea[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $( 'textarea[name= "' +FieldName +'"' ).addClass('requirefield');
                
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                resp = false;
            }
        });

        if(resp != false)
        {
            $.ajax({
                url: "/finance/addpayrolladdition",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {

                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-payrolladdition').modal('hide');
                                $('#view-payrolladdition').DataTable().ajax.reload();
                                $('#add_payrolladdition').find('select').val($('#add_payrolladdition').find('select option:first').val()).trigger('change');
                                $('#add_payrolladdition')[0].reset();
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_payrolladdition').find('select').val($('#add_payrolladdition').find('select option:first').val()).trigger('change');
                                $('#add_payrolladdition')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add  Payroll Additions

    // View  Payroll Additions
    var viewPayrollAddition =  $('#view-payrolladdition').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/finance/payrolladditiondata',
        order: [[0, 'asc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            {
                "data": 'name',
                "render": function(data, type, row) {
                    return data.replace(/\b\w/g, function(char) { return char.toUpperCase(); });
                }
            },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "300px"
            },
            {
                targets: 4,
                width: "300px"
            }
        ]
    });

    viewPayrollAddition.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    viewPayrollAddition.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    viewPayrollAddition.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View  Payroll Additions

    // Update Payroll Additions Status
    $(document).on('click', '.payrolladdition_status', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/finance/payrolladdition-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
                var status = xhr.status;
                if(status == 200)
                {
                    $('#view-payrolladdition').DataTable().ajax.reload();
                }
            },
            error: function(xhr, status, error) {
                    console.log(error);
            }
        });

    });
    // Update Payroll Additions Status

    //Update Payroll Additions Modal
    $(document).on('click', '.edit-payrolladdition', function() {
        var PayrollAddition = $(this).data('payrolladdition-id');
        var url = '/finance/updatepayrolladdition/' + PayrollAddition;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('#date-format1').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('.u_payrolladdition-id').val(response.id);
                $('.u_payrolladdition').val(response.name);
                $('.u_pa_org').html("<option selected value='"+response.orgId+"'>" + response.orgName + "</option>");
                fetchOrganizations(response.orgId,response.orgName,'.u_pa_org', function(data) {
                    $('.u_pa_org').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        $('.u_pa_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                    });
                });
                $('#edit-payrolladdition').modal('show');
                $('#ajax-loader').hide();
              
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Payroll Additions Modal

    //Update Payroll Additions
    $('#u_payrolladdition').on('submit', function (event) {
        event.preventDefault();
        var formData = $(this).serializeArray();
        var Id;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'u_payrolladdition-id') {
                Id = formData[i].value;
                break;
            }
        }
        var url = '/finance/update-payrolladdition/' + Id;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'info')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-payrolladdition').modal('hide');
                            $('#view-payrolladdition').DataTable().ajax.reload();
                        }
                    });
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-payrolladdition').modal('hide');
                            $('#view-payrolladdition').DataTable().ajax.reload(); // Refresh DataTable
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                console.log(xhr.responseText);
            }
        });
    });
    //Update Payroll Additions
});
// Financial Payroll Additions

// Financial Payroll Additions
$(document).ready(function() {
    //Add  Payroll Deduction
    $('#add_payrolldeduction').submit(function(e) {
        e.preventDefault(); 
        var data = SerializeForm(this);
        var resp = true;
        $(data).each(function(i, field){
            if ((field.value == '') || (field.value == null))
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $( 'textarea[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('textarea[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $( 'textarea[name= "' +FieldName +'"' ).addClass('requirefield');
                
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                resp = false;
            }
        });

        if(resp != false)
        {
            $.ajax({
                url: "/finance/addpayrolldeduction",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {

                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-payrolldeduction').modal('hide');
                                $('#view-payrolldeduction').DataTable().ajax.reload();
                                $('#add_payrolldeduction').find('select').val($('#add_payrolldeduction').find('select option:first').val()).trigger('change');
                                $('#add_payrolldeduction')[0].reset();
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_payrolldeduction').find('select').val($('#add_payrolldeduction').find('select option:first').val()).trigger('change');
                                $('#add_payrolldeduction')[0].reset();
                            }
                        });
                    }
                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add  Payroll Deduction

    // View  Payroll Deduction
    var viewPayrollDeduction =  $('#view-payrolldeduction').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/finance/payrolldeductiondata',
        order: [[0, 'asc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            {
                "data": 'name',
                "render": function(data, type, row) {
                    return data.replace(/\b\w/g, function(char) { return char.toUpperCase(); });
                }
            },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "300px"
            },
            {
                targets: 4,
                width: "300px"
            }
        ]
    });

    viewPayrollDeduction.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    viewPayrollDeduction.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    viewPayrollDeduction.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Payroll Deduction

    // Update Payroll Deduction Status
    $(document).on('click', '.payrolldeduction_status', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/finance/payrolldeduction-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
                var status = xhr.status;
                if(status == 200)
                {
                    $('#view-payrolldeduction').DataTable().ajax.reload();
                }
            },
            error: function(xhr, status, error) {
                    console.log(error);
            }
        });

    });
    // Update Payroll Deduction Status

    //Update Payroll Deduction Modal
    $(document).on('click', '.edit-payrolldeduction', function() {
        var PayrollDeduction = $(this).data('payrolldeduction-id');
        var url = '/finance/updatepayrolldeduction/' + PayrollDeduction;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('#date-format1').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('.u_payrolldeduction-id').val(response.id);
                $('.u_payrolldeduction').val(response.name);
                $('.u_pd_org').html("<option selected value='"+response.orgId+"'>" + response.orgName + "</option>");
                fetchOrganizations(response.orgId,response.orgName,'.u_pd_org', function(data) {
                    $('.u_pd_org').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        $('.u_pd_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                    });
                });
                $('#edit-payrolldeduction').modal('show');
                $('#ajax-loader').hide();
              
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Payroll Deduction Modal

    //Update Payroll Deduction
    $('#u_payrolldeduction').on('submit', function (event) {
        event.preventDefault();
        var formData = $(this).serializeArray();
        var Id;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'u_payrolldeduction-id') {
                Id = formData[i].value;
                break;
            }
        }
        var url = '/finance/update-payrolldeduction/' + Id;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'info')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-payrolldeduction').modal('hide');
                            $('#view-payrolldeduction').DataTable().ajax.reload();
                        }
                    });
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-payrolldeduction').modal('hide');
                            $('#view-payrolldeduction').DataTable().ajax.reload(); // Refresh DataTable
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                console.log(xhr.responseText);
            }
        });
    });
    //Update Payroll Deduction
});
// Financial Payroll Additions

// Donor Registration
$(document).ready(function() {
    $(document).on('click', '.donor-registration', function() {
        $('#donor-registration').modal('show');
        $('.donor_corporate').hide();
        $('#donor_type').change(function() {
            var selectedType = $(this).val();
            if (selectedType === 'corporate') {
                $('.donor_corporate').show();
            } else {
                $('.donor_corporate').hide();
            }
        });

    });
    //Register Donor
    $('#register_donor').submit(function(e) {
        e.preventDefault(); 
        var data = SerializeForm(this);
        var resp = true;
        $(data).each(function(i, field){
            if ((field.value == '' || field.value == null) && field.name != 'donor_corporate' && field.name != 'donor_landline') 
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $( 'textarea[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('textarea[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $( 'textarea[name= "' +FieldName +'"' ).addClass('requirefield');
                
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                resp = false;
            }
        });
        var donorType = $('#donor_type').val();
        if (donorType === 'corporate') {
            var donorCorporateField = $('input[name="donor_corporate"]');
            if (donorCorporateField.val() == '' || donorCorporateField.val() == null) {
                $('#donor_corporate_error').text("This field is required");
                donorCorporateField.addClass('requirefield');
                donorCorporateField.focus(function() {
                    $('#donor_corporate_error').text("");
                    $(this).removeClass("requirefield");
                });
                resp = false;
            }
        }

        if(resp != false)
        {
            $.ajax({
                url: "/finance/donor_registration",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {

                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#donor-registration').modal('hide');
                                $('#view-donors').DataTable().ajax.reload();
                                $('#register_donor').find('select').val($('#register_donor').find('select option:first').val()).trigger('change');
                                $('#register_donor')[0].reset();
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#register_donor').find('select').val($('#register_donor').find('select option:first').val()).trigger('change');
                                $('#register_donor')[0].reset();
                            }
                        });
                    }
                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Register Donor

    // View Donor
    var viewDonor =  $('#view-donors').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/finance/donorsdata',
        order: [[0, 'asc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            {
                "data": 'address',
                "render": function(data, type, row) {
                    return data.replace(/\b\w/g, function(char) { return char.toUpperCase(); });
                }
            },
            {
                "data": 'remarks',
                "render": function(data, type, row) {
                    return data.replace(/\b\w/g, function(char) { return char.toUpperCase(); });
                }
            },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "300px"
            },
            {
                targets: 5,
                width: "300px"
            }
        ]
    });

    viewDonor.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    viewDonor.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    viewDonor.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Donor

    // Update Donor Status
    $(document).on('click', '.donor_status', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/finance/donor-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
                var status = xhr.status;
                if(status == 200)
                {
                    $('#view-donors').DataTable().ajax.reload();
                }
            },
            error: function(xhr, status, error) {
                    console.log(error);
            }
        });

    });
    // Update Donor Status

    //Update Donor Modal
    $(document).on('click', '.edit-donor', function() {
        var DonorID = $(this).data('donor-id');
        var url = '/finance/updatedonor/' + DonorID;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('#date-format1').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('.u_donor-id').val(response.id);
                $('.u_donor_corporate').val(response.CorporateName);
                $('.u_donor_name').val(response.PersonName);
                $('.u_donor_email').val(response.PersonEmail);
                $('.u_donor_cell').val(response.Cell);
                $('.u_donor_landline').val(response.landline);
                $('.u_donor_address').val(response.Address);
                $('.u_donor_remarks').val(response.Remarks);
                if(response.Type == 'Corporate'){
                    $('.ucorporateName').show();
                    $('.u_donor_corporate').prop('required', true);
                }
                else{
                    $('.ucorporateName').hide();
                    $('.u_donor_corporate').prop('required', false);
                }
                const corporateTypes = ["Corporate", "Individual"];
                let corporateTypeOptions = '<option selected value="' + response.Type + '">' + response.Type + '</option>';
                for (let corporateType of corporateTypes) {
                    if (response.Type !== corporateType) {
                        corporateTypeOptions += '<option value="' + corporateType + '">' + corporateType + '</option>';
                    }
                }
                $('.u_donor_type').html(corporateTypeOptions);
                $('.u_donor_type').change(function() {
                    var selectedType = $(this).val();
                    if (selectedType === 'Corporate') {
                        $('.ucorporateName').show();
                        $('.u_donor_corporate').prop('required', true);

                    } else {
                        $('.ucorporateName').hide();
                        $('.u_donor_corporate').prop('required', false);
                    }
                });

                $('.u_donor_org').html("<option selected value='"+response.orgId+"'>" + response.orgName + "</option>");
                fetchOrganizations(response.orgId,response.orgName,'.u_pd_org', function(data) {
                    $('.u_donor_org').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        $('.u_donor_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                    });
                });
                $('#edit-donor').modal('show');
                $('#ajax-loader').hide();
              
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Donor Modal

    //Update Donor
    $('#u_register_donor').on('submit', function (event) {
        event.preventDefault();
        var formData = $(this).serializeArray();
        var Id;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'u_donor-id') {
                Id = formData[i].value;
                break;
            }
        }
        var url = '/finance/update-donor/' + Id;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'info')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-donor').modal('hide');
                            $('#view-donors').DataTable().ajax.reload();
                        }
                    });
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-donor').modal('hide');
                            $('#view-donors').DataTable().ajax.reload(); // Refresh DataTable
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                console.log(xhr.responseText);
            }
        });
    });
    //Update Donor
});
// Donor Registration

// Finance Transaction Type
$(document).ready(function() {
    // Open Finance Transaction Type Modal
    $(document).on('click', '.add-financetransactiontype', function() {
        var orgId = $('#ftt_org').val();
        if(orgId)
        {
            fetchTransactionSourceDestination(orgId, '#ftt_source', function(data) {
                $('#ftt_source').html("<option selected disabled value=''>Select Organization</option>");
                $.each(data, function(key, value) {
                        $('#ftt_source').append('<option data-name="'+value.name+'" value="' + value.id + '">' + value.name + '</option>');
                });
            });

            fetchTransactionSourceDestination(orgId, '#ftt_destination', function(data) {
                $('#ftt_destination').html("<option selected disabled value=''>Select Organization</option>");
                $.each(data, function(key, value) {
                    $('#ftt_destination').append('<option data-name="'+value.name+'" value="' + value.id + '">' + value.name + '</option>');
                });
            });
            fetchOrganizationLedger(orgId, '#ftt_ledger', function(data) {
                $('#ftt_ledger').html("<option selected disabled value=''>Select Ledger Type</option>");
                $.each(data, function(key, value) {
                        $('#ftt_ledger').append('<option value="' + value.id + '">' + value.name + '</option>');
                });
            });

            fetchOrganizationAccount(orgId, '#ftt_debit', function(data) {
                $('#ftt_debit').html("<option selected disabled value=''>Select Debit Account</option>");
                $.each(data, function(key, value) {
                    $('#ftt_debit').append('<option value="' + value.id + '">' + value.accountNames + '</option>');
                });
            });

            fetchOrganizationAccount(orgId, '#ftt_credit', function(data) {
                $('#ftt_credit').html("<option selected disabled value=''>Select Credit Account</option>");
                $.each(data, function(key, value) {
                    $('#ftt_credit').append('<option value="' + value.id + '">' + value.accountNames + '</option>');
                });
            });
        }
        else{
            $('#ftt_org').html("<option selected disabled value=''>Select Organization</option>");
            fetchOrganizations('null', '','#ftt_org', function(data) {
                $('#ftt_org').find('option:contains("Loading...")').remove();
                $.each(data, function(key, value) {
                    $('#ftt_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                });
            });
            $('#ftt_source').html("<option selected disabled value=''>Select Transaction Source</option>").prop('disabled',true);
            OrgChangeFinanceTransactionSourceDestination('#ftt_org', '#ftt_source', '#add_financetransactiontype');
         
            $('#ftt_destination').html("<option selected disabled value=''>Select Transaction Destination</option>").prop('disabled',true);
            OrgChangeFinanceTransactionSourceDestination('#ftt_org', '#ftt_destination', '#add_financetransactiontype');
    
            $('#ftt_ledger').html("<option selected disabled value=''>Select Ledger Type</option>").prop('disabled',true);
            OrgChangeLedger('#ftt_org', '#ftt_ledger', '#add_financetransactiontype');
    
            $('#ftt_debit').html("<option selected disabled value=''>Select Debit Account</option>").prop('disabled',true);
            OrgChangeAccount('#ftt_org', '#ftt_debit', '#add_financetransactiontype');
    
            $('#ftt_credit').html("<option selected disabled value=''>Select Credit Account</option>").prop('disabled',true);
            OrgChangeAccount('#ftt_org', '#ftt_credit', '#add_financetransactiontype');

        }
        $('#ceilingamount').hide();
        $(document).off('change', '#ftt_amounteditable').on('change', '#ftt_amounteditable', function() {
            var selectedval = $(this).val();
            if(selectedval == 'yes')
            {
                $('#ceilingamount').show();
            }
            else{
                $('#ceilingamount').hide();
            }
        });
        $('#add-financetransactiontype').modal('show');

    });
    // Open Finance Transaction Type Modal
    
    //Add Finance Transaction Type
    $('#add_financetransactiontype').submit(function(e) {
        e.preventDefault(); 
        var data = SerializeForm(this);
        var EditingStatus;
        var Destination = null; 
        var Source = null;
        for (var i = 0; i < data.length; i++) {
            if (data[i].name === 'ftt_amounteditable') {
                EditingStatus = data[i].value;
            }
            if (data[i].name === 'ftt_destination') {
                Destination = data[i].value;
            }
            if (data[i].name === 'ftt_source') {
                Source = data[i].value;
            }
        }
        var logic = false; 
        var excludedFields = [];
      
        $('#ceilingamount').hide(); 
        if (EditingStatus !== 'no' && EditingStatus !== null) {
            $('#ceilingamount').show();
        } else {
            excludedFields.push('ftt_amountceiling');
        }
    
        var resp = true;
        $(data).each(function(i, field){
            if ((field.value === '' || field.value === null) && (!logic || !excludedFields.includes(field.name)))
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $( 'textarea[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('textarea[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $( 'textarea[name= "' +FieldName +'"' ).addClass('requirefield');
                
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                resp = false;
            }
        });

        if(resp != false)
        {
            $.ajax({
                url: "/finance/addtransactiontype",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {
                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-financetransactiontype').modal('hide');
                                $('#view-financetransactiontype').DataTable().ajax.reload();
                                $('#add_financetransactiontype').find('select').each(function() {
                                    $(this).val('').trigger('change'); 
                                });
                                $('#add_financetransactiontype')[0].reset();
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_financetransactiontype').find('select').each(function() {
                                    $(this).val('').trigger('change'); 
                                });
                                $('#add_financetransactiontype')[0].reset();
                            }
                        });
                    }
                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Finance Transaction Type

    // View Finance Transaction Type
    var viewfinancetransactiontype =  $('#view-financetransactiontype').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/finance/financetransactiontypedata',
        order: [[0, 'asc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'details', name: 'details' },
            { data: 'account', name: 'account' },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "300px"
            },
            {
                targets: 4,
                width: "300px"
            }
        ]
    });

    viewfinancetransactiontype.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    viewfinancetransactiontype.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    viewfinancetransactiontype.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Finance Transaction Type

    // Update Finance Transaction Type Status
    $(document).on('click', '.ftt_status ', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/finance/transactiontype-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
                var status = xhr.status;
                if(status == 200)
                {
                    $('#view-financetransactiontype').DataTable().ajax.reload();
                }
            },
            error: function(xhr, status, error) {
                    console.log(error);
            }
        });

    });
    // Update Finance Transaction Type Status

    //Update Finance Transaction Type Modal
    $(document).on('click', '.edit-ftt', function() {
        var TransactiontypeID = $(this).data('ftt-id');
        var url = '/finance/updatefinancetransactiontype/' + TransactiontypeID;
        $('#ajax-loader').show();

        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('#u_ftt_edt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('.u_ftt-id').val(response.id);
                $('#u_ftt_desc').val(response.Description);
                $('#u_ftt_org').html("<option selected value='"+response.orgId+"'>" + response.orgName + "</option>");
                fetchOrganizations(response.orgId, '','#u_ftt_org', function(data) {
                    $.each(data, function(key, value) {
                        $('#u_ftt_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                    });
                });

                const ActivityTypes = ["Inward", "OutWard", "Reverse"];
                let ActivityOptions = '<option selected value="' + response.Activity + '">' + response.dispActivity + '</option>';
                for (let ActivityType of ActivityTypes) {
                    if (response.dispActivity !== ActivityType) {
                        ActivityOptions += '<option value="' + ActivityType + '">' + ActivityType + '</option>';
                    }
                }
                $('#u_ftt_activity').html(ActivityOptions);


                $('#u_ftt_source').html("<option selected value='"+response.TransactionSourceId+"'>" + response.TransactionSourceName + "</option>");
                fetchTransactionSourceDestination(response.orgId, '#u_ftt_source', function(data) {
                    $.each(data, function(key, value) {
                        if (value.id !== response.TransactionSourceId) {
                            $('#u_ftt_source').append('<option data-name="'+value.name+'" value="' + value.id + '">' + value.name + '</option>');
                        }
                    });
                });
                OrgChangeFinanceTransactionSourceDestination('#u_ftt_org', '#u_ftt_source', '#update_financetransactiontype');

                $('#u_ftt_destination').html("<option selected value='"+response.TransactionDestinationId+"'>" + response.TransactionDestinationName + "</option>");
                fetchTransactionSourceDestination(response.orgId, '#u_ftt_destination', function(data) {
                    $.each(data, function(key, value) {
                        if (value.id !== response.TransactionDestinationId) {
                            $('#u_ftt_destination').append('<option data-name="'+value.name+'" value="' + value.id + '">' + value.name + '</option>');
                        }
                    });
                });
                OrgChangeFinanceTransactionSourceDestination('#u_ftt_org', '#u_ftt_destination', '#update_financetransactiontype');

                $('#u_ftt_debit').html("<option selected value='"+response.DebitAccountId+"'>" + response.DebitAccount + "</option>");
                fetchOrganizationAccount(response.orgId, '#u_ftt_debit', function(data) {
                    $.each(data, function(key, value) {
                        if (value.id !== response.DebitAccountId) {
                            $('#u_ftt_debit').append('<option value="' + value.id + '">' + value.accountNames + '</option>');
                        }
                    });
                });
                OrgChangeAccount('#u_ftt_org', '#u_ftt_debit', '#update_financetransactiontype');

                $('#u_ftt_credit').html("<option selected value='"+response.CreditAccountId+"'>" + response.CreditAccount + "</option>");
                fetchOrganizationAccount(response.orgId, '#u_ftt_credit', function(data) {
                    $.each(data, function(key, value) {
                        if (value.id !== response.CreditAccountId) {
                            $('#u_ftt_credit').append('<option value="' + value.id + '">' + value.accountNames + '</option>');
                        }
                    });
                });
                OrgChangeAccount('#u_ftt_org', '#u_ftt_credit', '#update_financetransactiontype');

                $('#u_ftt_ledger').html("<option selected value='"+response.LedgerId+"'>" + response.Ledger + "</option>");
                fetchOrganizationLedger(response.orgId, '#u_ftt_ledger', function(data) {
                    $.each(data, function(key, value) {
                        if (value.id !== response.LedgerId) {
                            $('#u_ftt_ledger').append('<option value="' + value.id + '">' + value.name + '</option>');
                        }
                    });
                });
                OrgChangeLedger('#u_ftt_org', '#u_ftt_ledger', '#update_financetransactiontype');

                const AmountEditings = ["Yes", "No"];
                let AmountEditingOptions = '<option selected value="' + response.AmountEditable + '">' + response.DisplayAmountEditable + '</option>';
                for (let AmountEditing of AmountEditings) {
                    if (response.DisplayAmountEditable !== AmountEditing) {
                        AmountEditingOptions += '<option value="' + AmountEditing + '">' + AmountEditing + '</option>';
                    }
                }
                $('#u_ftt_amounteditable').html(AmountEditingOptions);
                if(response.AmountEditable == 'Yes')
                {
                    $('#u_ceilingamount').show();
                    $('#u_ftt_amountceiling').val(response.AmountCeiling);
                    $('#u_ftt_amountceiling').prop('required', true);
                }
                else{
                    $('#u_ceilingamount').hide();
                    $('#u_ftt_amountceiling').val('');
                    $('#u_ftt_amountceiling').prop('required', false);
                }
                $('#u_ftt_amountceiling').val(response.AmountCeiling);
                $(document).off('change', '#u_ftt_amounteditable').on('change', '#u_ftt_amounteditable', function() {
                    var selectedval = $(this).val();
                    if(selectedval == 'Yes')
                    {
                        $('#u_ceilingamount').show();
                        $('#u_ftt_amountceiling').val(response.AmountCeiling);
                        $('#u_ftt_amountceiling').prop('required', true);
                    }
                    else{
                        $('#u_ceilingamount').hide();
                        $('#u_ftt_amountceiling').val('');
                        $('#u_ftt_amountceiling').prop('required', false);
                    }
                });

                const DiscountAllows = ["Yes", "No"];
                let DiscountAllowOptions = '<option selected value="' + response.DiscountAllowed + '">' + response.DisplayDiscountAllowed + '</option>';
                for (let DiscountAllow of DiscountAllows) {
                    if (response.DisplayDiscountAllowed !== DiscountAllow) {
                        DiscountAllowOptions += '<option value="' + DiscountAllow + '">' + DiscountAllow + '</option>';
                    }
                }
                $('#u_ftt_discountallowed').html(DiscountAllowOptions);
                
                $('#ajax-loader').hide();
                $('#edit-financetransactiontype').modal('show');
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Finance Transaction Type Modal

    //Update Finance Transaction Type
    $('#update_financetransactiontype').on('submit', function (event) {
        event.preventDefault();
        var formData = SerializeForm(this);
        var Id;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'u_ftt-id') {
                Id = formData[i].value;
                break;
            }
        }
        var url = '/finance/update-financetransactiontype/' + Id;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'info')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-financetransactiontype').modal('hide');
                            $('#view-financetransactiontype').DataTable().ajax.reload();
                        }
                    });
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-financetransactiontype').modal('hide');
                            $('#view-financetransactiontype').DataTable().ajax.reload(); // Refresh DataTable
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                console.log(xhr.responseText);
            }
        });
    });
    //Update Finance Transaction Type
});
// Finance Transaction Type

//Payment Order
$(document).ready(function() {
    //Open Payment Order Setup
    $(document).on('click', '.add-paymentorder', function() {
        $('.duplicate:not(:first)').remove();

        var orgId = $('#po_org').val();
        if(orgId)
        {
            $('#po_site').html("<option selected disabled value=''>Select Site</option>");
            fetchOrganizationSites(orgId, '#po_site', function(data) {
                $.each(data, function(key, value) {
                    $('#po_site').append('<option value="' + value.id + '">' + value.name + '</option>');
                });
            });

            $('.po_brand').html("<option selected disabled value=''>Select Item Brand</option>");
            fetchOrganizationBrand(orgId,'.po_brand', function(data) {
                $('.po_brand').find('option:contains("Loading...")').remove();
                $.each(data, function(key, value) {
                    $('.po_brand').append('<option value="' + value.id + '">' + value.name + '</option>');
                });
            });

            $('#po_vendor').html("<option selected disabled value=''>Select Vendor</option>");
            fetchOrganizationVendor(orgId, '#po_vendor', function(data) {
                $.each(data, function(key, value) {
                    $('#po_vendor').append('<option value="' + value.id + '">' + value.person_name + '</option>');
                });
            });
        }
        else{
            $('#po_org').html("<option selected disabled value=''>Select Organization</option>");
            fetchOrganizations('null', '','#po_org', function(data) {
                $('#po_org').find('option:contains("Loading...")').remove();
                $.each(data, function(key, value) {
                    $('#po_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                });
            });
            
            $('#po_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', true);
            OrgChangeSites('#po_org', '#po_site', '#add_paymentorder');

            $('.po_brand').html("<option selected disabled value=''>Select Item Brand</option>").prop('disabled', true);
            OrgChangeBrand('#po_org', '.po_brand', '#add_paymentorder');

            $('#po_vendor').html("<option selected disabled value=''>Select Vendor</option>").prop('disabled', true);
            OrgChangeVendor('#po_org', '#po_vendor', '#add_paymentorder');
        }
        $('#add-paymentorder').modal('show');
    });
    //Open Payment Order Setup

    //Approve Payment Order 
    $(document).on('click', '#po_approve', function(e) {
        e.preventDefault();
        var Id = $(this).data('id');
        var userId = $(this).data('userid');
        var data = {
            id: Id,
            userId: userId,
        };
        Swal.fire({
            text: 'Are You Sure?',
            showCancelButton: true,
            confirmButtonText: 'Yes',
            cancelButtonText: 'No'
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: "/inventory/approve-po",
                    method: "POST",
                    headers: {
                        'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                    },
                    data: data,
                    success: function(response) {
                        if (response.success) {
                            Swal.fire('Success', 'Your action has been executed successfully.', 'success');
                            $('#view-paymentorder').DataTable().ajax.reload();
                        } else {
                            Swal.fire('Error', 'Something went wrong.', 'error');
                            $('#view-paymentorder').DataTable().ajax.reload();
                        }
                    },
                    error: function(error) {
                        console.log(error);
                    }
                });
            } 
        });
    });
    //Approve Payment Order 

    //Add Payment Order
    $('#add_paymentorder').submit(function(e) {
        e.preventDefault();
        var data = SerializeForm(this);
        var resp = true;
        $(data).each(function(i, field){
            if ((field.value == '' || field.value == null) && field.name != 'po_remarks[]') 
            {


                var FieldName = field.name;
                var FieldName = field.name.replace('[]', '');

                var FieldID = '.'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                $( 'textarea[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('textarea[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $( 'textarea[name= "' +FieldName +'"' ).addClass('requirefield');
                resp = false;
            }
        });

        $(".duplicate").each(function() {
            var row = $(this);
            row.find('input, textarea, select').each(function() {
                var elem = $(this);
                var value = elem.val();
                
                var fieldName = elem.attr('name').replace('[]', '');
                if (elem.attr('name') === 'po_remarks[]') {
                    return true; 
                }
                var errorField = row.find('.' + fieldName + '_error');
                if (!value || value === "" || (elem.is('select') && value === null)) {
                    errorField.text("This field is required");
                    if (elem.is('select')) {
                        elem.next('.select2-container').find('.select2-selection').addClass('requirefield');
                        elem.on('select2:open', function() {
                            errorField.text("");
                            elem.next('.select2-container').find('.select2-selection').removeClass("requirefield");
                        });
                    }
                    else {
                        elem.addClass('requirefield');
                        elem.focus(function() {
                            errorField.text("");
                            elem.removeClass("requirefield");
                        });
                    }
                    resp = false;
                } else {
                    errorField.text("");
                    if (elem.is('select')) {
                        elem.next('.select2-container').find('.select2-selection').removeClass('requirefield');
                    } else {
                        elem.removeClass('requirefield');
                    }
                }
            });
        });

        if(resp != false)
        {
            $.ajax({
                url: "/inventory/addpaymentorder",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {
                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-paymentorder').modal('hide');
                                $('#view-paymentorder').DataTable().ajax.reload();
                                $('#add_paymentorder')[0].reset();
                                $('#add_paymentorder').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                // $('#add_paymentorder').find('select').each(function(){
                                //     $(this).val($(this).find('option:first').val()).trigger('change');
                                // });
                                // $('#add_paymentorder')[0].reset();
                            }
                        });
                    }
                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Payment Order

    // View Payment Order
    var viewPaymentOrder =  $('#view-paymentorder').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/inventory/paymentorder',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            { data: 'item_details', name: 'item_details' },
            // { data: 'other_details', name: 'other_details' },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "400px"
            },
            {
                targets: 2,
                width: "600px"
            },
            {
                targets: 4,
                width: "300px"
            }
        ]
    });
    viewPaymentOrder.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    viewPaymentOrder.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    viewPaymentOrder.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Payment Order

    // Save PDF
    $(document).on('click', '.save-pdf-po', function() {
        var paymentOrderId = $(this).data('paymentorder-id');
        window.location.href = '/payment-order/' + paymentOrderId + '/pdf';
    });
    // Save PDF

    // Update Payment Order Status
    $(document).on('click', '.po_status ', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/inventory/paymentorder-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
                var status = xhr.status;
                if(status == 200)
                {
                    $('#view-paymentorder').DataTable().ajax.reload();
                }
            },
            error: function(xhr, status, error) {
                console.log(error);
            }
        });
    });
    // Update Payment Order Status

    //Update Payment Order Modal
    $(document).on('click', '.edit-paymentorder', function() {
        var poId = $(this).data('paymentorder-id');
        var url = '/inventory/updatepaymentorder/' + poId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('#u_po_edt').val(formattedDateTime);
                $('#po-id').val(response.id);
                $('#u_po_org').html("<option selected value="+ response.orgId +">" + response.orgName + "</option>");
                fetchOrganizations(response.orgId,response.orgName,'#u_po_org', function(data) {
                    $('#u_po_org').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        $('#u_po_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                    });
                });

                $('#u_po_site').html("<option selected value="+ response.siteId +">" + response.siteName + "</option>");
                fetchSites(response.orgId, '#u_po_site', function(data) {
                    if (data.length > 0) {
                        $.each(data, function(key, value) {
                            $('#u_po_site').append('<option value="' + value.id + '">' + value.name + '</option>');
                        });
                    }
                }, function(error) {
                    console.log(error);
                },response.siteId);
                OrgChangeSites('#u_po_org', '#u_po_site', '#update_paymentorder');

                $('#u_po_vendor').html("<option selected value="+ response.vendorId +">" + response.vendorName + "</option>");
                fetchOrganizationVendor(response.orgId, '#u_po_vendor', function(data) {
                    $.each(data, function(key, value) {
                        if (value.id !== response.vendorId) {
                            $('#u_po_vendor').append('<option value="' + value.id + '">' + value.person_name + '</option>');
                        }
                    });
                });
                OrgChangeVendor('#u_po_org', '#u_po_vendor', '#update_paymentorder');

                var brandIds = response.brandId.split(',');
                var brandNames = response.brandNames.split(',');
                var quantities = response.Quantities.split(',');
                var amounts = response.Amounts.split(',');
                var discounts = response.Discounts.split(',');
                var remarks = response.remarks.split(',');

                $('.uduplicate').empty();
                for (var i = 0; i < brandIds.length; i++) {
                    var brandField = '<div class="col-md-6">' +
                        '<div class="form-group">' +
                        '<label class="control-label">Update Brand</label>' +
                        '<select class="form-control selecter p-0 u_po_brand" name="u_po_brand[]" id="u_po_brand' + i + '" required style="color:#222d32">' +
                        '<option value="' + brandIds[i] + '"> ' + brandNames[i] + '</option>' +
                        '</select>' +
                        '</div>' +
                        '</div>';

                    (function (index) {
                        fetchOrganizationBrand(response.orgId, '#u_po_brand' + index, function (data) {
                            if (data.length > 0) {
                                $.each(data, function (key, value) {
                                    var a ='#u_po_brand'+ index;
                                    $('#u_po_brand' + index).append('<option value="' + value.id + '">' + value.name + '</option>');
                                });
                                $('#u_po_brand' + index).select2();
                            }
                        },
                        function (error) {
                            console.log(error);
                        }, brandIds[index]);
                    })(i); 

                    var qtyField = '<div class="col-md-6">' +
                        '<div class="form-group row">' +
                        '<div class="col-md-12">' +
                        '<div class="form-group has-custom m-b-5">' +
                        '<label class="control-label">Update Demand Qty</label>' +
                        '<input type="number" class="form-control input-sm" required name="u_po_qty[]" id="input05" value="' + quantities[i] + '">' +
                        '</div>' +
                        '<span class="text-danger po_qty_error"></span>' +
                        '</div>' +
                        '</div>' +
                        '</div>';
        
                    var amountField = '<div class="col-md-6">' +
                        '<div class="form-group row">' +
                        '<div class="col-md-12">' +
                        '<div class="form-group has-custom m-b-5">' +
                        '<label class="control-label">Update Amount</label>' +
                        '<input type="number" class="form-control input-sm" required name="u_po_amount[]" id="input0565" value="' + amounts[i] + '">' +
                        '</div>' +
                        '</div>' +
                        '</div>' +
                        '</div>';
        
                    var discountField = '<div class="col-md-6">' +
                        '<div class="form-group row">' +
                        '<div class="col-md-12">' +
                        '<div class="form-group has-custom m-b-5">' +
                        '<label class="control-label">Update Discount</label>' +
                        '<input type="number" class="form-control input-sm" required name="u_po_discount[]" id="input0575" value="' + discounts[i] + '">' +
                        '</div>' +
                        '</div>' +
                        '</div>' +
                        '</div>';
        
                    var remarksField = '<div class="col-md-12">' +
                        '<div class="form-group row">' +
                        '<div class="col-md-12">' +
                        '<div class="form-group has-custom m-b-10">' +
                        '<label class="control-label">Update Remarks <small class="text-danger" style="font-size:11px;">(Optional)</small></label>' +
                        '<textarea class="form-control" rows="3" name="u_po_remarks[]" id="input07" spellcheck="false">' + remarks[i] + '</textarea>' +
                        '</div>' +
                        '</div>' +
                        '</div>' +
                        '</div>';
                        var row =+ '</div>';
                    $('.uduplicate').append('<div class="row pt-3 pb-1 po_details" style="border: 1px solid #939393;">' + brandField + qtyField + amountField + discountField + remarksField + '</div>');
                }

                OrgChangeBrand('#u_po_org', '.u_po_brand', '#add_paymentorder');

                $('#edit-paymentorder').modal('show');
                $('#ajax-loader').hide();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Payment Order Modal

    //Update Payment Order
    $('#update_paymentorder').on('submit', function (event) {
        event.preventDefault();
        var formData = SerializeForm(this);
        var poId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'po-id') {
                poId = formData[i].value;
                break;
            }
        }
        var url = 'inventory/update-paymentorder/' + poId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });

            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-paymentorder').modal('hide');
                            $('#view-paymentorder').DataTable().ajax.reload(); // Refresh DataTable
                            $('#u_paymentorder')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Payment Order
});
//Payment Order

//Work Order
$(document).ready(function() {
    //Open Work Order Setup
    // $(document).on('click', '.add-workorder', function() {
    $(document).off('click.addWorkorder').on('click.addWorkorder', '.add-workorder', function() {
        $('.duplicate:not(:first)').remove();
        var orgId = $('#wo_org').val();
        if(orgId)
        {
            $('#wo_site').html("<option selected disabled value=''>Select Site</option>");
            fetchOrganizationSites(orgId, '#wo_site', function(data) {
                $.each(data, function(key, value) {
                    $('#wo_site').append('<option value="' + value.id + '">' + value.name + '</option>');
                });
            });

            $('#wo_vendor').html("<option selected disabled value=''>Select Vendor</option>");
            fetchOrganizationVendor(orgId, '#wo_vendor', function(data) {
                $.each(data, function(key, value) {
                    $('#wo_vendor').append('<option value="' + value.id + '">' + value.person_name + '</option>');
                });
            });
        }
        else{
            $('#wo_org').html("<option selected disabled value=''>Select Organization</option>");
            fetchOrganizations('null', '','#wo_org', function(data) {
                $('#wo_org').find('option:contains("Loading...")').remove();
                $.each(data, function(key, value) {
                    $('#wo_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                });
            });
            $('#wo_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', true);
            OrgChangeSites('#wo_org', '#wo_site', '#add_workorder');
            
            $('#wo_vendor').html("<option selected disabled value=''>Select Vendor</option>").prop('disabled', true);
            OrgChangeVendor('#wo_org', '#wo_vendor', '#add_workorder');
        }

        $('#add-workorder').modal('show');
    });
    //Open Work Order Setup

    //Approve Work Order 
    $(document).on('click', '#wo_approve', function(e) {
        e.preventDefault();
        var Id = $(this).data('id');
        var userId = $(this).data('userid');
        var data = {
            id: Id,
            userId: userId,
        };
        Swal.fire({
            text: 'Are You Sure?',
            showCancelButton: true,
            confirmButtonText: 'Yes',
            cancelButtonText: 'No'
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: "/inventory/approve-wo",
                    method: "POST",
                    headers: {
                        'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                    },
                    data: data,
                    success: function(response) {
                        if (response.success) {
                            Swal.fire('Success', 'Work Order Approved Successfully.', 'success');
                            $('#view-workorder').DataTable().ajax.reload();
                        } else {
                            Swal.fire('Error', 'Something went wrong.', 'error');
                            $('#view-workorder').DataTable().ajax.reload();
                        }
                    },
                    error: function(error) {
                        console.log(error);
                    }
                });
            } 
        });
    });
    //Approve Work Order 

    // Add Work Order
    $('#add_workorder').submit(function(e) {
        e.preventDefault();
        var data = SerializeForm(this);
        var resp = true;
        $(data).each(function(i, field){
            if ((field.value == '' || field.value == null) && field.name != 'wo_remarks[]') 
            {
                var FieldName = field.name;
                console.log(FieldName);

                var FieldName = field.name.replace('[]', '');

                var FieldID = '.'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                $( 'textarea[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('textarea[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $( 'textarea[name= "' +FieldName +'"' ).addClass('requirefield');
                resp = false;
            }
        });
        console.log(resp);

        $(".duplicate").each(function() {
            var row = $(this);
            row.find('input, textarea, select').each(function() {
                var elem = $(this);
                var value = elem.val();
                var fieldName = elem.attr('name').replace('[]', '');
                if (elem.attr('name') === 'wo_remarks[]') {
                    return true; 
                }
                var errorField = row.find('.' + fieldName + '_error');
                if (!value || value === "" || (elem.is('select') && value === null)) {
                    errorField.text("This field is required");
                    if (elem.is('select')) {
                        elem.next('.select2-container').find('.select2-selection').addClass('requirefield');
                        elem.on('select2:open', function() {
                            errorField.text("");
                            elem.next('.select2-container').find('.select2-selection').removeClass("requirefield");
                        });
                    }
                    else {
                        elem.addClass('requirefield');
                        elem.focus(function() {
                            errorField.text("");
                            elem.removeClass("requirefield");
                        });
                    }
                    resp = false;
                } else {
                    errorField.text("");
                    if (elem.is('select')) {
                        elem.next('.select2-container').find('.select2-selection').removeClass('requirefield');
                    } else {
                        elem.removeClass('requirefield');
                    }
                }
            });
        });

        if(resp != false)
        {
            $.ajax({
                url: "/inventory/addworkorder",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {
                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-workorder').modal('hide');
                                $('#view-workorder').DataTable().ajax.reload();
                                $('#add_workorder')[0].reset();
                                $('#add_workorder').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_workorder').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('#add_workorder')[0].reset();
                            }
                        });
                    }
                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Work Order

    // Save PDF
    $(document).on('click', '.save-pdf-wo', function() {
        var workOrderId = $(this).data('workorder-id');
        window.location.href = '/work-order/' + workOrderId + '/pdf';
    });
    // Save PDF

    // View Work Order
    var viewWorkOrder =  $('#view-workorder').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/inventory/workorder',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            { data: 'item_details', name: 'item_details' },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "450px"
            },
            {
                targets: 4,
                width: "350px"
            }
        ]
    });
    viewWorkOrder.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    viewWorkOrder.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    viewWorkOrder.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Work Order

    // Update Work Order Status
    $(document).on('click', '.wo_status ', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/inventory/workorder-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
                var status = xhr.status;
                if(status == 200)
                {
                    $('#view-workorder').DataTable().ajax.reload();
                }
            },
            error: function(xhr, status, error) {
                console.log(error);
            }
        });
    });
    // Update Work Order Status

    //Update Work Order Modal
    $(document).on('click', '.edit-workorder', function() {
        var woId = $(this).data('workorder-id');
        var url = '/inventory/updateworkorder/' + woId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('#u_wo_edt').val(formattedDateTime);
                $('#wo-id').val(response.id);
                $('#u_wo_org').html("<option selected value="+ response.orgId +">" + response.orgName + "</option>");
                fetchOrganizations(response.orgId,response.orgName,'#u_wo_org', function(data) {
                    $('#u_wo_org').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        $('#u_wo_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                    });
                });

                $('#u_wo_site').html("<option selected value="+ response.siteId +">" + response.siteName + "</option>");
                fetchSites(response.orgId, '#u_wo_site', function(data) {
                    if (data.length > 0) {
                        $.each(data, function(key, value) {
                            $('#u_wo_site').append('<option value="' + value.id + '">' + value.name + '</option>');
                        });
                    }
                }, function(error) {
                    console.log(error);
                },response.siteId);
                OrgChangeSites('#u_wo_org', '#u_wo_site', '#update_workorder');

                $('#u_wo_vendor').html("<option selected value="+ response.vendorId +">" + response.vendorName + "</option>");
                fetchOrganizationVendor(response.orgId, '#u_wo_vendor', function(data) {
                    if (data.length > 0) {
                        $.each(data, function(key, value) {
                            if (value.id !== response.vendorId) {
                                $('#u_wo_vendor').append('<option value="' + value.id + '">' + value.person_name + '</option>');
                            }
                        });
                    }
                }, function(error) {
                    console.log(error);
                },response.vendorId);
                OrgChangeVendor('#u_wo_org', '#u_wo_vendor', '#update_workorder');


                var particulars = response.Particulars.split(',');
                var amounts = response.Amounts.split(',');
                var discounts = response.Discounts.split(',');
                var remarks = response.remarks.split(',');
                
                $('.uwoduplicate').empty();
                for (var i = 0; i < particulars.length; i++) {
                    var particularsField = '<div class="col-md-6">' +
                    '<div class="form-group row">' +
                    '<div class="col-md-12">' +
                    '<div class="form-group has-custom m-b-10">' +
                    '<label class="control-label">Update Particulars</label>' +
                    '<textarea class="form-control" rows="1" name="u_wo_particulars[]" required  spellcheck="false">' + particulars[i] + '</textarea>' +
                    '</div>' +
                    '</div>' +
                    '</div>' +
                    '</div>';
        
                    var amountField = '<div class="col-md-6">' +
                        '<div class="form-group row">' +
                        '<div class="col-md-12">' +
                        '<div class="form-group has-custom m-b-5">' +
                        '<label class="control-label">Update Amount</label>' +
                        '<input type="number" class="form-control input-sm amount" required name="u_wo_amount[]" value="' + amounts[i] + '">' +
                        '<small class="amount_conversion"></small>' +
                        '</div>' +
                        '</div>' +
                        '</div>' +
                        '</div>';
        
                    var discountField = '<div class="col-md-6">' +
                        '<div class="form-group row">' +
                        '<div class="col-md-12">' +
                        '<div class="form-group has-custom m-b-5">' +
                        '<label class="control-label">Update Discount</label>' +
                        '<input type="number" class="form-control input-sm" required name="u_wo_discount[]" id="input0575" value="' + discounts[i] + '">' +
                        '</div>' +
                        '</div>' +
                        '</div>' +
                        '</div>';

                    var remarksField = '<div class="col-md-6">' +
                        '<div class="form-group row">' +
                        '<div class="col-md-12">' +
                        '<div class="form-group has-custom m-b-10">' +
                        '<label class="control-label">Update Remarks <small class="text-danger" style="font-size:11px;">(Optional)</small></label>' +
                        '<textarea class="form-control" rows="1" name="u_wo_remarks[]" id="input07" spellcheck="false">' + remarks[i] + '</textarea>' +
                        '</div>' +
                        '</div>' +
                        '</div>' +
                        '</div>';
                        var row =+ '</div>';
                    $('.uwoduplicate').append('<div class="row pt-3 pb-1 wo_details" style="border: 1px solid #939393;">' + particularsField + amountField + discountField + remarksField + '</div>');
                }
                $('#edit-workorder').modal('show');
                $('#ajax-loader').hide();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Work Order Modal

    //Update Work Order
    $('#update_workorder').on('submit', function (event) {
        event.preventDefault();
        var formData = SerializeForm(this);
        var woId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'wo-id') {
                woId = formData[i].value;
                break;
            }
        }
        var url = 'inventory/update-workorder/' + woId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });

            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-workorder').modal('hide');
                            $('#view-workorder').DataTable().ajax.reload(); // Refresh DataTable
                            $('#u_workorder')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Work Order
});
//Work Order

$(document).ready(function() {
    //Open Inventory Management Modal
    $(document).on('click', '.add-manageinventory', function() {
        var orgId = $('#im_org').val();
        if(orgId)
        {
            $('#im_site').html("<option selected disabled value=''>Select Site</option>");
            fetchOrganizationSites(orgId, '#im_site', function(data) {
                $.each(data, function(key, value) {
                    $('#im_site').append('<option value="' + value.id + '">' + value.name + '</option>');
                });
            });
            $('#im_brand').html("<option selected disabled value=''>Select Item Brand</option>").prop('disabled',false);
            fetchOrganizationBrand(orgId,'#im_brand', function(data) {
                $.each(data, function(key, value) {
                    $('#im_brand').append('<option value="' + value.id + '">' + value.name + '</option>');
                });
            });

        }
        else{
            $('#im_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled',true);
            OrgChangeSites('#im_org', '#im_site', '#add_manageinventory');

            $('#im_brand').html("<option selected disabled value=''>Select Item Brand</option>").prop('disabled',true);
            OrgChangeBrand('#im_org', '#im_brand', '#add_manageinventory');
        }

        $('#im_transactiontype').html("<option selected disabled value=''>Select Transaction Type</option>");
        fetchTransactionTypes('null', '#im_transactiontype', false, function(data) {
            if (data && data.length > 0) {
                $.each(data, function(key, value) {
                    $('#im_transactiontype').append('<option data-type="' + value.transaction_type + '" value="' + value.id + '">' + value.name + '</option>');
                });
            } else {
                Swal.fire({
                    text: 'Transaction Types are not currently available.',
                    icon: 'error',
                    confirmButtonText: 'OK'
                }).then((result) => {
                    if (result.isConfirmed) {
                        $('#add-manageinventory').modal('hide');
                    }
                });
            }
        });
        
        $('#inv-management-section').hide();
        $(document).off('change', '#im_transactiontype').on('change', '#im_transactiontype', function() {
            if(!orgId)
            {
                $('#im_org').val($(this).find('option:first').val()).trigger('change');
                $('#im_site').val($(this).find('option:first').val()).trigger('change').prop('disabled',true);
                $('#im_destination').val($(this).find('option:first').val()).trigger('change').prop('disabled',true);
            }
            $('#im_batch_no').val('');
            $('#expiry-date').val('');
            $('#im_rate').val('');
            $('#im_qty').val('');
            $('#itemQty').show();
            $('#im_qty').prop('disabled',false);
            var TransactionTypeID = $(this).val();
            var dataType = $(this).find('option:selected').data('type'); 
            $('#inv-management-section').show();
            $('#itemexpiry,#itemrate').hide();
            var referenceDocument = '';
            var From = '';
            var To = '';
            if(dataType == 'opening balance')
            {
                $('#itemexpiry,#itemrate').show();
                $('#im_rate,#expiry-date').prop('disabled',false);
                $('#reference_document_section, #from_section, #to_section').hide();
                var referenceDocument = 'null';
                var From = 'null';
                var To = 'null';
                $('#selectoption').hide();
                $('#selectoption select').removeAttr('name id');
                $('#opentext').show();
                $('#opentext input').attr({
                    'name': 'im_reference_document',
                    'id': 'im_reference_document'
                });
                $('#im_reference_document').val('').prop('disabled',false);
                $('#select_batch select').select2('destroy');
                $('#select_batch').find('label, select').remove();
                $('#enter_batch').show();
                $('#enter_batch').html('<label for="im_reference_document">Enter Batch #</label><input type="text" placeholder="Enter Batch #" class="form-control input-sm">');
                $('#enter_batch input').attr({
                    'name': 'im_batch_no',
                    'id': 'im_batch_no'
                });

            }
            else if(dataType == 'addition')
            {
                $('#itemexpiry,#itemrate').show();
                $('#im_rate,#expiry-date').prop('disabled',false);
                $('#reference_document_section, #from_section, #to_section').show();
                var referenceDocument = 'Open Text';
                if(!orgId)
                {
                    $('#im_origin').html("<option selected disabled value=''>Select Origin</option>").prop('disabled',true);
                    OrgChangeVendor('#im_org', '#im_origin', '#add_manageinventory');
                    $('#im_destination').html("<option selected disabled value=''>Select Destination</option>").prop('disabled',true);
                    OrgChangeSites('#im_org', '#im_destination', '#add_manageinventory');
                }
                else{
                    $('#im_destination').html("<option selected disabled value=''>Select Site</option>");
                    fetchOrganizationSites(orgId, '#im_destination', function(data) {
                        $.each(data, function(key, value) {
                            $('#im_destination').append('<option value="' + value.id + '">' + value.name + '</option>');
                        });
                    });
                    $('#im_origin').html("<option selected disabled value=''>Select Origin</option>").prop('disabled',false);
                    fetchOrganizationVendor(orgId, '#im_origin', function(data) {
                        $.each(data, function(key, value) {
                            $('#im_origin').append('<option value="' + value.id + '">' + value.person_name + '</option>');
                        });
                    });
                }
                $('#selectoption').hide();
                $('#selectoption select').removeAttr('name id');
                $('#opentext').show();
                $('#opentext input').attr({
                    'name': 'im_reference_document',
                    'id': 'im_reference_document'
                });
                $('#im_reference_document').val('').prop('disabled',false);
                $('#select_batch select').select2('destroy');
                $('#select_batch').find('label, select').remove();
                $('#enter_batch').show();
                $('#enter_batch').html('<label for="im_reference_document">Enter Batch #</label><input type="text" placeholder="Enter Batch #" class="form-control input-sm">');
                $('#enter_batch input').attr({
                    'name': 'im_batch_no',
                    'id': 'im_batch_no'
                });
            }
            else if(dataType == 'reduction')
            {
                $('#reference_document_section, #from_section, #to_section').show();
                $("#im_batch_no").remove();
                if(!orgId)
                {
                    $('#im_origin').html("<option selected disabled value=''>Select Origin</option>").prop('disabled',true);
                    OrgChangeSites('#im_org', '#im_origin', '#add_manageinventory');
                    $('#im_destination').html("<option selected disabled value=''>Select Destination</option>").prop('disabled',true);
                    OrgChangeVendor('#im_org', '#im_destination', '#add_manageinventory');
                }
                else
                {
                    $('#im_origin').html("<option selected disabled value=''>Select Site</option>");
                    fetchOrganizationSites(orgId, '#im_origin', function(data) {
                        $.each(data, function(key, value) {
                            $('#im_origin').append('<option value="' + value.id + '">' + value.name + '</option>');
                        });
                    });
                    $('#im_destination').html("<option selected disabled value=''>Select Origin</option>").prop('disabled',false);
                    fetchOrganizationVendor(orgId, '#im_destination', function(data) {
                        $.each(data, function(key, value) {
                            $('#im_destination').append('<option value="' + value.id + '">' + value.person_name + '</option>');
                        });
                    });
                }
                $('#opentext input').removeAttr('name id');
                $('#opentext').hide();
                $('#selectoption').show();
                $('#selectoption select').attr({
                    'id': 'im_reference_document',
                    'name': 'im_reference_document'
                }).select2();
                $('#im_reference_document').html("<option selected disabled value=''>Select Previous Inventory Transaction</option>").prop('disabled',true);
                BrandChangeInventory('#im_brand', '#im_reference_document', '#add_manageinventory');

                $('#select_batch').show();
                $('#select_batch').html('<label class="control-label">Select Batch  #</label> <select class="form-control selecter p-0" style="color:#222d32"></select>');
                $('#enter_batch').hide();
                $('#enter_batch').find('label, input').remove();
                $('#select_batch select').attr({
                    'id': 'im_batch_no',
                    'name': 'im_batch_no'
                }).select2();
                $('#im_batch_no').html("<option selected disabled value=''>Select Batch #</option>").prop('disabled',true);
                BrandChangeBatch('#im_brand', '#im_batch_no', '#add_manageinventory');
                BatchChangeExpiryRate('add','#im_batch_no', '#itemexpiry', '#itemrate', 'reduction');
            }
            else if(dataType == 'transfer')
            {
                $('#reference_document_section').hide();
                $('#from_section, #to_section').show();
                $('#selectoption').hide();
                $('#selectoption select').removeAttr('name id');
                $('#opentext').show();
                $('#opentext input').attr({
                    'name': 'im_reference_document',
                    'id': 'im_reference_document'
                });
                $('#im_reference_document').val('').prop('disabled',false);

                $('#select_batch').show();
                $('#select_batch').html('<label class="control-label">Select Batch  #</label> <select class="form-control selecter p-0" style="color:#222d32"></select>');
                $('#enter_batch').hide();
                $('#enter_batch').find('label, input').remove();
                $('#select_batch select').attr({
                    'id': 'im_batch_no',
                    'name': 'im_batch_no'
                }).select2();
                $('#im_batch_no').html("<option selected disabled value=''>Select Batch #</option>").prop('disabled',true);
                BrandChangeBatch('#im_brand', '#im_batch_no', '#add_manageinventory');
                BatchChangeExpiryRate('add','#im_batch_no', '#itemexpiry', '#itemrate', 'transfer');
                if(!orgId)
                {
                    $('#im_origin').html("<option selected disabled value=''>Select Origin</option>").prop('disabled',true);
                    OrgChangeSites('#im_org', '#im_origin', '#add_manageinventory');
                    $('#im_destination').html("<option selected disabled value=''>Select Destination</option>").prop('disabled',true);
                    OrgChangeSites('#im_org', '#im_destination', '#add_manageinventory');
                }
                else
                {
                    $('#im_origin').html("<option selected disabled value=''>Select Site</option>");
                    fetchOrganizationSites(orgId, '#im_origin', function(data) {
                        $.each(data, function(key, value) {
                            $('#im_origin').append('<option value="' + value.id + '">' + value.name + '</option>');
                        });
                    });
                    $('#im_destination').html("<option selected disabled value=''>Select Site</option>");
                    fetchOrganizationSites(orgId, '#im_destination', function(data) {
                        $.each(data, function(key, value) {
                            $('#im_destination').append('<option value="' + value.id + '">' + value.name + '</option>');
                        });
                    });
                }
                

            }
            else if(dataType == 'general consumption')
            {
                $('#to_section').hide();
                $('#reference_document_section, #from_section').show();
                if(!orgId)
                {
                    $('#im_origin').html("<option selected disabled value=''>Select Origin</option>").prop('disabled',true);
                    OrgChangeSites('#im_org', '#im_origin', '#add_manageinventory');
                }
                else
                {
                    $('#im_origin').html("<option selected disabled value=''>Select Site</option>");
                    fetchOrganizationSites(orgId, '#im_origin', function(data) {
                        $.each(data, function(key, value) {
                            $('#im_origin').append('<option value="' + value.id + '">' + value.name + '</option>');
                        });
                    });
                }
                $('#opentext').hide();
                $('#opentext input').removeAttr('name id');
                $('#selectoption').show();
                $('#selectoption select').attr({
                    'id': 'im_reference_document',
                    'name': 'im_reference_document'
                }).select2();
                $('#im_reference_document').html("<option selected disabled value=''>Select Requisition</option>").prop('disabled',true);
                SiteChangeRequisition('#im_site', '#im_transactiontype', '#im_reference_document', '#add_manageinventory');
                
                $('#select_batch').show();
                $('#select_batch').html('<label class="control-label">Select Batch  #</label> <select class="form-control selecter p-0" style="color:#222d32"></select>');
                $('#enter_batch').hide();
                $('#enter_batch').find('label, input').remove();
                $('#select_batch select').attr({
                    'id': 'im_batch_no',
                    'name': 'im_batch_no'
                }).select2();
                $('#im_batch_no').html("<option selected disabled value=''>Select Batch #</option>").prop('disabled',true);
                BrandChangeBatch('#im_brand', '#im_batch_no', '#add_manageinventory');
                BatchChangeExpiryRate('add','#im_batch_no', '#itemexpiry', '#itemrate', 'general_consumption');
            }
            else if(dataType == 'patient consumption')
            {
                $('#reference_document_section, #from_section, #to_section').show();
            
                if(!orgId)
                {
                    $('#im_origin').html("<option selected disabled value=''>Select Origin</option>").prop('disabled',true);
                    OrgChangeSites('#im_org', '#im_origin', '#add_manageinventory');
                }
                else
                {
                    $('#im_origin').html("<option selected disabled value=''>Select Site</option>");
                    fetchOrganizationSites(orgId, '#im_origin', function(data) {
                        $.each(data, function(key, value) {
                            $('#im_origin').append('<option value="' + value.id + '">' + value.name + '</option>');
                        });
                    });
                }
                $('#im_destination').html("<option selected disabled value=''>Select MR#</option>").prop('disabled',true);
                SiteChangeMRCode('#im_site', '#im_destination', '#add_manageinventory', null);
                $('#opentext').hide();
                $('#opentext input').removeAttr('name id');
                $('#selectoption').show();
                $('#selectoption select').attr({
                    'id': 'im_reference_document',
                    'name': 'im_reference_document'
                }).select2();
                $('#im_reference_document').html("<option selected disabled value=''>Select Requisition</option>").prop('disabled',true);
                SiteChangeRequisition('#im_site', '#im_transactiontype', '#im_reference_document', '#add_manageinventory');
                
                $('#select_batch').show();
                $('#select_batch').html('<label class="control-label">Select Batch  #</label> <select class="form-control selecter p-0" style="color:#222d32"></select>');
                $('#enter_batch').hide();
                $('#enter_batch').find('label, input').remove();
                $('#select_batch select').attr({
                    'id': 'im_batch_no',
                    'name': 'im_batch_no'
                }).select2();
                $('#im_batch_no').html("<option selected disabled value=''>Select Batch #</option>").prop('disabled',true);
                BrandChangeBatch('#im_brand', '#im_batch_no', '#add_manageinventory');
                BatchChangeExpiryRate('add','#im_batch_no', '#itemexpiry', '#itemrate', 'patient_consumption');
            }
            else if(dataType == 'reversal')
            {
                $('#opentext').hide();
                $('#opentext input').removeAttr('name id');
                $('#itemQty').hide();
                $('#selectoption').show();
                $('#selectoption select').attr({
                    'id': 'im_reference_document',
                    'name': 'im_reference_document'
                }).select2();
                $('#im_reference_document').html("<option selected disabled value=''>Select Previous Inventory Transaction</option>").prop('disabled',true);
                BrandChangeInventory('#im_brand', '#im_reference_document', '#add_manageinventory');

                $('#select_batch').show();
                $('#select_batch').html('<label class="control-label">Select Batch  #</label> <select class="form-control selecter p-0" style="color:#222d32"></select>');
                $('#enter_batch').hide();
                $('#enter_batch').find('label, input').remove();
                $('#select_batch select').attr({
                    'id': 'im_batch_no',
                    'name': 'im_batch_no'
                }).select2();
                $('#im_batch_no').html("<option selected disabled value=''>Select Batch #</option>").prop('disabled',true);
                BrandChangeBatch('#im_brand', '#im_batch_no', '#add_manageinventory');
                BatchChangeExpiryRate('add','#im_batch_no', '#itemexpiry', '#itemrate', 'reversal');

                $('#reference_document_section').show();
                $('#from_section, #to_section').hide();
            }

            if(!orgId)
            {
                $('#im_org').html("<option selected disabled value=''>Select Organization</option>");
                fetchTransactionTypeOrganizations(TransactionTypeID, '#im_org', function(data) {
                    $('#im_org').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        $('#im_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                    });
                });
            }
            
        });
        $('#add-manageinventory').modal('show');
    });
    //Open Inventory Management Modal

    //Add Inventory Management
    $('#add_manageinventory').submit(function(e) {
        e.preventDefault();
        var data = SerializeForm(this);
        var transactionTypevalue = data.find(function(item) {
            return item.name === 'im_transactiontype';
        });
        var logic = false; 
        if (transactionTypevalue) {
            var excludedFields = [];
            CheckTransactionTypes(transactionTypevalue.value, '#im_transactiontype')
                .then(function (transactionTypedata) {
                    $.each(transactionTypedata, function (key, value) {
                        if (value.transaction_type == 'opening balance') {
                            logic = true;
                            excludedFields = ['im_reference_document', 'im_origin', 'im_destination'];
                        } else if (value.transaction_type == 'addition') {
                            logic = false;
                            excludedFields = [];
                        } else if (value.transaction_type == 'general consumption') {
                            logic = true;
                            excludedFields = ['im_reference_document', 'im_destination']; 
                        } else if (value.transaction_type == 'reversal') {
                            logic = true;
                            excludedFields = ['im_origin', 'im_destination']; 
                        }
                        // else if (value.transaction_type == 'reduction') {
                        //     logic = true;
                        //     excludedFields = ['im_expiry', 'im_rate']; 
                        // } 
                        else if (value.transaction_type == 'patient consumption') {
                            logic = false;
                            excludedFields = [];
                        }
                        else if (value.transaction_type == 'transfer') {
                            logic = true;
                            excludedFields = ['im_reference_document']; 
                        }
                    });
                    var resp = true;
                    $(data).each(function(i, field){
                        if ((field.value === '' || field.value === null) && (typeof field.name !== 'undefined') && (!logic || !excludedFields.includes(field.name)))
                        {
                            var FieldName = field.name;
                            console.log(FieldName);
                            var FieldID = '#'+FieldName + "_error";
                            $(FieldID).text("This field is required");
                            $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                            $( 'input[name= "' +FieldName +'"' ).focus(function() {
                                $(FieldID).text("");
                                $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                            })
                            $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                            $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                                $(FieldID).text("");
                                $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                            });
                            $( 'textarea[name= "' +FieldName +'"' ).focus(function() {
                                $(FieldID).text("");
                                $('textarea[name= "' +FieldName +'"' ).removeClass("requirefield");
                            })
                            $( 'textarea[name= "' +FieldName +'"' ).addClass('requirefield');
                            resp = false;
                        }
                    });
                    if(resp != false)
                    {
                        $.ajax({
                            url: "/inventory/addinvmanagement",
                            method: "POST",
                            headers: {
                                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                            },
                            data: data,
                            beforeSend: function() {
                                Swal.fire({
                                    title: "Processing",
                                    allowOutsideClick: false,
                                    willOpen: () => {
                                        Swal.showLoading();
                                    },
                                    showConfirmButton: false
                                });
                            },
                            success: function(response) {
                                for (var fieldName in response) {
                                    var fieldErrors = response[fieldName];
                                }
                                if (fieldName == 'error')
                                {
                                    Swal.fire({
                                        text: fieldErrors,
                                        icon: fieldName,
                                        confirmButtonText: 'OK'
                                    })
                                }
                                else if (fieldName == 'success')
                                {
                                    Swal.fire({
                                        text: fieldErrors,
                                        icon: fieldName,
                                        allowOutsideClick: false,
                                        confirmButtonText: 'OK'
                                    }).then((result) => {
                                        if (result.isConfirmed) {
                                            $('#add-manageinventory').modal('hide');
                                            location.reload();
                                        }
                                    });
                                }
                                else if (fieldName == 'info')
                                {
                                    Swal.fire({
                                        text: fieldErrors,
                                        icon: fieldName,
                                        confirmButtonText: 'OK'
                                    }).then((result) => {
                                        if (result.isConfirmed) {
                                            $('#add-manageinventory').modal('hide');
                                        }
                                    });
                                }
                            },
                            error: function(error) {
                                if (error.responseJSON && error.responseJSON.errors) {
                                    $('.text-danger').show();
                                    var errors = error.responseJSON.errors;
                                    for (var fieldName in errors) {
                                        var fieldErrors = errors[fieldName];
                                        for (var i = 0; i < fieldErrors.length; i++) {
                                            fieldName = '#'+fieldName + '_error';
                                            $(fieldName).text(fieldErrors[i]);
                                        }
                                    }
                                    Swal.close();
                                }
                            }
                        });
                    }
                })
                .fail(function (error) {
                    console.error(error);
                });
        }
    });
    //Add Inventory Management

    // View Inventory Management
    var viewInventoryManagement =  $('#view-manageinventory').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/inventory/invmanagement',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            { data: 'brand_details', name: 'brand_details' },
            { data: 'transaction_details', name: 'transaction_details' },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "300px"
            },
              {
                targets: 2,
                width: "300px"
            },
              {
                targets: 3,
                width: "350px"
            },
            {
                targets: 5,
                width: "350px"
            }
        ]
    });

    viewInventoryManagement.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    viewInventoryManagement.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    viewInventoryManagement.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Inventory Management

    //Update Inventory Management Modal
    $(document).on('click', '.edit-manageinventory', function() {
        var inventoryId = $(this).data('manageinventory-id');
        var url = '/inventory/updateinvmanagement/' + inventoryId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                $('#u_im_brand').empty();
                $('#u_im_site').empty();
                $('#ajax-loader').hide();
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('.uedt').each(function() {
                    var edtElement = $(this);
                    edtElement.val(formattedDateTime);
                });
                $('.u_im-id').val(response.id);
                var transactionType =  response.TransactionType;

                $('#u_im_qty').prop('disabled',false);

                var orgId = $('#u_im_org').val();
                if(!orgId)
                {
                    $('#u_im_org').html("<option selected value="+ response.orgId +">" + response.orgName + "</option>");
                    fetchOrganizations('null', '','#u_im_org', function(data) {
                        $('#u_im_org').find('option:contains("Loading...")').remove();
                        $.each(data, function(key, value) {
                            if(value.id != response.orgId)
                            {
                                $('#u_im_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                            }
                        });
                    });
                    OrgChangeSites('#u_im_org', '#u_im_site', '#add_manageinventory');
                    OrgChangeBrand('#u_im_org', '#u_im_brand', '#add_manageinventory');

                }
                $('#u_im_site').html("<option selected value='"+response.siteId+"'>" + response.siteName + "</option>");
                fetchSites(response.orgId, '#u_im_site', function(data) {
                    if (data.length > 0) {
                        $.each(data, function(key, value) {
                            $('#u_im_site').append('<option value="' + value.id + '">' + value.name + '</option>');
                        });
                    }
                    else {
                        Swal.fire({
                            text: 'Sites are not available for selected Organization',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#edit-materialconsumption').modal('hide');
                            }
                        });
                    }
                }, function(error) {
                    console.log(error);
                },response.siteId);

                $('#u_im_brand').html("<option selected value='"+response.brandId+"'>" + response.brandName + "</option>");
                fetchOrganizationBrand(response.orgId,'#u_im_brand', function(data) {
                    $('#u_im_brand').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        if(value.id != response.brandId)
                        {
                            $('#u_im_brand').append('<option value="' + value.id + '">' + value.name + '</option>');
                        }
                    });
                });
                $('#u_im_transactiontype').html("<option selected  data-type="+ transactionType +" value="+response.transactionTypeId+">"+response.TransactionTypeName+"</option>").prop('disabled',true);
                
                if(transactionType == 'opening balance')
                {
                    $('#u_reference_document_section, #u_from_section, #u_to_section').hide();
                    var referenceDocument = 'null';
                    var From = 'null';
                    var To = 'null';
                    $('#u_selectoption').hide();
                    $('#u_selectoption select').removeAttr('name id');
                    $('#u_opentext').show();
                    $('#u_opentext input').attr({
                        'name': 'u_im_reference_document',
                        'id': 'u_im_reference_document'
                    });
                    $('#u_im_reference_document').val(response.document_no);

                    $('#u_select_batch select').select2('destroy');
                    $('#u_select_batch').find('label, select').remove();
                    $('#u_enter_batch').show();
                    $('#u_enter_batch').html('<label for="im_reference_document">Update Batch #</label><input type="text" class="form-control input-sm">');
                    $('#u_enter_batch input').attr({
                        'name': 'u_im_batch_no',
                        'id': 'u_im_batch_no'
                    });
                    $('#u_im_batch_no').val(response.batchNo);

                }
                else if(transactionType == 'addition')
                {
                    $('#u_reference_document_section, #u_from_section, #u_to_section').show();
                    var referenceDocument = 'Open Text';
                    if(!orgId)
                    {
                        OrgChangeVendor('#u_im_org', '#u_im_origin', '#update_manageinventory');
                        OrgChangeSites('#u_im_org', '#u_im_destination', '#update_manageinventory');
                    }
                    $('#u_im_origin').attr({'required': 'required'});
                    $('#u_im_origin').html("<option selected value="+response.OriginId+">"+response.OriginName+"</option>").prop('disabled', false);
                    fetchOrganizationVendor(response.orgId, '#u_im_origin', function(data) {
                        $.each(data, function(key, value) {
                            if(value.id != response.OriginId)
                            {
                                $('#u_im_origin').append('<option value="' + value.id + '">' + value.person_name + '</option>');
                            }
                        });
                    });

                    $('#u_im_destination').attr({'required': 'required'});
                    $('#u_im_destination').html("<option selected value="+response.DestinationId+">"+response.DestinationName+"</option>").prop('disabled', false);
                    fetchOrganizationSites(response.orgId, '#u_im_destination', function(data) {
                        $.each(data, function(key, value) {
                            if(value.id != response.DestinationId)
                            {
                                $('#u_im_destination').append('<option value="' + value.id + '">' + value.name + '</option>');
                            }
                        });
                    });
                    
                    $('#u_selectoption').hide();
                    $('#u_selectoption select').removeAttr('name id');
                    $('#u_opentext').show();
                    $('#u_opentext input').attr({
                        'name': 'u_im_reference_document',
                        'id': 'u_im_reference_document',
                        'required': 'required'
                    });
                    $('#u_im_reference_document').val('');
                    $('#u_im_reference_document').val(response.document);

                    $('#u_select_batch select').select2('destroy');
                    $('#u_select_batch').find('label, select').remove();
                    $('#u_enter_batch').show();
                    $('#u_enter_batch').html('<label for="im_reference_document">Update Batch #</label><input type="text" class="form-control input-sm">');
                    $('#u_enter_batch input').attr({
                        'name': 'u_im_batch_no',
                        'id': 'u_im_batch_no'
                    });
                    $('#u_im_batch_no').val(response.batchNo);

                }
                else if(transactionType == 'reduction')
                {
                    $('#u_opentext').hide();
                    $('#u_im_expirydate,#u_im_rate').prop('disabled',true);
                    $('#u_opentext input').removeAttr('name id');
                    $('#u_selectoption').show();
                    $('#u_selectoption select').attr({
                        'id': 'u_im_reference_document',
                        'name': 'u_im_reference_document',
                        'required': 'required'
                    });
                    $('#u_im_reference_document').empty();
                    $('#u_im_reference_document').html("<option selected value="+response.documentId+">"+response.document+"</option>").prop('disabled', false);
                    if(!orgId)
                    {
                        OrgChangeSites('#u_im_org', '#u_im_origin', '#update_manageinventory');
                        OrgChangeVendor('#u_im_org', '#u_im_destination', '#update_manageinventory');

                    }
                    
                    fetchBrandInventory(response.brandId, '#u_im_reference_document', function(data) {
                        $.each(data, function(key, value) {
                            if(value.id != response.documentId)
                            {
                                $('#u_im_reference_document').append('<option value="' + value.id + '">' + value.code+'-00000'+value.id + '</option>');
                            }
                        });
                    });
                    BrandChangeInventory('#u_im_brand', '#u_im_reference_document', '#update_manageinventory');

                    $('#u_im_origin').attr({'required': 'required'});
                    $('#u_im_origin').html("<option selected value="+response.OriginId+">"+response.OriginName+"</option>").prop('disabled', false);
                    fetchOrganizationSites(response.orgId, '#u_im_origin', function(data) {
                        $.each(data, function(key, value) {
                            if(value.id != response.DestinationId)
                            {
                                $('#u_im_origin').append('<option value="' + value.id + '">' + value.name + '</option>');
                            }
                        });
                    });


                    $('#u_im_destination').attr({'required': 'required'});
                    $('#u_im_destination').html("<option selected value="+response.DestinationId+">"+response.DestinationName+"</option>").prop('disabled', false);
                    fetchOrganizationVendor(response.orgId, '#u_im_destination', function(data) {
                        $.each(data, function(key, value) {
                            if(value.id != response.DestinationId)
                            {
                                $('#u_im_destination').append('<option value="' + value.id + '">' + value.person_name + '</option>');
                            }
                        });
                    });
                    $('#u_reference_document_section, #u_from_section, #u_to_section').show();

                    $('#u_select_batch').show();
                    $('#u_select_batch').html('<label class="control-label">Update Batch  #</label> <select class="form-control selecter p-0" style="color:#222d32"></select>');
                    $('#u_enter_batch').hide();
                    $('#u_enter_batch').find('label, input').remove();
                    $('#u_select_batch select').attr({
                        'id': 'u_im_batch_no',
                        'name': 'u_im_batch_no'
                    }).select2();
                    $('#u_im_batch_no').html("<option selected value='"+response.id+"'>" + response.batchNo + "</option>");
                    fetchBrandBatch(response.brandId,'#u_im_batch_no', function(data) {
                        $('#u_im_batch_no').find('option:contains("Loading...")').remove();
                        $.each(data, function(key, value) {
                            if(value.id != response.id)
                            {
                                $('#u_im_batch_no').append('<option data-id= "' + value.id + '" value="' + value.batch_no + '">' + value.batch_no + '</option>');
                            }
                        });
                    });
                    BrandChangeBatch('#u_im_brand', '#u_im_batch_no', '#add_manageinventory');
                    BatchChangeExpiryRate('update','#u_im_batch_no', '#u_itemexpiry', '#u_itemrate', 'reduction');
                }
                else if(transactionType == 'transfer')
                {
                    $('#u_reference_document_section').hide();
                    $('#u_im_expirydate,#u_im_rate').prop('disabled',true);
                    $('#u_from_section, #u_to_section').show();
                    $('#u_selectoption').hide();
                    $('#u_selectoption select').removeAttr('name id');
                    $('#u_opentext').show();
                    $('#u_opentext input').attr({
                        'name': 'u_im_reference_document',
                        'id': 'u_im_reference_document',
                        'required': 'required'
                    });

                    if(!orgId)
                    {
                        OrgChangeSites('#u_im_org', '#u_im_origin', '#update_manageinventory');
                        OrgChangeSites('#u_im_org', '#u_im_destination', '#update_manageinventory');
                    }

                    $('#u_im_origin').attr({'required': 'required'});
                    $('#u_im_origin').html("<option selected value="+response.OriginId+">"+response.OriginName+"</option>").prop('disabled', false);
                    fetchOrganizationSites(response.orgId, '#u_im_origin', function(data) {
                        $.each(data, function(key, value) {
                            if(value.id != response.OriginId)
                            {
                                $('#u_im_origin').append('<option value="' + value.id + '">' + value.name + '</option>');
                            }
                        });
                    });

                    $('#u_im_destination').attr({'required': 'required'});
                    $('#u_im_destination').html("<option selected value="+response.DestinationId+">"+response.DestinationName+"</option>").prop('disabled', false);
                    fetchOrganizationSites(response.orgId, '#u_im_destination', function(data) {
                        $.each(data, function(key, value) {
                            if(value.id != response.DestinationId)
                            {
                                $('#u_im_destination').append('<option value="' + value.id + '">' + value.name + '</option>');
                            }
                        });
                    });

                    $('#u_select_batch').show();
                    $('#u_select_batch').html('<label class="control-label">Update Batch  #</label> <select class="form-control selecter p-0" style="color:#222d32"></select>');
                    $('#u_enter_batch').hide();
                    $('#u_enter_batch').find('label, input').remove();
                    $('#u_select_batch select').attr({
                        'id': 'u_im_batch_no',
                        'name': 'u_im_batch_no'
                    }).select2();
                    $('#u_im_batch_no').html("<option selected value='"+response.id+"'>" + response.batchNo + "</option>");
                    fetchBrandBatch(response.brandId,'#u_im_batch_no', function(data) {
                        $('#u_im_batch_no').find('option:contains("Loading...")').remove();
                        $.each(data, function(key, value) {
                            if(value.id != response.id)
                            {
                                $('#u_im_batch_no').append('<option data-id= "' + value.id + '" value="' + value.batch_no + '">' + value.batch_no + '</option>');
                            }
                        });
                    });
                    BrandChangeBatch('#u_im_brand', '#u_im_batch_no', '#add_manageinventory');
                    BatchChangeExpiryRate('update','#u_im_batch_no', '#u_itemexpiry', '#u_itemrate', 'transfer');
                }
                else if(transactionType == 'general consumption')
                {
                    $('#u_im_expirydate,#u_im_rate').prop('disabled',true);
                    $('#u_to_section').hide();
                    $('#u_reference_document_section, #u_from_section').show();

                    $('#u_im_origin').attr({'required': 'required'});
                    $('#u_im_origin').html("<option selected value="+response.OriginId+">"+response.OriginName+"</option>").prop('disabled', false);
                    fetchOrganizationSites(response.orgId, '#u_im_origin', function(data) {
                        $.each(data, function(key, value) {
                            if(value.id != response.DestinationId)
                            {
                                $('#u_im_origin').append('<option value="' + value.id + '">' + value.name + '</option>');
                            }
                        });
                    });
                    if(!orgId)
                    {
                        OrgChangeSites('#u_im_org', '#u_im_origin', '#update_manageinventory');
                    }

                    $('#u_opentext').hide();
                    $('#u_opentext input').removeAttr('name id');
                    $('#u_selectoption').show();
                    $('#u_selectoption select').attr({
                        'id': 'u_im_reference_document',
                        'name': 'u_im_reference_document',
                        'required': 'required'
                    });
                    $('#u_im_reference_document').html("<option selected value="+response.documentId+">"+response.document+"</option>").prop('disabled', false);
                    fetchSiteRequisition(response.siteId, response.transactionTypeId, '#u_im_reference_document', function(data) {
                        $.each(data, function(key, value) {
                            if(value.id != response.documentId)
                            {
                                $('#u_im_reference_document').append('<option value="' + value.id + '">' + value.remarks + '</option>');
                            }
                        });
                    });
                    SiteChangeRequisition('#u_im_site', '#u_im_transactiontype', '#u_im_reference_document', '#update_manageinventory');
                    
                    $('#u_select_batch').show();
                    $('#u_select_batch').html('<label class="control-label">Update Batch  #</label> <select class="form-control selecter p-0" style="color:#222d32"></select>');
                    $('#u_enter_batch').hide();
                    $('#u_enter_batch').find('label, input').remove();
                    $('#u_select_batch select').attr({
                        'id': 'u_im_batch_no',
                        'name': 'u_im_batch_no'
                    }).select2();
                    $('#u_im_batch_no').html("<option selected value='"+response.id+"'>" + response.batchNo + "</option>");
                    fetchBrandBatch(response.brandId,'#u_im_batch_no', function(data) {
                        $('#u_im_batch_no').find('option:contains("Loading...")').remove();
                        $.each(data, function(key, value) {
                            if(value.id != response.id)
                            {
                                $('#u_im_batch_no').append('<option data-id= "' + value.id + '" value="' + value.batch_no + '">' + value.batch_no + '</option>');
                            }
                        });
                    });
                    BrandChangeBatch('#u_im_brand', '#u_im_batch_no', '#add_manageinventory');
                    BatchChangeExpiryRate('update','#u_im_batch_no', '#u_itemexpiry', '#u_itemrate', 'general_consumption');
                }
                else if(transactionType == 'patient consumption')
                {
                    $('#u_im_expirydate,#u_im_rate').prop('disabled',true);
                    $('#u_reference_document_section, #u_from_section, #u_to_section').show();

                    $('#u_im_origin').attr({'required': 'required'});
                    $('#u_im_origin').html("<option selected value="+response.OriginId+">"+response.OriginName+"</option>").prop('disabled', false);
                    fetchOrganizationVendor(response.orgId, '#u_im_origin', function(data) {
                        $.each(data, function(key, value) {
                            if(value.id != response.OriginId)
                            {
                                $('#u_im_origin').append('<option value="' + value.id + '">' + value.person_name + '</option>');
                            }
                        });
                    });
                    if(!orgId)
                    {
                        OrgChangeVendor('#u_im_org', '#u_im_origin', '#update_manageinventory');
                    }
                    $('#u_im_destination').attr({'required': 'required'});
                    $('#u_im_destination').html("<option selected value="+response.DestinationId+">"+response.DestinationName+"</option>").prop('disabled', false);
                    fetchPatientMR(response.siteId, '#u_im_destination', null, function(data) {
                        $.each(data, function(key, value) {
                            if(value.mr_code != response.DestinationId)
                            {
                                $('#u_im_destination').append('<option value="' + value.mr_code + '">' + value.mr_code + '</option>');
                            }
                        });
                    });
                    SiteChangeMRCode('#u_im_site', '#u_im_destination', '#update_manageinventory', null);
                    $('#u_opentext').hide();
                    $('#u_opentext input').removeAttr('name id');
                    $('#u_selectoption').show();
                    $('#u_selectoption select').attr({
                        'id': 'u_im_reference_document',
                        'name': 'u_im_reference_document',
                        'required': 'required'
                    });
                    $('#u_im_reference_document').html("<option selected disabled value="+response.documentId+">"+response.document+"</option>").prop('disabled', false);
                    fetchSiteRequisition(response.siteId, response.transactionTypeId, '#u_im_reference_document', function(data) {
                        $.each(data, function(key, value) {
                            if(value.id != response.documentId)
                            {
                                $('#u_im_reference_document').append('<option value="' + value.id + '">' + value.remarks + '</option>');
                            }
                        });
                    });
                    SiteChangeRequisition('#u_im_site', '#u_im_transactiontype', '#u_im_reference_document', '#update_manageinventory');
                    
                    $('#u_select_batch').show();
                    $('#u_select_batch').html('<label class="control-label">Update Batch  #</label> <select class="form-control selecter p-0" style="color:#222d32"></select>');
                    $('#u_enter_batch').hide();
                    $('#u_enter_batch').find('label, input').remove();
                    $('#u_select_batch select').attr({
                        'id': 'u_im_batch_no',
                        'name': 'u_im_batch_no'
                    }).select2();
                    $('#u_im_batch_no').html("<option selected value='"+response.id+"'>" + response.batchNo + "</option>");
                    fetchBrandBatch(response.brandId,'#u_im_batch_no', function(data) {
                        $('#u_im_batch_no').find('option:contains("Loading...")').remove();
                        $.each(data, function(key, value) {
                            if(value.id != response.id)
                            {
                                $('#u_im_batch_no').append('<option data-id= "' + value.id + '" value="' + value.batch_no + '">' + value.batch_no + '</option>');
                            }
                        });
                    });
                    BrandChangeBatch('#u_im_brand', '#u_im_batch_no', '#add_manageinventory');
                    BatchChangeExpiryRate('update','#u_im_batch_no', '#u_itemexpiry', '#u_itemrate', 'patient_consumption');
                }
                else if(transactionType == 'reversal')
                {
                    $('#u_im_expirydate,#u_im_rate,#u_im_qty').prop('disabled',true);
                    $('#u_opentext').hide();
                    $('#u_opentext input').removeAttr('name id');
                    $('#u_selectoption').show();
                    $('#u_selectoption select').attr({
                        'id': 'u_im_reference_document',
                        'name': 'u_im_reference_document',
                        'required': 'required'
                    });
                    $('#u_im_reference_document').empty();
                    $('#u_im_reference_document').html("<option selected value="+response.documentId+">"+response.document+"</option>").prop('disabled', false);
                    fetchBrandInventory(response.brandId, '#u_im_reference_document', function(data) {
                        $.each(data, function(key, value) {
                            if(value.id != response.documentId)
                            {
                                $('#u_im_reference_document').append('<option value="' + value.id + '">' + value.code+'-00000'+value.id + '</option>');
                            }
                        });
                    });
                    BrandChangeInventory('#u_im_brand', '#u_im_reference_document', '#update_manageinventory');
                    $('#u_reference_document_section').show();
                    $('#u_from_section, #u_to_section').hide();

                    $('#u_select_batch').show();
                    $('#u_select_batch').html('<label class="control-label">Update Batch  #</label> <select class="form-control selecter p-0" style="color:#222d32"></select>');
                    $('#u_enter_batch').hide();
                    $('#u_enter_batch').find('label, input').remove();
                    $('#u_select_batch select').attr({
                        'id': 'u_im_batch_no',
                        'name': 'u_im_batch_no'
                    }).select2();
                    $('#u_im_batch_no').html("<option selected value='"+response.id+"'>" + response.batchNo + "</option>");
                    fetchBrandBatch(response.brandId,'#u_im_batch_no', function(data) {
                        $('#u_im_batch_no').find('option:contains("Loading...")').remove();
                        $.each(data, function(key, value) {
                            if(value.id != response.id)
                            {
                                $('#u_im_batch_no').append('<option data-id= "' + value.id + '" value="' + value.batch_no + '">' + value.batch_no + '</option>');
                            }
                        });
                    });
                    BrandChangeBatch('#u_im_brand', '#u_im_batch_no', '#add_manageinventory');
                    BatchChangeExpiryRate('update','#u_im_batch_no', '#u_itemexpiry', '#u_itemrate', 'reversal');
                }

               
                var formattedExpiryDate = moment(response.expiryDate).format('YYYY-MM-DD');
                $('#u_im_expirydate').each(function() {
                    var expiryDateElement = $(this);
                    expiryDateElement.val(formattedExpiryDate);
                });
                $('#u_im_rate').val(response.rate);
                $('#u_im_qty').val(response.qty);
                var documentType = response.document_type;
                
                // fetchTransactionTypeOrganizations(TransactionTypeID,'#u_im_org', function(data) {
                //     $('#u_im_org').empty();
                //     $('#u_im_org').html("<option selected disabled value=''>Select Organization</option>");
                //     $('#u_im_org').find('option:contains("Loading...")').remove();
                //     $.each(data, function(key, value) {
                //         $('#u_im_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                //     });
                // });
                // fetchTransactionTypes('null', '#u_im_transactiontype', false, function(data) {
                //     if (data && data.length > 0) {
                //         $.each(data, function(key, value) {
                //             if(value.id != response.transactionTypeId)
                //             {
                //                 $('#u_im_transactiontype').append('<option data-type="' + value.transaction_type + '" value="' + value.id + '">' + value.name + '</option>');
                //             }
                //         });
                //     } else {
                //         Swal.fire({
                //             text: 'Transaction Types are not currently available.',
                //             icon: 'error',
                //             confirmButtonText: 'OK'
                //         }).then((result) => {
                //             if (result.isConfirmed) {
                //                 $('#edit-manageinventory').modal('hide');
                //             }
                //         });

                //     }
                // });

                
                // $(document).off('change', '#u_im_transactiontype').on('change', '#u_im_transactiontype', function() {
                // // $(document).on('change', '#u_im_transactiontype', function() {
                //     $('#u_im_org').val($(this).find('option:first').val()).trigger('change');
                //     $('#u_im_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled',true);
                //     $('#u_im_brand').html("<option selected disabled value=''>Select Brand</option>").prop('disabled',true);
                //     OrgChangeBrand('#u_im_org', '#u_im_brand', '#add_manageinventory');

                //     var TransactionTypeID = $(this).val();
                //     var dataType = $(this).find('option:selected').data('type'); 
                //     $('#u_inv-management-section').show();
                //     var referenceDocument = '';
                //     var From = '';
                //     var To = '';

                //     if(dataType == 'opening balance')
                //     {
                //         $('#u_reference_document_section, #u_from_section, #u_to_section').hide();
                //         var referenceDocument = 'null';
                //         var From = 'null';
                //         var To = 'null';
                //         $('#u_selectoption').hide();
                //         $('#u_selectoption select').removeAttr('name id');
                //         $('#u_opentext').show();
                //         $('#u_opentext input').attr({
                //             'name': 'u_im_reference_document',
                //             'id': 'u_im_reference_document'
                //         });
                //     }
                //     else if(dataType == 'addition')
                //     {
                //         $('#u_reference_document_section, #u_from_section, #u_to_section').show();
                //         var referenceDocument = 'Open Text';
                //         $('#u_im_origin').html("<option selected disabled value=''>Select Origin</option>").prop('disabled',true);
                //         OrgChangeVendor('#u_im_org', '#u_im_origin', '#update_manageinventory');
                //         $('#u_im_destination').html("<option selected disabled value=''>Select Destination</option>").prop('disabled',true);
                //         OrgChangeSites('#u_im_org', '#u_im_destination', '#update_manageinventory');
                //         $('#u_selectoption').hide();
                //         $('#u_selectoption select').removeAttr('name id');
                //         $('#u_opentext').show();
                //         $('#u_opentext input').attr({
                //             'name': 'u_im_reference_document',
                //             'id': 'u_im_reference_document'
                //         });
                //     }
                //     else if(dataType == 'reduction')
                //     {
                //         $('#u_opentext').hide();
                //         $('#u_opentext input').removeAttr('name id');
                //         $('#u_selectoption').show();
                //         $('#u_selectoption select').attr({
                //             'id': 'u_im_reference_document',
                //             'name': 'u_im_reference_document'
                //         });
                //         $('#u_im_reference_document').empty();
                //         $('#u_im_reference_document').html("<option selected disabled value=''>Select Previous Inventory Transaction</option>");
                //         BrandChangeInventory('#u_im_brand', '#u_im_reference_document', '#update_manageinventory');
                //         $('#u_reference_document_section, #u_from_section, #u_to_section').show();
                //         $('#u_im_origin').html("<option selected disabled value=''>Select Origin</option>").prop('disabled',true);
                //         OrgChangeSites('#u_im_org', '#u_im_origin', '#update_manageinventory');
                //         $('#u_im_destination').html("<option selected disabled value=''>Select Destination</option>").prop('disabled',true);
                //         OrgChangeVendor('#u_im_org', '#u_im_destination', '#update_manageinventory');
                        
                //     }
                //     else if(dataType == 'transfer')
                //     {
                //         $('#u_reference_document_section').hide();
                //         $('#u_from_section, #u_to_section').show();
                //         $('#u_selectoption').hide();
                //         $('#u_selectoption select').removeAttr('name id');
                //         $('#u_opentext').show();
                //         $('#u_opentext input').attr({
                //             'name': 'u_im_reference_document',
                //             'id': 'u_im_reference_document'
                //         });
                //         $('#u_im_origin').html("<option selected disabled value=''>Select Origin</option>").prop('disabled',true);
                //         OrgChangeSites('#u_im_org', '#u_im_origin', '#update_manageinventory');
                //         $('#u_im_destination').html("<option selected disabled value=''>Select Destination</option>").prop('disabled',true);
                //         OrgChangeSites('#u_im_org', '#u_im_destination', '#update_manageinventory');
                //     }
                //     else if(dataType == 'general consumption')
                //     {
                //         $('#u_to_section').hide();
                //         $('#u_reference_document_section, #u_from_section').show();
                //         $('#u_im_origin').html("<option selected disabled value=''>Select Origin</option>").prop('disabled',true);
                //         OrgChangeSites('#u_im_org', '#u_im_origin', '#update_manageinventory');
                //         $('#u_opentext').hide();
                //         $('#u_opentext input').removeAttr('name id');
                //         $('#u_selectoption').show();
                //         $('#u_selectoption select').attr({
                //             'id': 'u_im_reference_document',
                //             'name': 'u_im_reference_document'
                //         });
                //         $('#u_im_reference_document').html("<option selected disabled value=''>Select Requisition</option>").prop('disabled',true);
                //         SiteChangeRequisition('#u_im_site', '#u_im_transactiontype', '#u_im_reference_document', '#update_manageinventory');
                //     }
                //     else if(dataType == 'patient consumption')
                //     {
                //         $('#u_reference_document_section, #u_from_section, #u_to_section').show();
                //         $('#u_im_origin').html("<option selected disabled value=''>Select Origin</option>").prop('disabled',true);
                //         OrgChangeVendor('#u_im_org', '#u_im_origin', '#update_manageinventory');
                //         $('#u_im_destination').html("<option selected disabled value=''>Select MR#</option>").prop('disabled',true);
                //         SiteChangeMRCode('#u_im_site', '#u_im_destination', '#update_manageinventory', null);
                //         $('#u_opentext').hide();
                //         $('#u_opentext input').removeAttr('name id');
                //         $('#u_selectoption').show();
                //         $('#u_selectoption select').attr({
                //             'id': 'u_im_reference_document',
                //             'name': 'u_im_reference_document'
                //         });
                //         $('#u_im_reference_document').html("<option selected disabled value=''>Select Requisition</option>").prop('disabled',true);
                //         SiteChangeRequisition('#u_im_site', '#u_im_transactiontype', '#u_im_reference_document', '#update_manageinventory');
        
                //     }
                //     else if(dataType == 'reversal')
                //     {
                //         $('#u_opentext').hide();
                //         $('#u_opentext input').removeAttr('name id');
                //         $('#u_selectoption').show();
                //         $('#u_selectoption select').attr({
                //             'id': 'u_im_reference_document',
                //             'name': 'u_im_reference_document'
                //         });
                //         $('#u_im_reference_document').empty();
                //         $('#u_im_reference_document').html("<option selected disabled value=''>Select Previous Inventory Transaction</option>");
                       
                //         BrandChangeInventory('#u_im_brand', '#u_im_reference_document', '#update_manageinventory');
                //         $('#u_reference_document_section').show();
                //         $('#u_from_section, #u_to_section').hide();
                //     }
                // });
                $('#edit-manageinventory').modal('show');
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Inventory Management Modal

    //Update Inventory Management
    $('#update_manageinventory').on('submit', function (event) {
        event.preventDefault();
        var formData = SerializeForm(this);
        var inventoryManagementId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'u_im-id') {
                inventoryManagementId = formData[i].value;
                break;
            }
        }
        var url = 'inventory/update-invmanagement/' + inventoryManagementId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-manageinventory').modal('hide');
                            $('#view-manageinventory').DataTable().ajax.reload(); // Refresh DataTable
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                console.log(xhr.responseText);
            }
        });
    });
    //Update Inventory Management

});


//Finance Receiving Payment
$(document).ready(function() {
    //Open Receiving Setup
    $(document).on('click', '.add-financereceiving', function() {
        var orgId = $('#fr_org').val();
        if(orgId)
        {
            fetchOrganizationSites(orgId, '#fr_site', function(data) {
                $('#fr_site').html("<option selected disabled value=''>Select Site</option>");
                $.each(data, function(key, value) {
                    $('#fr_site').append('<option value="' + value.id + '">' + value.name + '</option>');
                });
            });

            fetchFinanceTransactionTypes(orgId,'#fr_transactiontype', function(data) {
                $('#fr_transactiontype').html("<option selected disabled value=''>Select Transaction Type</option>");
                $.each(data, function(key, value) {
                    $('#fr_transactiontype').append('<option value="' + value.id + '">' + value.name + '</option>');
                });
            });
        }
        else{
            $('#fr_org').html("<option selected disabled value=''>Select Organization</option>");
            fetchOrganizations('null', '','#fr_org', function(data) {
                $('#fr_org').find('option:contains("Loading...")').remove();
                $.each(data, function(key, value) {
                    $('#fr_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                });
            });  
            $('#fr_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', true);
            OrgChangeSites('#fr_org', '#fr_site', '#add_financereceiving');
            $('#fr_transactiontype').html("<option selected disabled value=''>Select Transaction Type</option>").prop('disabled',true);
            OrgChangeFinanceTransactionTypes('#fr_org', '#fr_transactiontype', '#add_financereceiving');
        }

        $('#ft_discount').hide();
        $('#fr_discount').attr('required', false);
        $('#add-financereceiving').modal('show');
    });
    $(document).on('change', '#fr_transactiontype', function() {
        var TransactionTypeID = $(this).val();
        console.log(TransactionTypeID);
        CheckFinanceTransactionTypes(TransactionTypeID, '#fr_transactiontype')
            .then(function (data) {
                $.each(data, function (key, value) {
                    if (value.discount_allowed == 'yes') {
                        $('#ft_discount').show();
                        $('#fr_discount').attr('required', true);
                    }
                    else
                    {
                        $('#ft_discount').hide();
                        $('#fr_discount').attr('required', false);
                    }

                    if (value.amount_editable == 'no') {
                        $('#fr_amount').removeAttr('max');
                    }
                    else
                    {   
                        var ceilingAmount = value.amount_ceiling;
                        $('#fr_amount').attr('max', ceilingAmount);
                    }
                });
            })
            .fail(function (error) {
                console.error(error);
            });
    });
    //Open Receiving Setup

    //Add Receiving Setup
    $('#add_financereceiving').submit(function(e) {
        e.preventDefault();
        var data = SerializeForm(this);
        var resp = true;
        $(data).each(function(i, field){
            if (((field.value == '') || (field.value == null)) && ((field.name != 'fr_paymentoptiondetails') && (field.name != 'fr_discount')))
            {
                var FieldName = field.name;
                var FieldName = field.name.replace('[]', '');
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                $( 'textarea[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('textarea[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $( 'textarea[name= "' +FieldName +'"' ).addClass('requirefield');
                resp = false;
            }
        });

        if(resp != false)
        {
            $.ajax({
                url: "/finance/addfinancereceiving",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {
                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-financereceiving').modal('hide');
                                $('#view-financereceiving').DataTable().ajax.reload();
                                $('#add_financereceiving')[0].reset();
                                $('#add_financereceiving').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('.text-danger').hide();
                            }
                        });
                    }
                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Receiving Setup

    // View Finance Receiving
    var viewFinanceReceiving =  $('#view-financereceiving').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/finance/financereceiving',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'details', name: 'details' },
            { data: 'debit', name: 'debit' },
            { data: 'account_balance', name: 'account_balance' },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "300px"
            },
            {
                targets: 5,
                width: "300px"
            }
        ]
    });
    viewFinanceReceiving.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    viewFinanceReceiving.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    viewFinanceReceiving.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Finance Receiving

    // Update Finance Receiving Status
    $(document).on('click', '.ft_status ', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/finance/financetransaction-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
                var status = xhr.status;
                if(status == 200)
                {
                    $('#view-financereceiving').DataTable().ajax.reload();
                }
            },
            error: function(xhr, status, error) {
                console.log(error);
            }
        });
    });
    // Update Finance Receiving Status

    //Update Finance Receiving Modal
    $(document).on('click', '.edit-ft', function() {
        var poId = $(this).data('ft-id');
        $('#edit-financereceiving').modal('show');
        var url = '/finance/updatefinancetransaction/' + poId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('#u_fr_edt').val(formattedDateTime);
                $('#ft-id').val(response.id);
                $('#u_fr_org').html("<option selected value="+ response.orgId +">" + response.orgName + "</option>");
                fetchOrganizations(response.orgId,response.orgName,'#u_fr_org', function(data) {
                    $('#u_fr_org').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        $('#u_fr_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                    });
                });

                $('#u_fr_site').html("<option selected value="+ response.siteId +">" + response.siteName + "</option>");
                fetchSites(response.orgId, '#u_fr_site', function(data) {
                    if (data.length > 0) {
                        $.each(data, function(key, value) {
                            $('#u_fr_site').append('<option value="' + value.id + '">' + value.name + '</option>');
                        });
                    }
                }, function(error) {
                    console.log(error);
                },response.siteId);

                OrgChangeSites('#u_fr_org', '#u_fr_site', '#update_financereceiving');

                $('#u_fr_transactiontype').html("<option selected value="+ response.TransactionTypeId +">" + response.TransactionTypeName + "</option>");
                fetchFinanceTransactionTypes(response.orgId,'#u_fr_transactiontype', function(data) {
                    $('#u_fr_transactiontype').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        if(value.id != response.TransactionTypeId)
                        {
                            $('#u_fr_transactiontype').append('<option value="' + value.id + '">' + value.name + '</option>');
                        }
                    });
                });
                OrgChangeFinanceTransactionTypes('#u_fr_org', '#u_fr_transactiontype', '#add_financereceiving');
                if(response.DiscountAllowed == 'no'){
                    $('#uft_discount').hide();
                }
                else{
                    $('#uft_discount').show();
                    $('#u_fr_discount').val(response.Discount);
                    $('#u_fr_discount').attr('required', true);
                }
                if(response.AmountEditable == 'no'){
                    $('#u_fr_amount').removeAttr('max');
                }
                else{
                    var ceilingAmount = response.CeilingAmount;
                    $('#u_fr_amount').attr('max', ceilingAmount);
                }
                $(document).on('change', '#u_fr_transactiontype', function() {
                    var TransactionTypeID = $(this).val();
                    CheckFinanceTransactionTypes(TransactionTypeID, '#u_fr_transactiontype')
                        .then(function (data) {
                            $.each(data, function (key, value) {
                                if (value.discount_allowed == 'yes') {
                                    $('#ft_duft_discountiscount').show();
                                    $('#u_fr_discount').attr('required', true);
                                }
                                else
                                {
                                    $('#uft_discount').hide();
                                    $('#u_fr_discount').attr('required', false);
                                }
            
                                if (value.amount_editable == 'no') {
                                    $('#u_fr_amount').removeAttr('max');
                                }
                                else
                                {   
                                    var ceilingAmount = value.amount_ceiling;
                                    $('#u_fr_amount').attr('max', ceilingAmount);
                                }
                            });
                        })
                        .fail(function (error) {
                            console.error(error);
                        });
                });

                $('#u_fr_paymentoption option[value="' + response.PaymentOption + '"]').remove();
                $('#u_fr_paymentoption').prepend("<option selected value="+ response.PaymentOption +">" + response.PaymentOption + "</option>");

                $('#u_fr_paymentoptiondetails').val(response.PaymentOptionDetail);
                $('#u_fr_amount').val(response.Amount);
                $('#u_fr_remarks').val(response.Remarks);

                $('#edit-financereceiving').modal('show');
                $('#ajax-loader').hide();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Finance Receiving Modal

    //Update Finance Receiving
    $('#update_financereceiving').on('submit', function (event) {
        event.preventDefault();
        var formData = SerializeForm(this);
        var ftId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'ft-id') {
                ftId = formData[i].value;
                break;
            }
        }
        var url = '/finance/update-financetransaction/' + ftId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });

            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-financereceiving').modal('hide');
                            $('#view-financereceiving').DataTable().ajax.reload(); // Refresh DataTable
                            $('#update_financereceiving')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Finance Receiving
});
//Finance Receiving Payment

//Finance Payments
$(document).ready(function() {
    //Open Payment Setup
    $(document).on('click', '.add-financepayment', function() {
        var orgId = $('#fp_org').val();
        if(orgId)
        {
            fetchOrganizationSites(orgId, '#fp_site', function(data) {
                $('#fp_site').html("<option selected disabled value=''>Select Site</option>");
                $.each(data, function(key, value) {
                    $('#fp_site').append('<option value="' + value.id + '">' + value.name + '</option>');
                });
            });

            fetchFinanceTransactionTypes(orgId,'#fp_transactiontype', function(data) {
                $('#fp_transactiontype').html("<option selected disabled value=''>Select Transaction Type</option>");
                $.each(data, function(key, value) {
                    $('#fp_transactiontype').append('<option value="' + value.id + '">' + value.name + '</option>');
                });
            });
        }
        else{
            $('#fp_org').html("<option selected disabled value=''>Select Organization</option>");
            fetchOrganizations('null', '','#fp_org', function(data) {
                $('#fp_org').find('option:contains("Loading...")').remove();
                $.each(data, function(key, value) {
                    $('#fp_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                });
            });
            $('#fp_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', true);
            OrgChangeSites('#fp_org', '#fp_site', '#add_financepayment');
    
            $('#fp_transactiontype').html("<option selected disabled value=''>Select Transaction Type</option>").prop('disabled',true);
            OrgChangeFinanceTransactionTypes('#fp_org', '#fp_transactiontype', '#add_financepayment');
    
        }
        $('#ft_discount').hide();
        $('#fp_discount').attr('required', false);
        $('#add-financepayment').modal('show');
    });
    $(document).on('change', '#fp_transactiontype', function() {
        var TransactionTypeID = $(this).val();
        console.log(TransactionTypeID);
        CheckFinanceTransactionTypes(TransactionTypeID, '#fp_transactiontype')
            .then(function (data) {
                $.each(data, function (key, value) {
                    if (value.discount_allowed == 'yes') {
                        $('#ft_discount').show();
                        $('#fp_discount').attr('required', true);
                    }
                    else
                    {
                        $('#ft_discount').hide();
                        $('#fp_discount').attr('required', false);
                    }

                    if (value.amount_editable == 'no') {
                        $('#fp_amount').removeAttr('max');
                    }
                    else
                    {   
                        var ceilingAmount = value.amount_ceiling;
                        $('#fp_amount').attr('max', ceilingAmount);
                    }
                });
            })
            .fail(function (error) {
                console.error(error);
            });
    });
    //Open Payment Setup

    //Add Payment Setup
    $('#add_financepayment').submit(function(e) {
        e.preventDefault();
        var data = SerializeForm(this);
        var resp = true;
        $(data).each(function(i, field){
            if (((field.value == '') || (field.value == null)) && ((field.name != 'fp_paymentoptiondetails') && (field.name != 'fp_discount')))
            {
                var FieldName = field.name;
                var FieldName = field.name.replace('[]', '');
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                $( 'textarea[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('textarea[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $( 'textarea[name= "' +FieldName +'"' ).addClass('requirefield');
                resp = false;
            }
        });

        if(resp != false)
        {
            $.ajax({
                url: "/finance/addfinancepayment",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {
                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-financepayment').modal('hide');
                                $('#view-financepayment').DataTable().ajax.reload();
                                $('#add_financepayment')[0].reset();
                                $('#add_financepayment').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('.text-danger').hide();
                            }
                        });
                    }
                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Payment Setup

    // View Finance Payment
    var viewFinancePayment =  $('#view-financepayment').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/finance/financepayment',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'details', name: 'details' },
            { data: 'debit', name: 'debit' },
            { data: 'account_balance', name: 'account_balance' },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "300px"
            },
            {
                targets: 5,
                width: "300px"
            }
        ]
    });
    viewFinancePayment.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    viewFinancePayment.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    viewFinancePayment.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Finance Payment

    // Update Finance Payment Status
    $(document).on('click', '.ft_status ', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/finance/financepayment-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
                var status = xhr.status;
                if(status == 200)
                {
                    $('#view-financepayment').DataTable().ajax.reload();
                }
            },
            error: function(xhr, status, error) {
                console.log(error);
            }
        });
    });
    // Update Finance Payment Status

    //Update Finance Payment Modal
    $(document).on('click', '.edit-ft', function() {
        var poId = $(this).data('ft-id');
        $('#edit-financepayment').modal('show');
        var url = '/finance/updatefinancepayment/' + poId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('#u_fp_edt').val(formattedDateTime);
                $('#ft-id').val(response.id);
                $('#u_fp_org').html("<option selected value="+ response.orgId +">" + response.orgName + "</option>");
                fetchOrganizations(response.orgId,response.orgName,'#u_fp_org', function(data) {
                    $('#u_fp_org').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        $('#u_fp_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                    });
                });

                $('#u_fp_site').html("<option selected value="+ response.siteId +">" + response.siteName + "</option>");
                fetchSites(response.orgId, '#u_fp_site', function(data) {
                    if (data.length > 0) {
                        $.each(data, function(key, value) {
                            $('#u_fp_site').append('<option value="' + value.id + '">' + value.name + '</option>');
                        });
                    }
                }, function(error) {
                    console.log(error);
                },response.siteId);

                OrgChangeSites('#u_fp_org', '#u_fp_site', '#update_financepayment');

                $('#u_fp_transactiontype').html("<option selected value="+ response.TransactionTypeId +">" + response.TransactionTypeName + "</option>");
                fetchFinanceTransactionTypes(response.orgId,'#u_fp_transactiontype', function(data) {
                    $('#u_fp_transactiontype').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        if(value.id != response.TransactionTypeId)
                        {
                            $('#u_fp_transactiontype').append('<option value="' + value.id + '">' + value.name + '</option>');
                        }
                    });
                });
                OrgChangeFinanceTransactionTypes('#u_fp_org', '#u_fp_transactiontype', '#add_financepayment');
                if(response.DiscountAllowed == 'no'){
                    $('#uft_discount').hide();
                }
                else{
                    $('#uft_discount').show();
                    $('#u_fp_discount').val(response.Discount);
                    $('#u_fp_discount').attr('required', true);
                }
                if(response.AmountEditable == 'no'){
                    $('#u_fp_amount').removeAttr('max');
                }
                else{
                    var ceilingAmount = response.CeilingAmount;
                    $('#u_fp_amount').attr('max', ceilingAmount);
                }
                $(document).on('change', '#u_fp_transactiontype', function() {
                    var TransactionTypeID = $(this).val();
                    CheckFinanceTransactionTypes(TransactionTypeID, '#u_fp_transactiontype')
                        .then(function (data) {
                            $.each(data, function (key, value) {
                                if (value.discount_allowed == 'yes') {
                                    $('#ft_duft_discountiscount').show();
                                    $('#u_fp_discount').attr('required', true);
                                }
                                else
                                {
                                    $('#uft_discount').hide();
                                    $('#u_fp_discount').attr('required', false);
                                }
            
                                if (value.amount_editable == 'no') {
                                    $('#u_fp_amount').removeAttr('max');
                                }
                                else
                                {   
                                    var ceilingAmount = value.amount_ceiling;
                                    $('#u_fp_amount').attr('max', ceilingAmount);
                                }
                            });
                        })
                        .fail(function (error) {
                            console.error(error);
                        });
                });

                $('#u_fp_paymentoption option[value="' + response.PaymentOption + '"]').remove();
                $('#u_fp_paymentoption').prepend("<option selected value="+ response.PaymentOption +">" + response.PaymentOption + "</option>");

                $('#u_fp_paymentoptiondetails').val(response.PaymentOptionDetail);
                $('#u_fp_amount').val(response.Amount);
                $('#u_fp_remarks').val(response.Remarks);

                $('#edit-financepayment').modal('show');
                $('#ajax-loader').hide();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Finance Payment Modal

    //Update Finance Payment
    $('#update_financepayment').on('submit', function (event) {
        event.preventDefault();
        var formData = SerializeForm(this);
        var ftId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'ft-id') {
                ftId = formData[i].value;
                break;
            }
        }
        var url = '/finance/update-financepayment/' + ftId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });

            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-financepayment').modal('hide');
                            $('#view-financepayment').DataTable().ajax.reload(); // Refresh DataTable
                            $('#update_financepayment')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Finance Payment
});
//Finance Payments

//Item Rates
$(document).ready(function() {
    //Open Item Rates
    $(document).on('click', '.add-itemrate', function() {
        var orgId = $('#ir_org').val();
        if(orgId)
        {
            fetchOrganizationSites(orgId, '#ir_site', function(data) {
                $('#ir_site').html("<option selected disabled value=''>Select Site</option>");
                $.each(data, function(key, value) {
                    $('#ir_site').append('<option value="' + value.id + '">' + value.name + '</option>');
                });
            });

            fetchOrganizationBrand(orgId,'#ir_brand', function(data) {
                $('#ir_brand').html("<option selected disabled value=''>Select Item Brand</option>");
                $.each(data, function(key, value) {
                    $('#ir_brand').append('<option value="' + value.id + '">' + value.name + '</option>');
                });
            });
        }
        else{
            $('#ir_org').html("<option selected disabled value=''>Select Organization</option>");
            fetchOrganizations('null', '','#ir_org', function(data) {
                $('#ir_org').find('option:contains("Loading...")').remove();
                $.each(data, function(key, value) {
                    $('#ir_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                });
            });
            $('#ir_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', true);
            OrgChangeSites('#ir_org', '#ir_site', '#add_financepayment');
    
            $('#ir_brand').html("<option selected disabled value=''>Select Item Brand</option>").prop('disabled',true);
            OrgChangeBrand('#ir_org', '#ir_brand', '#add_itemrate');
    
        }
        // $('#ft_discount').hide();
        // $('#fp_discount').attr('required', false);
        $('#add-itemrate').modal('show');
    });
    //Open Item Rates

    //Add Item Rates
    $('#add_itemrate').submit(function(e) {
        e.preventDefault();
        var data = SerializeForm(this);
        var resp = true;
        $(data).each(function(i, field){
            if (((field.value == '') || (field.value == null)) && ((field.name != 'fp_paymentoptiondetails') && (field.name != 'fp_discount')))
            {
                var FieldName = field.name;
                var FieldName = field.name.replace('[]', '');
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                resp = false;
            }
        });

        if(resp != false)
        {
            $.ajax({
                url: "/finance/additemrates",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {
                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-itemrate').modal('hide');
                                $('#view-itemrate').DataTable().ajax.reload();
                                $('#add_itemrate')[0].reset();
                                $('#add_itemrate').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('.text-danger').hide();
                            }
                        });
                    }
                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Item Rates

    // View Item Rates
    var viewItemRates =  $('#view-itemrate').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/finance/itemrate',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'details', name: 'details' },
            { data: 'unit_cost', name: 'unit_cost' },
            { data: 'billed_amount', name: 'billed_amount' },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "300px"
            },
            {
                targets: 5,
                width: "300px"
            }
        ]
    });
    viewItemRates.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    viewItemRates.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    viewItemRates.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Item Rates

    // Update Item Rates Status
    $(document).on('click', '.ir_status ', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/finance/itemrate-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
                var status = xhr.status;
                if(status == 200)
                {
                    $('#view-itemrate').DataTable().ajax.reload();
                }
            },
            error: function(xhr, status, error) {
                console.log(error);
            }
        });
    });
    // Update Item Rates Status

    //Update Item Rates Modal
    $(document).on('click', '.edit-ir', function() {
        var irId = $(this).data('ir-id');
        var url = '/finance/updateitemrate/' + irId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('#u_ir_edt').val(formattedDateTime);
                $('#ir-id').val(response.id);
                $('#u_ir_org').html("<option selected value="+ response.orgId +">" + response.orgName + "</option>");
                fetchOrganizations(response.orgId,response.orgName,'#u_ir_org', function(data) {
                    $('#u_ir_org').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        $('#u_ir_org').append('<option value="' + value.id + '">' + value.organization + '</option>');
                    });
                });

                $('#u_ir_site').html("<option selected value="+ response.siteId +">" + response.siteName + "</option>");
                fetchSites(response.orgId, '#u_ir_site', function(data) {
                    if (data.length > 0) {
                        $.each(data, function(key, value) {
                            $('#u_ir_site').append('<option value="' + value.id + '">' + value.name + '</option>');
                        });
                    }
                }, function(error) {
                    console.log(error);
                },response.siteId);

                OrgChangeSites('#u_ir_org', '#u_ir_site', '#update_itemrate');

                $('#u_fp_transactiontype').html("<option selected value="+ response.TransactionTypeId +">" + response.TransactionTypeName + "</option>");
                fetchFinanceTransactionTypes(response.orgId,'#u_fp_transactiontype', function(data) {
                    $('#u_fp_transactiontype').find('option:contains("Loading...")').remove();
                    $.each(data, function(key, value) {
                        if(value.id != response.TransactionTypeId)
                        {
                            $('#u_fp_transactiontype').append('<option value="' + value.id + '">' + value.name + '</option>');
                        }
                    });
                });
                fetchOrganizationBrand(response.orgId,'#u_ir_brand', function(data) {
                    $.each(data, function(key, value) {
                        $('#u_ir_brand').append('<option value="' + value.id + '">' + value.name + '</option>');
                    });
                });
                OrgChangeBrand('#u_ir_org', '#u_ir_brand', '#update_itemrate');

                $('#u_ir_unitcost').val(response.UnitCost);
                $('#u_ir_billedamount').val(response.BilledAmount);

                $('#edit-itemrate').modal('show');
                $('#ajax-loader').hide();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Item Rates Modal

    //Update Item Rates
    $('#update_itemrate').on('submit', function (event) {
        event.preventDefault();
        var formData = SerializeForm(this);
        var irId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'ir-id') {
                irId = formData[i].value;
                break;
            }
        }
        var url = '/finance/update-itemrate/' + irId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });

            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-itemrate').modal('hide');
                            $('#view-itemrate').DataTable().ajax.reload(); // Refresh DataTable
                            $('#update_itemrate')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Item Rates
});
//Item Rates


// Service Rates
$(document).ready(function() {
    $('#srate_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled',true);
    var orgId = $('#srate_org').val();
    if(orgId)
    {
        fetchOrganizationSites(orgId, '#srate_site', function(data) {
            $('#srate_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', false);
            $.each(data, function(key, value) {
                $('#srate_site').append('<option value="' + value.id + '">' + value.name + '</option>');
            });
        });
    }
    else{
        OrgChangeSites('#srate_org', '#srate_site', '#fetchservicerates');
    }

    // Show Activated Services Table
    $('#fetchservicerates').on('submit', function (event) {
        event.preventDefault();
        var formData = SerializeForm(this);
        ShowActivatedServiceData(formData);
        // var url = '/finance/fetch-servicerates';
        // $.ajax({
        //     url: url,
        //     method: 'POST',
        //     headers: {
        //         'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
        //     },
        //     data: formData,
        //     beforeSend: function() {
        //         Swal.fire({
        //             title: "Processing",
        //             allowOutsideClick: false,
        //             willOpen: () => {
        //                 Swal.showLoading();
        //             },
        //             showConfirmButton: false
        //         });
               
        //     },
        //     success: function (response) {
        //         if ($.fn.DataTable.isDataTable('#view-servicerates')) {
        //             $('#view-servicerates').DataTable().clear().destroy();
        //         }
        //         $('#view-servicerates').html(`
        //             <thead>
        //                 <tr>
        //                     <th></th>
        //                     <th>Service Type<br>Service Group<br>Service</th>
        //                     <th>Billing Cost Centers</th>
        //                     <th>Performing Cost Centers</th>
        //                     <th>Service Mode</th>
        //                     <th>Unit</th>
        //                     <th>Action</th>
        //                 </tr>
        //             </thead>
        //         `);
        //         var ServiceRates =  $('#view-servicerates').DataTable({
        //             processing: true,
        //             serverSide: false,
        //             data: response.data,
        //             order: [[0, 'desc']],
        //             columns: [
        //                 { data: 'id_raw', name: 'id_raw', visible: false },
        //                 { data: 'service_details', name: 'service_details' },
        //                 { data: 'billingCC', name: 'billingCC' },
        //                 { data: 'performingCC', name: 'performingCC' },
        //                 { data: 'ServiceModes', name: 'ServiceModes' },
        //                 { data: 'ServiceUnit', name: 'ServiceUnit' },
        //                 { data: 'action', name: 'action', orderable: false, searchable: false }
        //             ],
        //             columnDefs: [
        //                 {
        //                     targets: 1,
        //                     width: "200px"
        //                 },
        //                 {
        //                     targets: 2,
        //                     width: "200px"
        //                 },
        //                 {
        //                     targets: 3,
        //                     width: "200px"
        //                 },
        //                 {
        //                     targets: 4,
        //                     width: "200px"
        //                 },
        //                 {
        //                     targets: 6,
        //                     width: "300px"
        //                 },
        //             ]
                    
        //         });
        //         // ServiceRates.clear().rows.add(response.data).draw();
        //         Swal.close();
        //     },
        //     error: function (xhr, status, error) {
        //         // Handle error response
        //         console.log(xhr.responseText);
        //     }
        // });
    });
    // Show Activated Services Table

    // Add Service Rates Modal
    $(document).on('click', '.add-servicerate', function() {
        var servicemodeId = $(this).data('servicemode-id');
        var activatedserviceId = $(this).data('activatedservice-id');
        var siteId = $(this).data('site-id');
        $('input[name="mode_id"]').val(servicemodeId);
        $('input[name="activated_id"]').val(activatedserviceId);
        $('input[name="site_id"]').val(siteId);

        $('#add-servicerate').modal('show');
    });
    // Add Service Rates Modal

    //Add Service Rates
    $('#add_servicerates').submit(function(e) {
        e.preventDefault();
        var data = SerializeForm(this);
        var resp = true;
        var siteId = '';

        $(data).each(function(i, field){
            if (((field.value == '') || (field.value == null)))
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";

                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                resp = false;
            }

            if (field.name === 'site_id') {
                siteId = field.value;
            }
        });
        if(resp != false)
        {
            $.ajax({
                url: "/finance/addservicerates",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {
                    let successMessageShown = false;
                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    if (fieldName == 'info')
                        {
                            Swal.fire({
                                text: fieldErrors,
                                icon: fieldName,
                                confirmButtonText: 'OK'
                            })
                        }
                    else if (fieldName == 'success')
                    {
                        if (!successMessageShown) {
                            Swal.fire({
                                text: fieldErrors,
                                icon: fieldName,
                                allowOutsideClick: false,
                                confirmButtonText: 'OK'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    ShowActivatedServiceData({ srate_site: siteId }); 
                                    $('#add_servicerates')[0].reset();
                                    $('#add-servicerate').modal('hide');

                                    $('.text-danger').hide();
                                }
                            });
                    
                            successMessageShown = true; 
                        }
                    }
                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Service Rates

    //Update Service Rates Modal
    $(document).on('click', '.edit-servicerates', function() {
        var poId = $(this).data('servicerate-id');
        var url = '/finance/updateservicerates/' + poId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                $('#u_servicerate_id').val(response.id);
                $('#u_rate_unitCost').val(response.unitCost);
                $('#u_rate_billedAmount').val(response.billedAmount);
                $('#siteId').val(response.siteId);
                $('#edit-servicerates').modal('show');
                $('#ajax-loader').hide();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });

    });
    //Update Service Rates Modal

    //Update Service Rates
    $('#u_servicerates').on('submit', function (event) {
        event.preventDefault();
        var formData = SerializeForm(this);
        var Id;
        var siteId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'u_servicerate_id') {
                Id = formData[i].value;
            } else if (formData[i].name === 'siteId') {
                siteId = formData[i].value;
            }
            if (Id && siteId) break;
        }
        var url = '/finance/update-servicerates/' + Id;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });

            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'info')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-servicerates').modal('hide');
                            ShowActivatedServiceData({ srate_site: siteId }); 
                            $('#u_servicerates')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Service Rates


});
// Service Rates


//Module Setup
$(document).ready(function() {
    //Add Module
    $('#add_module').submit(function(e) {
        e.preventDefault(); // Prevent the form from submitting normally
        var data = SerializeForm(this);
        var resp = true;
        $(data).each(function(i, field){
            if ((field.value == '') || (field.value == null))
            {
                var FieldName = field.name;
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                resp = false;
            }
        });

        if(resp != false)
        {
            $.ajax({
                url: "/module/addmodule",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {

                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-module').modal('hide');
                                $('#view-module').DataTable().ajax.reload();
                                $('#add_module')[0].reset();
                                $('.text-danger').hide();
                            }
                        });
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_module')[0].reset();
                            }
                        });
                    }

                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Module

    // View Module Data
    var viewModule =  $('#view-module').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/module/viewmodule',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id' },
            { data: 'name', name: 'name' },
            {
                "data": 'parent',
                "render": function(data, type, row) {
                    return data.replace(/\b\w/g, function(char) { return char.toUpperCase(); });
                }
            },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "200px"
            },
            {
                targets: 4,
                width: "250px"
            }
        ]
    });

    viewModule.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    // Show the loader before an AJAX request is made
    viewModule.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    // Hide the loader after the AJAX request is complete
    viewModule.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Module Data
});
//Module Setup


//ICD Coding
$(document).ready(function() {
    //Open Add ICD Setup
    $(document).on('click', '.add-icdcode', function() {
        $('#ref_sc').hide();
        $('#add-icdcode').modal('show');

        $('#icd_codetype').on('change', function() {
            if ($(this).val() === 'p') {
                $('#ref_sc').show();
                $('#icd_service').attr('required', 'required');
            } else {
                $('#ref_sc').hide();
                $('#icd_service').removeAttr('required');
            }
        });

    });
    //Open Add ICD Setup

    //Add ICD Code
    $('#add_icdcode').submit(function(e) {
        e.preventDefault();
        var data = SerializeForm(this);
        var resp = true;
        $(data).each(function(i, field){
            if (((field.value == '') || (field.value == null)) && ((field.name != 'icd_service')))
            {
                var FieldName = field.name;
                var FieldName = field.name.replace('[]', '');
                var FieldID = '#'+FieldName + "_error";
                $(FieldID).text("This field is required");
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(FieldID).text("");
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                $( 'textarea[name= "' +FieldName +'"' ).focus(function() {
                    $(FieldID).text("");
                    $('textarea[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $( 'textarea[name= "' +FieldName +'"' ).addClass('requirefield');
                resp = false;
            }
        });

        if(resp != false)
        {
            $.ajax({
                url: "/medicalrecord/addicdcode",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {
                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add-icdcode').modal('hide');
                                $('#view-icdcode').DataTable().ajax.reload();
                                $('#add_icdcode')[0].reset();
                                $('#add_icdcode').find('select').each(function(){
                                    $(this).val($(this).find('option:first').val()).trigger('change');
                                });
                                $('.text-danger').hide();
                            }
                        });
                    }
                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add  ICD Code

    // View ICD Code
    var viewICDCode =  $('#view-icdcode').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/medicalrecord/viewicdcode',
        order: [[0, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id'},
            { data: 'desc', name: 'desc' },
            { data: 'codetype', name: 'codetype' },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "250px"
            },
            {
                targets: 2,
                width: "350px"
            },
            {
                targets: 5,
                width: "250px"
            }
        ]
    });
    viewICDCode.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    viewICDCode.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    viewICDCode.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View ICD Code

    // Update ICD Code Status
    $(document).on('click', '.icdcode_status ', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/medicalrecord/icdcode-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
                var status = xhr.status;
                if(status == 200)
                {
                    $('#view-icdcode').DataTable().ajax.reload();
                }
            },
            error: function(xhr, status, error) {
                console.log(error);
            }
        });
    });
    // Update ICD Code Status

    //Update ICD Code Modal
    $(document).on('click', '.edit-icdcode', function() {
        var icdId = $(this).data('icd-code');
        $('#edit-icdcode').modal('show');
        var url = '/medicalrecord/updateicdcode/' + icdId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('#uicd_edt').val(formattedDateTime);
                $('.icd-id').val(response.id);
                $('#uicd_desc').val(response.description);
                $('#uicd_code').val(response.code);
                var serviceId = response.service_id;
                console.log(response.serviceName);

                if (serviceId != '0') {
                    $('#uref_sc').show();
                    $('#uicd_service')
                    .val(serviceId)
                    .trigger('change');
                }
                else{
                    $('#uref_sc').hide();
                }
                var type = response.type;
                if (type) {
                    $('#uicd_codetype').val(type).trigger('change');
                }

                $(document).on('change', '#uicd_codetype', function() {
                    var codeType = $(this).val();
                    if(codeType == 'p')
                    {
                        $('#uref_sc').show();
                        // $('#uicd_service').val(serviceId).trigger('change');
                    }
                    else{
                        $('#uref_sc').hide();
                    }
                });
                $('#ajax-loader').hide();
                $('#edit-icdcode').modal('show');
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update ICD Code Modal

    //Update ICD Code
    $('#update_icdcode').on('submit', function (event) {
        event.preventDefault();
        var formData = SerializeForm(this);
        var icdId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'icd-id') {
                icdId = formData[i].value;
                break;
            }
        }
        var url = '/medicalrecord/update-icdcode/' + icdId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });

            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-icdcode').modal('hide');
                            $('#view-icdcode').DataTable().ajax.reload();
                            $('#update_icdcode')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update ICD Code
});
//ICD Coding

// Vital Signs
$(document).ready(function() {
    var typingTimer;
    var doneTypingInterval = 200;
    var minLength = 7;
    var viewVitalSign = null;
    $('#vs_history').hide();

    $('#vs_mr').change(function() {
        clearTimeout(typingTimer);
        const selectedMr = $(this).val();
        if (selectedMr && selectedMr.length >= minLength) { // Assuming a valid MR number has at least 9 characters
            typingTimer = setTimeout(FetchVitalSignRecord, doneTypingInterval);

        } else {
            $('#vs_history').hide();
        }
    });

    // $('#vs_mr').keyup(function() {
    //     clearTimeout(typingTimer);
    //     if ($('#vs_mr').val().length >= minLength) {
    //         typingTimer = setTimeout(FetchVitalSignRecord, doneTypingInterval);
    //     }
    //     else{
    //         $('#vs_history').hide();
    //     }
    // });
    // $('#vs_mr').keydown(function() {
    //     clearTimeout(typingTimer);
    // });

    
    function FetchVitalSignRecord() {
        $('#ajax-loader').show();
        var mrNumber = $("#vs_mr").val();
        if (mrNumber === "") {
            $('#vs_mr').addClass('requirefield');
            $('#ajax-loader').hide();
        }
        else
        {
            $('#vs_mr').find('.requirefield').removeClass('requirefield');
            var url = 'medicalrecord/patient-record/' + mrNumber;
            $.ajax({
                url: url,
                type: 'GET',
                dataType: 'json',
                success: function(response) {
                    if(response.error && response.error == '404')
                    {
                        $('.patientArrivedvs').hide();
                        Swal.fire({
                            text: 'Invald MR #',
                            icon: 'error',
                            confirmButtonText: 'OK',
                            allowOutsideClick: false
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#vital_details').hide();
                                $('#vs_history').hide();
                                $('#vital_details').removeClass('d-flex flex-column justify-content-end align-items-end');
                                $('#vs_pname').val('');
                                $('#vs_gender').val('');
                                $('#vs_age').val('');
                                $('#vs_emp').val('');
                                $('#vs_bcc').val('');
                                $('#vs_pcc').val('');
                                $('#sevice_id').val('');
                                $('#billingcc_id').val('');
                                $('#servicemode_id').val('');
                            }
                        });
                    }
                    else if (!response.patientInOutStatus)
                    {
                        $('.patientArrivedvs').hide();
                        $('#vs_pname').val(response.patientName);
                        $('#vs_gender').val(response.genderName);
                        $('#vs_age').val(response.patientDOB);
                        if (viewVitalSign) {
                            viewVitalSign.destroy();
                        }
                        $('#vs_history').show();
                        fetchVitalSignData(mrNumber) 
                    }
                    else{
                        $('.patientArrivedvs').show();
                        var siteName = response.siteName;
                        var serviceMode = response.serviceMode;
                        var serviceName = response.serviceName;
                        var serviceType = response.serviceType;
                        var serviceGroup = response.serviceGroup;
                        $('#vital_details').show();
                        $('#vital_details').addClass('d-flex flex-column justify-content-end align-items-end');
                        $('#vital_site').html('<b>Site</b> : ' + siteName);
                        $('#vital_smt').html('<b>Service Mode & Type</b> : ' + serviceMode + ' & ' + serviceType);
                        $('#vital_sgb').html('<b>Service Group & Booking</b> : ' + serviceGroup + ' & Booked');
                        $('#vital_service').html('<b>Service</b> : ' + serviceName);
                        $('#sevice_id').val(response.serviceId);
                        $('#billingcc_id').val(response.billingCCId);
                        $('#servicemode_id').val(response.serviceModeId);
                        $('#vs_pname').val(response.patientName);
                        $('#vs_gender').val(response.genderName);
                        $('#vs_age').val(response.patientDOB);
                        $('#vs_emp').val(response.empName);
                        $('#vs_bcc').val(response.billingCCName);
                        $('#vs_pcc').val(response.performingCCName);

                        if (viewVitalSign) {
                            viewVitalSign.destroy();
                        }
                        $('#vs_history').show();
                        fetchVitalSignData(mrNumber) 
                    }
                    $('#ajax-loader').hide();
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    $('#ajax-loader').hide();
                    console.log(textStatus, errorThrown);
                }
            });

        }
    }

    //Add Vital Sign
    $('#add_vitalsign').submit(function(e) {
        e.preventDefault();
        var data = SerializeForm(this);
        var resp = true;
        $(data).each(function(i, field){
            if (((field.value == '') || (field.value == null)) && (field.name != 'vs_details') 
            && (field.name != 'billingcc_id') && (field.name != 'servicemode_id') && (field.name != 'sevice_id'))
            {
                var FieldName = field.name;
                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                $( 'textarea[name= "' +FieldName +'"' ).focus(function() {
                    $('textarea[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $( 'textarea[name= "' +FieldName +'"' ).addClass('requirefield');
                resp = false;
            }
        });

        if(resp != false)
        {
            $.ajax({
                url: "/medicalrecord/addvitalsign",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {
                    let successMessageShown = false;
                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        if (!successMessageShown) {
                            Swal.fire({
                                text: fieldErrors,
                                icon: fieldName,
                                allowOutsideClick: false,
                                confirmButtonText: 'OK'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    $('#view-vitalsign').DataTable().ajax.reload();
                                    // $('#add_vitalsign')[0].reset();
                                    $('#add_vitalsign').find('input[type=text], input[type=number], textarea').not('#vs_mr, #vs_pname, #vs_gender, #vs_age, #vs_bcc, #vs_emp, #vs_pcc').val('');

                                    $('.text-danger').hide();
                                }
                            });
                    
                            successMessageShown = true; 
                        }
                    }
                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Vital Sign

    // Update Vital Sign Status
    $(document).on('click', '.vs_status ', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/medicalrecord/vitalsign-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
                var status = xhr.status;
                if(status == 200)
                {
                    $('#view-vitalsign').DataTable().ajax.reload();
                }
            },
            error: function(xhr, status, error) {
                console.log(error);
            }
        });
    });
    // Update Vital Sign Status

    //Update Vital Sign Modal
    $(document).on('click', '.edit-vs', function() {
        var vsId = $(this).data('vs-id');
        var url = '/medicalrecord/updatevitalsign/' + vsId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('#uvs_edt').val(formattedDateTime);
                $('#uvs-id').val(response.id);
                $('#uvs_sbp').val(response.SBP);
                $('#uvs_dbp').val(response.DBP);
                $('#uvs_pulse').val(response.Pulse);
                $('#uvs_temp').val(response.Temp);
                $('#uvs_rrate').val(response.RespiratoryRate);
                $('#uvs_weight').val(response.Weight);
                $('#uvs_height').val(response.Height);
                $('#uvs_score').val(response.Score);
                $('#uvs_details').val(response.Details);
                $('#edit-vitalsign').modal('show');
                $('#ajax-loader').hide();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Vital Sign Modal
    
    //Update Vital Sign
    $('#update_vitalsign').on('submit', function (event) {
        event.preventDefault();
        var formData = SerializeForm(this);
        var vsId;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'uvs-id') {
                vsId = formData[i].value;
                break;
            }
        }
        var url = '/medicalrecord/update-vitalsign/' + vsId;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });

            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-vitalsign').modal('hide');
                            $('#view-vitalsign').DataTable().ajax.reload();
                            $('#update_vitalsign')[0].reset();
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                console.log(xhr.responseText);
            }
        });
    });
    //Update Vital Sign
    
});
// Vital Signs

//Encounters And Procedures
$(document).ready(function() {
    var typingTimer;
    var doneTypingInterval = 200;
    var minLength = 7;


    $('#ep_details, #ep_table, #ep_history').hide();
    // $('#ep_mr').keyup(function() {
    //     clearTimeout(typingTimer);
    //     if ($('#ep_mr').val().length >= minLength) {
    //         typingTimer = setTimeout(FetchEncounterProcedureRecord, doneTypingInterval);
    //     }
    // });
    // $('#ep_mr').keydown(function() {
    //     clearTimeout(typingTimer);
    // });

    $('#ep_mr').change(function() {
        $('.addep').hide();
        clearTimeout(typingTimer);
        const selectedMr = $(this).val();
        if (selectedMr && selectedMr.length >= minLength) { 
            typingTimer = setTimeout(FetchEncounterProcedureRecord, doneTypingInterval);
            clearDataTable('#view-complain');
            // $('#icd-codes-container input[type="checkbox"]').prop('checked', false);
            $('#icd-codes-container').empty(); 
            selectedICDIds.clear(); 
            selectedICDCodes = []; 
            table.clear().draw(); 
            $('input[id="icdIDs"]').val('');
        } 
    });
    
    function FetchEncounterProcedureRecord() {
        $('#ajax-loader').show();
        var mrNumber = $("#ep_mr").val();
        if (mrNumber === "") {
            $('#ep_mr').addClass('requirefield');
            $('#ajax-loader').hide();
        }
        else
        {
            $('#ep_mr').find('.requirefield').removeClass('requirefield');
            var orderMedicationLink = $('#order-medication-link');
            var url = 'medicalrecord/patient-record/' + mrNumber;
            $.ajax({
                url: url,
                type: 'GET',
                dataType: 'json',
                success: function(response) {
                    if(response.error && response.error == '404')
                    {
                        $('.addep').hide();
                        Swal.fire({
                            text: 'Invald MR #',
                            icon: 'error',
                            confirmButtonText: 'OK',
                            allowOutsideClick: false
                        }).then((result) => {
                            if (result.isConfirmed) {
                                orderMedicationLink.attr('href', '#');
                                $('#ep_details, #ep_table, #ep_history').hide();
                                $('#ep_pname').val('');
                                $('#ep_gender').val('');
                                $('.ep_age').val('');
                                $('#ep_emp').val('');
                                $('#ep_bcc').val('');
                                $('#ep_pcc').val('');
                                $('#ep_sbp').val('');
                                $('#ep_dbp').val('');
                                $('#ep_pulse').val('');
                                $('#ep_temp').val('');
                                $('#ep_rrate').val('');
                                $('#ep_weight').val('');
                                $('#ep_height').val('');
                                $('#ep_score').val('');
                                $('.sevice_id').val('');
                                $('.billingcc_id').val('');
                                $('.servicemode_id').val('');
                                $('#icdIDs').val('');
                                $('#ep_details').removeClass('d-flex flex-column justify-content-end align-items-end');
                            }
                        });
                    }
                    else if (!response.patientInOutStatus)
                    {
                        $('.addep').hide();
                        $('#ep_details, #billing_details_section').hide();
                        $('#ep_table, #ep_history').show();

                        $('.sevice_id').val('');
                        $('.billingcc_id').val('');
                        $('.servicemode_id').val('');
                        $('#ep_emp').val('');
                        // $('#ep_user').val('');
                        $('#ep_bcc').val('');
                        $('#ep_pcc').val('');
                        $('#ep_site').html('');
                        $('#ep_smt').html('');
                        $('#ep_sgb').html('');
                        $('#ep_service').html('');

                        $('#ep_pname').val(response.patientName);
                        $('#ep_gender').val(response.genderName);
                        $('.ep_age').val(response.patientDOB);

                        fetchLatestVitalSignRecord(mrNumber);
                        fetchMedicalHistory(mrNumber);
                        fetchAllergyHistory(mrNumber);
                        fetchImmunizationHistory(mrNumber);
                        fetchDrugHistory(mrNumber);
                        fetchPastHistory(mrNumber);
                        fetchObstericHistory(mrNumber);
                        fetchSocialHistory(mrNumber);
                        fetchVisitBasedDetails(mrNumber);
                        var newHref = '/req-medication-consumption/' + mrNumber;
                        orderMedicationLink.attr('href', newHref);
                        $('.p_attachmentModal').attr('data-mr-number', mrNumber);

                        // if (viewVitalSign) {
                        //     viewVitalSign.destroy();
                        // }
                        $('#ajax-loader').hide();

                        // fetchVitalSignData(mrNumber) 
                    }
                    else{
                        $('.addep').show();
                        $('#ep_details, #ep_table, #ep_history,#billing_details_section').show();
                        var siteName = response.siteName;
                        var serviceMode = response.serviceMode;
                        var serviceName = response.serviceName;
                        var serviceType = response.serviceType;
                        var serviceGroup = response.serviceGroup;
                        $('#ep_details').addClass('d-flex flex-column justify-content-end align-items-end');
                        $('#ep_site').html('<b>Site</b> : ' + siteName);
                        $('#ep_smt').html('<b>Service Mode & Type</b> : ' + serviceMode + ' & ' + serviceType);
                        $('#ep_sgb').html('<b>Service Group & Booking</b> : ' + serviceGroup + ' & Booked');
                        $('#ep_service').html('<b>Service</b> : ' + serviceName);
                        $('#ep_pname').val(response.patientName);
                        $('#ep_gender').val(response.genderName);
                        $('.ep_age').val(response.patientDOB);
                        $('#ep_emp').val(response.empName);
                        $('#ep_bcc').val(response.billingCCName);
                        $('#ep_pcc').val(response.performingCCName);
                        $('.sevice_id').val(response.serviceId);
                        $('.billingcc_id').val(response.billingCCId);
                        $('.servicemode_id').val(response.serviceModeId);
                        $('.empid').val(response.empID);
                        $('.patientmr').val(mrNumber);
                        $('.physician').val(response.empID);

                        var newHref = '/req-medication-consumption/' + mrNumber;
                        orderMedicationLink.attr('href', newHref);
                        $('.p_attachmentModal').attr('data-mr-number', mrNumber);

                        fetchLatestVitalSignRecord(mrNumber);
                        fetchMedicalHistory(mrNumber);
                        fetchAllergyHistory(mrNumber);
                        fetchImmunizationHistory(mrNumber);
                        fetchDrugHistory(mrNumber);
                        fetchPastHistory(mrNumber);
                        fetchObstericHistory(mrNumber);
                        fetchSocialHistory(mrNumber);
                        fetchVisitBasedDetails(mrNumber);
                        $('#ajax-loader').hide();
                    }
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    $('#ajax-loader').hide();
                    console.log(textStatus, errorThrown);
                }
            });

        }
    }

    // Open Tracking Visit 
    $(document).on('click', '.viewVisitDetails', function() {
        var Id = $(this).data('id');
        $('#view-visitDetails').modal('show');
        $.ajax({
            url: 'medicalrecord/gettrackingvisit/' + Id,
            type: 'GET',
            success: function(resp) {
                if (resp.length > 0) {
                    var visitDetails = resp[0];
                    $('#visit_clinical_notes').text(visitDetails.clinical_notes);
                    var icdCodes = visitDetails.ICDCodes.split(',');
                    var icdDescriptions = visitDetails.ICDDescriptions.split(',');
                    var complaintsList = $('#complaints-list');
                    complaintsList.empty();
                    for (var i = 0; i < icdCodes.length; i++) {
                        complaintsList.append('<li><b>' + icdCodes[i] + '</b>: ' + icdDescriptions[i] + '</li>');
                    }
                }
            },
            error: function(xhr, status, error) {
                if (typeof errorCallback === "function") {
                    errorCallback(error);
                }
            }
        });
        $('#ajax-loader').hide();
    });
    // Open Tracking Visit 
    
    // Open Medical Diagnosis History Modal
    $(document).on('click', '.add_diagnosehistory', function() {
        $('#m_sincedate').bootstrapMaterialDatePicker({ weekStart : 0, time: false,  maxDate: new Date() });
        $('#m_tilledate').bootstrapMaterialDatePicker({ weekStart : 0, time: false,  maxDate: new Date() });
        $('#icd_desc').hide();
        // $('#m_icddiagnose').html("<option selected disabled value=''>Select ICD Diagnosis</option>").prop('disabled',false);
        $('#m_icddiagnose').select2({
            placeholder: 'Select ICD Diagnosis',
            ajax: {
                url: 'medicalrecord/getdiagnosisicdcode', 
                type: 'GET',
                dataType: 'json',
                delay: 250,
                data: function (params) {
                    return {
                        search: params.term || '',
                        page: params.page || 1
                    };
                },
                processResults: function (data, params) {
                    params.page = params.page || 1;
        
                    return {
                        results: data.data.map(function (item) {
                            return { id: item.id, text: `${item.code} - ${item.description}` };
                        }),
                        pagination: {
                            more: data.next_page_url !== null
                        }
                    };
                },
                cache: true
            },
            minimumInputLength: 0
        });
        
        // fetchDiagnosisICDCodes('#m_icddiagnose', function(data) {
        //     $.each(data, function(key, value) {
        //         $('#m_icddiagnose').append('<option value="' + value.id + '">' + value.code + '</option>');
        //     });
        // }, function(error) {
        //     console.log(error);
        // });
        $('#add-diagnosishistory').modal('show');
        $('#ajax-loader').hide();
    });

    // $('#m_icddiagnose').change(function() {
    //     var id = $(this).val();
    //     var data = {id: id};
    //     $.ajax({
    //         url: '/medicalrecord/getdiagnosisicdcode',
    //         method: 'GET',
    //         data: data,
    //         beforeSend: function() {
    //             $('#ajax-loader').show();
    //         },
    //         success: function(response,textStatus, xhr) {
    //             $('#icd_desc').show();
    //             $('#icdDesc').val(response[0].description);
    //             $('#ajax-loader').hide();
    //         },
    //         error: function(xhr, status, error) {
    //             console.log(error);
    //         }
    //     });
    // });
    // Open Medical Diagnosis History Modal

    //Add Medical Diagnosis History
    $('#add_diagnosishistory').submit(function(e) {
        e.preventDefault();
        var data = SerializeForm(this);
        var resp = true;
        $.ajax({
            url: "/medicalrecord/adddiagnosishistory",
            method: "POST",
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: data,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function(response) {
                let successMessageShown = false;
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'info')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#add_diagnosishistory')[0].reset();
                        }
                    });
                }
                else if (fieldName == 'success')
                {
                    if (!successMessageShown) {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#view-mdh').DataTable().ajax.reload();
                                $('#add_diagnosishistory')[0].reset();
                                $('#add-diagnosishistory').modal('hide');
                                $('.text-danger').hide();

                            }
                        });
                
                        successMessageShown = true; 
                    }
                }
            },
            error: function(error) {
                if (error.responseJSON && error.responseJSON.errors) {
                    $('.text-danger').show();
                    var errors = error.responseJSON.errors;
                    for (var fieldName in errors) {
                        var fieldErrors = errors[fieldName];
                        for (var i = 0; i < fieldErrors.length; i++) {
                            fieldName = '#'+fieldName + '_error';
                            $(fieldName).text(fieldErrors[i]);
                        }
                    }
                    Swal.close();
                }
            }
        });
    });
    //Add Medical Diagnosis History

    // Open Allergies Diagnosis History 
    $(document).on('click', '.add_allergieshistory', function() {
        $('#al_sincedate').bootstrapMaterialDatePicker({ weekStart : 0, time: false,  maxDate: new Date() });

        $('#add-allergieshistory').modal('show');
        $('#ajax-loader').hide();
    });
    // Open Allergies Diagnosis History 

    //Add Allergies History
    $('#add_allergieshistory').submit(function(e) {
        e.preventDefault();
        var data = SerializeForm(this);
        var resp = true;
        $.ajax({
            url: "/medicalrecord/addallergieshistory",
            method: "POST",
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: data,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function(response) {
                let successMessageShown = false;
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'info')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#add_allergieshistory')[0].reset();
                        }
                    });
                }
                else if (fieldName == 'success')
                {
                    if (!successMessageShown) {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#view-al').DataTable().ajax.reload();
                                $('#add_allergieshistory')[0].reset();
                                $('#add-allergieshistory').modal('hide');
                                $('.text-danger').hide();
                            }
                        });
                
                        successMessageShown = true; 
                    }
                }
            },
            error: function(error) {
                if (error.responseJSON && error.responseJSON.errors) {
                    $('.text-danger').show();
                    var errors = error.responseJSON.errors;
                    for (var fieldName in errors) {
                        var fieldErrors = errors[fieldName];
                        for (var i = 0; i < fieldErrors.length; i++) {
                            fieldName = '#'+fieldName + '_error';
                            $(fieldName).text(fieldErrors[i]);
                        }
                    }
                    Swal.close();
                }
            }
        });
    });
    //Add Allergies History

    // Open Immunization Diagnosis History 
    $(document).on('click', '.add_immunizationhistory', function() {
        $('#ih_date').bootstrapMaterialDatePicker({ weekStart : 0, time: false,  maxDate: new Date() });

        $('#add-immunizationhistory').modal('show');
        $('#ajax-loader').hide();
    });
    // Open Immunization History 

    //Add Immunization History
    $('#add_immunizationhistory').submit(function(e) {
        e.preventDefault();
        var data = SerializeForm(this);
        var resp = true;
        $.ajax({
            url: "/medicalrecord/addimmunizationhistory",
            method: "POST",
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: data,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function(response) {
                let successMessageShown = false;
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'info')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#add_immunizationhistory')[0].reset();
                        }
                    });
                }
                else if (fieldName == 'success')
                {
                    if (!successMessageShown) {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#view-ih').DataTable().ajax.reload();
                                $('#add_immunizationhistory')[0].reset();
                                $('#add-immunizationhistory').modal('hide');
                                $('.text-danger').hide();
                            }
                        });
                
                        successMessageShown = true; 
                    }
                }
            },
            error: function(error) {
                if (error.responseJSON && error.responseJSON.errors) {
                    $('.text-danger').show();
                    var errors = error.responseJSON.errors;
                    for (var fieldName in errors) {
                        var fieldErrors = errors[fieldName];
                        for (var i = 0; i < fieldErrors.length; i++) {
                            fieldName = '#'+fieldName + '_error';
                            $(fieldName).text(fieldErrors[i]);
                        }
                    }
                    Swal.close();
                }
            }
        });
    });
    //Add Immunization History

    // Open Drug  History 
    $(document).on('click', '.add_drughistory', function() {
        $('#add-drughistory').modal('show');
        $('#ajax-loader').hide();
    });
    // Open Drug History 

    //Add Drug History
    $('#add_drughistory').submit(function(e) {
        e.preventDefault();
        var data = SerializeForm(this);
        var resp = true;
        $.ajax({
            url: "/medicalrecord/adddrughistory",
            method: "POST",
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: data,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function(response) {
                let successMessageShown = false;
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'info')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#add_drughistory')[0].reset();
                        }
                    });
                }
                else if (fieldName == 'success')
                {
                    if (!successMessageShown) {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#view-dh').DataTable().ajax.reload();
                                $('#add_drughistory')[0].reset();
                                $('#add-drughistory').modal('hide');
                                $('.text-danger').hide();
                            }
                        });
                
                        successMessageShown = true; 
                    }
                }
            },
            error: function(error) {
                if (error.responseJSON && error.responseJSON.errors) {
                    $('.text-danger').show();
                    var errors = error.responseJSON.errors;
                    for (var fieldName in errors) {
                        var fieldErrors = errors[fieldName];
                        for (var i = 0; i < fieldErrors.length; i++) {
                            fieldName = '#'+fieldName + '_error';
                            $(fieldName).text(fieldErrors[i]);
                        }
                    }
                    Swal.close();
                }
            }
        });
    });
    //Add Drug History

    // Open Past  History 
    $(document).on('click', '.add_pasthistory', function() {
        $('#ph_date').bootstrapMaterialDatePicker({ weekStart : 0, time: false,  maxDate: new Date() });

        $('#add-pasthistory').modal('show');
        $('#ajax-loader').hide();
    });
    // Open Past History 
    
    //Add Past History
    $('#add_pasthistory').submit(function(e) {
        e.preventDefault();
        var data = SerializeForm(this);
        var resp = true;
        $.ajax({
            url: "/medicalrecord/addpasthistory",
            method: "POST",
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: data,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function(response) {
                let successMessageShown = false;
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'info')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#add_pasthistory')[0].reset();
                        }
                    });
                }
                else if (fieldName == 'success')
                {
                    if (!successMessageShown) {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#view-ph').DataTable().ajax.reload();
                                $('#add_pasthistory')[0].reset();
                                $('#add-pasthistory').modal('hide');
                                $('.text-danger').hide();
                            }
                        });
                
                        successMessageShown = true; 
                    }
                }
            },
            error: function(error) {
                if (error.responseJSON && error.responseJSON.errors) {
                    $('.text-danger').show();
                    var errors = error.responseJSON.errors;
                    for (var fieldName in errors) {
                        var fieldErrors = errors[fieldName];
                        for (var i = 0; i < fieldErrors.length; i++) {
                            fieldName = '#'+fieldName + '_error';
                            $(fieldName).text(fieldErrors[i]);
                        }
                    }
                    Swal.close();
                }
            }
        });
    });
    //Add Past History

    // Open Obsteric  History 
    $(document).on('click', '.add_obsterichistory', function() {
        $('#oh_date').bootstrapMaterialDatePicker({ weekStart : 0, time: false,  maxDate: new Date() });

        $('#add-obsterichistory').modal('show');
        $('#ajax-loader').hide();
    });
    // Open Obsteric History 

    //Add Obsteric History
    $('#add_obsterichistory').submit(function(e) {
        e.preventDefault();
        var data = SerializeForm(this);
        var resp = true;
        $.ajax({
            url: "/medicalrecord/addobsterichistory",
            method: "POST",
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: data,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function(response) {
                let successMessageShown = false;
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'info')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#add_obsterichistory')[0].reset();
                        }
                    });
                }
                else if (fieldName == 'success')
                {
                    if (!successMessageShown) {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#view-oh').DataTable().ajax.reload();
                                $('#add_obsterichistory')[0].reset();
                                $('#add-obsterichistory').modal('hide');
                                $('.text-danger').hide();
                            }
                        });
                
                        successMessageShown = true; 
                    }
                }
            },
            error: function(error) {
                if (error.responseJSON && error.responseJSON.errors) {
                    $('.text-danger').show();
                    var errors = error.responseJSON.errors;
                    for (var fieldName in errors) {
                        var fieldErrors = errors[fieldName];
                        for (var i = 0; i < fieldErrors.length; i++) {
                            fieldName = '#'+fieldName + '_error';
                            $(fieldName).text(fieldErrors[i]);
                        }
                    }
                    Swal.close();
                }
            }
        });
    });
    //Add Obsteric History
    
    // Open Social  History 
    $(document).on('click', '.add_socialhistory', function() {
        $('#sh_date').bootstrapMaterialDatePicker({ weekStart : 0, time: false,  maxDate: new Date() });
        $('#add-socialhistory').modal('show');
        $('#ajax-loader').hide();
    });
    // Open Social History 

    //Add Social History
    $('#add_socialhistory').submit(function(e) {
        e.preventDefault();
        var data = SerializeForm(this);
        var resp = true;
        $.ajax({
            url: "/medicalrecord/addsocialhistory",
            method: "POST",
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: data,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function(response) {
                let successMessageShown = false;
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'info')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#add_socialhistory')[0].reset();
                        }
                    });
                }
                else if (fieldName == 'success')
                {
                    if (!successMessageShown) {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            allowOutsideClick: false,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#view-sh').DataTable().ajax.reload();
                                $('#add_socialhistory')[0].reset();
                                $('#add-socialhistory').modal('hide');
                                $('.text-danger').hide();
                            }
                        });
                
                        successMessageShown = true; 
                    }
                }
            },
            error: function(error) {
                if (error.responseJSON && error.responseJSON.errors) {
                    $('.text-danger').show();
                    var errors = error.responseJSON.errors;
                    for (var fieldName in errors) {
                        var fieldErrors = errors[fieldName];
                        for (var i = 0; i < fieldErrors.length; i++) {
                            fieldName = '#'+fieldName + '_error';
                            $(fieldName).text(fieldErrors[i]);
                        }
                    }
                    Swal.close();
                }
            }
        });
    });
    //Add Social History

    // Open Complaint Modal 
    // $(document).on('click', '.add_complain', function() {
    //     // $('.icd_complain').html("<option selected disabled value=''>Select ICD Code</option>").prop('disabled',false);
    //     // fetchSymptomsICDCodes('.icd_complain', function(data) {
    //     //     $.each(data, function(key, value) {
    //     //         $('.icd_complain').append('<option value="' + value.id + '">' + value.code + '</option>');
    //     //     });
    //     // }, function(error) {
    //     //     console.log(error);
    //     // });

    //     $('#add-complain').modal('show');
    //     $('#ajax-loader').hide();
    // });

    $(document).on('click', '.add_complain', function () {
        currentPage = 1;
        searchQuery = '';
        $('#icd-search').val(''); 
        fetchSymptomsICDCodes(); 
        $('#add-complain').modal('show');
    });

    $('#icd-search').on('keyup', function () {
        searchQuery = $(this).val();
        currentPage = 1; 
        fetchSymptomsICDCodes(1, searchQuery);
    });

    $(document).on('click', '.load-more', function () {
        fetchSymptomsICDCodes(currentPage, searchQuery);
    });

   
    $(document).on('change', '#add-complain input[type="checkbox"]', function () {
        console.log('click');
        const icdId = $(this).data('id');
        if ($(this).is(':checked')) {
            selectedICDIds.add(icdId); 
        } else {
            selectedICDIds.delete(icdId); 
        }
    });
    // Open Complaint Modal 

    // Complain Table
    var table = $('#view-complain').DataTable({
        paging: false,
        searching: false,
        info: false,
        ordering: false,
        columns: [
            { title: "Code" },
            { title: "Description" }
        ]
    });

    // $('#add-complain .done').on('click', function() {
    //     var selectedICDCodes = [];
    //     $('#add-complain input[type="checkbox"]:checked').each(function() {
    //         var icdId = $(this).data('id');
    //         var icdCode = $(this).data('code');
    //         var description = $(this).data('name');
    //         selectedICDCodes.push({
    //             icdId: icdId,
    //             icdCode: icdCode,
    //             description: description
    //         });
    //     });
    //     table.clear().draw();
    //     selectedICDCodes.forEach(function(complaint) {
    //         table.row.add([
    //             complaint.icdCode,
    //             complaint.description
    //         ]).draw(false);
    //     });

    //     var icdIDs = selectedICDCodes.map(function(complaint) {
    //         return complaint.icdId;
    //     }).join(',');
    
    //     $('input[id="icdIDs"]').val(icdIDs);
    // });

    // Global array to track selected ICD codes
    let selectedICDCodes = [];

    $(document).on('change', '#add-complain input[type="checkbox"]', function () {
        const icdId = $(this).data('id');
        const icdCode = $(this).data('code');
        const description = $(this).data('name');

        if ($(this).is(':checked')) {
            if (!selectedICDCodes.some(complaint => complaint.icdId === icdId)) {
                selectedICDCodes.push({
                    icdId: icdId,
                    icdCode: icdCode,
                    description: description
                });
            }
        } else {
            selectedICDCodes = selectedICDCodes.filter(complaint => complaint.icdId !== icdId);
        }
        updateTable();
    });

    function updateTable() {
        table.clear().draw(); 
        selectedICDCodes.forEach(function (complaint) {
            table.row.add([
                complaint.icdCode,
                complaint.description
            ]).draw(false);
        });

        const icdIDs = selectedICDCodes.map(complaint => complaint.icdId).join(',');
        $('input[id="icdIDs"]').val(icdIDs);
    }

    $('#add-complain .done').on('click', function () {
        updateTable();
    });

    // Complain Table

    //Add Visit Based Details
    $('#add_visitdetails').submit(function(e) {
        e.preventDefault();
        var data = SerializeForm(this);
        var resp = true;

        $(data).each(function(i, field){
            if (field.name == 'Complaints[]'){
                if(field.value == '')
                {
                    alert('Please select at least one complaint.'); 
                    resp = false;
                }
            }
        });
        if(resp != false)
        {
            $.ajax({
                url: "/medicalrecord/addvisitbaseddetails",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {
                    let successMessageShown = false;
                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'info')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#add_visitdetails')[0].reset();
                            }
                        });
                    }
                    else if (fieldName == 'success')
                    {
                        if (!successMessageShown) {
                            Swal.fire({
                                text: fieldErrors,
                                icon: fieldName,
                                allowOutsideClick: false,
                                confirmButtonText: 'OK'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    var table = $('#view-complain').DataTable();
                                    table.clear().draw();
                                    table.destroy();
                                    $('#view-complain').DataTable({
                                        paging: false,
                                        searching: false,
                                        info: false,
                                        ordering: false,
                                    }); 
                                    $('#view-vbd').DataTable().ajax.reload();
                                    $('input[name="selectedicd[]"]').prop('checked', false);
                                    $('#add_visitdetails')[0].reset();
                                    $('#add-visitdetails').modal('hide');
                                    $('.text-danger').hide();
                                }
                            });
                    
                            successMessageShown = true; 
                        }
                    }
                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Visit Based Details

    // View Requisition For EPI
    var viewRequisitionEPI;
    function reqEPIDataTable(act) {
        if ($.fn.DataTable.isDataTable('.view-reqepi')) {
            $('.view-reqepi').DataTable().destroy();
        }
        viewRequisitionEPI = $('.view-reqepi').DataTable({
            processing: true,
            serverSide: true,
            ajax: {
                url: '/medicalrecord/viewreqepi',
                data: function(d) {
                    d.act = act;
                }
            },
            pageLength: 3,
            order: [[0, 'desc']],
            columns: [
                { data: 'id_raw', name: 'id_raw', visible: false },
                { data: 'mr', name: 'mr' },
                { data: 'remarks', name: 'remarks' },
                { data: 'service', name: 'service' },
                { data: 'billingCC', name: 'billingCC' },
                { data: 'status', name: 'status' },
                { data: 'action', name: 'action', orderable: false, searchable: false }
            ],
            columnDefs: [
                { targets: 1, width: "300px" },
                { targets: 2, width: "300px" },
                { targets: 3, width: "300px" },
                { targets: 4, width: "200px" },
                { targets: 6, width: "350px" },
            ]
        });

        viewRequisitionEPI.on('draw.dt', function() {
            $('[data-toggle="popover"]').popover({
                html: true
            });
        });
        // Show the loader before an AJAX request is made
        viewRequisitionEPI.on('preXhr.dt', function() {
            $('#ajax-loader').show();
        });
        // Hide the loader after the AJAX request is complete
        viewRequisitionEPI.on('xhr.dt', function() {
            $('#ajax-loader').hide();
        });
    }
    // View Requisition For EPI

    // Open Requisition For Encounter Modal 
    $(document).on('click', '.encounterModal', function() {
        // $('#add_reqe')[0].reset();
        $('#ajax-loader').show();
        let act = $(this).data('act'); 
        var orgId = $('#reqe_org').val();
        if(orgId)
        {
            fetchOrganizationSites(orgId, '#reqe_site', function(data) {
                $('#reqe_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', false);
                $.each(data, function(key, value) {
                    $('#reqe_site').append('<option value="' + value.id + '">' + value.name + '</option>');
                });
            });
        }
        else{
            $('#reqe_site').empty();
            $('#reqe_site').select2();
            $('#reqe_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled',true);
            OrgChangeSites('#reqe_org', '#reqe_site', '#add_reqe');
        }

        $('#reqe_sevice').html("<option selected disabled value=''>Select Service</option>").prop('disabled', true);
        SiteChangeService('#reqe_site', '#reqe_sevice', '#add_reqe');

        $('#reqe_servicemode').html("<option selected disabled value=''>Select Service Mode</option>").prop('disabled', true);
        ServiceChangeServiceModes('#reqe_site', '#reqe_sevice', '#reqe_servicemode', '#add_reqe');

        $('#reqe_physician').html("<option selected disabled value=''>Select Physician</option>").prop('disabled', true);
        SiteChangeEmployees('#reqe_site', '#reqe_physician', '#add_reqe');

        $('#reqe_billingcc').html("<option selected disabled value=''>Select Billing Cost Center</option>").prop('disabled', true);
        ServiceChangeCostCenter('#reqe_site', '#reqe_sevice', '#reqe_billingcc', '#add_reqe');

        reqEPIDataTable(act); 
        $('#ajax-loader').hide();
        $('#add-reqe').modal('show');

    });
    // Open Requisition For Encounter Modal 

    //Add Requisition For Encounter
    $('#add_reqe').submit(function(e) {
        e.preventDefault();
        handleRequisitionEPISubmission('#add_reqe','#add-reqe');
    });
    //Add Requisition For Encounter

    // Open Requisition For Procedure Modal 
    $(document).on('click', '.procedureModal', function() {
        // $('#add_reqp')[0].reset();
        let act = $(this).data('act'); 
        $('#add-reqp').modal('show');
        var orgId = $('#reqe_org').val();
        if(orgId)
        {
            fetchOrganizationSites(orgId, '#reqp_site', function(data) {
                $('#reqp_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', false);
                $.each(data, function(key, value) {
                    $('#reqp_site').append('<option value="' + value.id + '">' + value.name + '</option>');
                });
            });
        }
        else{
            $('#reqp_site').empty();
            $('#reqp_site').select2();
            $('#reqp_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled',true);
            OrgChangeSites('#reqp_org', '#reqp_site', '#add_reqp');
        }

        $('#reqp_sevice').html("<option selected disabled value=''>Select Service</option>").prop('disabled', true);
        SiteChangeService('#reqp_site', '#reqp_sevice', '#add_reqp');

        $('#reqp_servicemode').html("<option selected disabled value=''>Select Service Mode</option>").prop('disabled', true);
        ServiceChangeServiceModes('#reqp_site', '#reqp_sevice', '#reqp_servicemode', '#add_reqp');

        $('#reqp_physician').html("<option selected disabled value=''>Select Physician</option>").prop('disabled', true);
        SiteChangeEmployees('#reqp_site', '#reqp_physician', '#add_reqp');

        $('#reqp_billingcc').html("<option selected disabled value=''>Select Billing Cost Center</option>").prop('disabled', true);
        ServiceChangeCostCenter('#reqp_site', '#reqp_sevice', '#reqp_billingcc', '#add_reqp');
        
        reqEPIDataTable(act); 
        $('#ajax-loader').hide();

    });
    // Open Requisition For Procedure Modal 

    //Add Requisition For Procedure
    $('#add_reqp').submit(function(e) {
        e.preventDefault();
        handleRequisitionEPISubmission('#add_reqp','#add-reqp');
    });
    //Add Reqisition For Procedure

    // Open Requisition For Investigation Modal 
    $(document).on('click', '.investigationModal', function() {
        // $('#add_reqi')[0].reset();
        let act = $(this).data('act'); 
        $('#add-reqi').modal('show');
        var orgId = $('#reqi_org').val();
        if(orgId)
        {
            fetchOrganizationSites(orgId, '#reqi_site', function(data) {
                $('#reqi_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled', false);
                $.each(data, function(key, value) {
                    $('#reqi_site').append('<option value="' + value.id + '">' + value.name + '</option>');
                });
            });
        }
        else{
            $('#reqi_site').empty();
            $('#reqi_site').select2();
            $('#reqi_site').html("<option selected disabled value=''>Select Site</option>").prop('disabled',true);
            OrgChangeSites('#reqi_org', '#reqi_site', '#add_reqi');
        }

        $('#reqi_sevice').html("<option selected disabled value=''>Select Service</option>").prop('disabled', true);
        SiteChangeService('#reqi_site', '#reqi_sevice', '#add_reqi');

        $('#reqi_servicemode').html("<option selected disabled value=''>Select Service Mode</option>").prop('disabled', true);
        ServiceChangeServiceModes('#reqi_site', '#reqi_sevice', '#reqi_servicemode', '#add_reqi');

        $('#reqi_physician').html("<option selected disabled value=''>Select Physician</option>").prop('disabled', true);
        SiteChangeEmployees('#reqi_site', '#reqi_physician', '#add_reqi');

        $('#reqi_billingcc').html("<option selected disabled value=''>Select Billing Cost Center</option>").prop('disabled', true);
        ServiceChangeCostCenter('#reqi_site', '#reqi_sevice', '#reqi_billingcc', '#add_reqi');

        reqEPIDataTable(act); 
        $('#ajax-loader').hide();
    });
    // Open Requisition For Investigation Modal 

    //Add Requisition For Investigation
    $('#add_reqi').submit(function(e) {
        e.preventDefault();
        handleRequisitionEPISubmission('#add_reqi','#add-reqi');
    });
    //Add Requisition For Investigation

    // Update Requisition For EPI Status
    $(document).on('click', '.reqepi', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/medicalrecord/reqepi-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
                var status = xhr.status;
                if(status == 200)
                {
                    $('.view-reqepi').DataTable().ajax.reload();
                }
            },
            error: function(xhr, status, error) {
                console.log(error);
            }
        });
    });
    // Update Requisition For EPI Status

    //Update Requisition For EPI Modal
    $(document).on('click', '.edit-reqepi', function() {
        var reqepId = $(this).data('reqepiid');
        var url = '/medicalrecord/updatereqepi/' + reqepId;
        $('#ajax-loader').show();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                var formattedDateTime = moment(response.effective_timestamp, 'dddd DD MMMM YYYY - hh:mm A').format('dddd DD MMMM YYYY - hh:mm A');
                $('#u_repi_edt').val(formattedDateTime);
                $('#req_epiID').val(response.id);
                $('#u_repi_remarks').val(response.Remarks);
                // $('.modal').modal('hide');
                $('#edit-reqi').modal('show');
                $('#ajax-loader').hide();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Requisition For EPI Modal

    //Update Requisition For EPI
    $('#update_reqi').on('submit', function (event) {
        event.preventDefault();
        var formData = $(this).serializeArray();
        var Id;
        for (var i = 0; i < formData.length; i++) {
            if (formData[i].name === 'req_epiID') {
                Id = formData[i].value;
                break;
            }
        }
        var url = '/medicalrecord/update-reqepi/' + Id;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-reqi').modal('hide');
                            $('.view-reqepi').DataTable().ajax.reload(); // Refresh DataTable
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Requisition For EPI

    //Open Requisition Medication Consumption
    $(document).on('click', '.add-reqmc', function() {
        $('.duplicate:not(:first)').remove();
        $('#rmc_transaction_type').html("<option selected disabled value=''>Select Transaction Type</option>");
        fetchTransactionTypes('null', '#rmc_transaction_type', true, function(data) {
            if (data && data.length > 0) {
                $.each(data, function(key, value) {
                    $('#rmc_transaction_type').append('<option data-type="' + value.transaction_type + '" value="' + value.id + '">' + value.name + '</option>');
                });
            }
        });
        $(".rmc_inv_generic, .rmc_route, .rmc_frequency").each(function() {
            $(this).val($(this).find("option:first").val()).change();
        });

        // $('#rmc_inv_generic').html("<option selected disabled value=''>Select Item Generic</option>").prop('disabled',true);
        // TypeChangeInventoryGeneric('#rmc_transaction_type', '#rmc_inv_generic', '#add_reqmc');

        $('#add-reqmc').modal('show');

    });
    //Open Requisition Medication Consumption

    //Add Requisition Medication Consumption
    $('#add_reqmc').submit(function(e) {
        e.preventDefault();
        var data = SerializeForm(this);
        var resp = true;
        $(data).each(function(i, field){
            // if ((field.value == '') || (field.value == null) && field.name != 'rmc_remarks')
            if ((field.value == '' || field.value == null) && field.name != 'rmc_remarks') 
            {
                var FieldName = field.name;

                $( 'input[name= "' +FieldName +'"' ).addClass('requirefield');
                $( 'input[name= "' +FieldName +'"' ).focus(function() {
                    $('input[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $('select[name= "' +FieldName +'"' ).next('.select2-container').find('.select2-selection').addClass('requirefield');
                $('select[name= "' +FieldName +'"' ).on('select2:open', function() {
                    $(this).next('.select2-container').find('.select2-selection').removeClass("requirefield");
                });
                $( 'textarea[name= "' +FieldName +'"' ).focus(function() {
                    $('textarea[name= "' +FieldName +'"' ).removeClass("requirefield");
                })
                $( 'textarea[name= "' +FieldName +'"' ).addClass('requirefield');
                resp = false;
            }
        });

        if(resp != false)
        {
            $.ajax({
                url: "/medicalrecord/addrmc",
                method: "POST",
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                data: data,
                beforeSend: function() {
                    Swal.fire({
                        title: "Processing",
                        allowOutsideClick: false,
                        willOpen: () => {
                            Swal.showLoading();
                        },
                        showConfirmButton: false
                    });
                },
                success: function(response) {
                    let successMessageShown = false;
                    for (var fieldName in response) {
                        var fieldErrors = response[fieldName];
                    }
                    if (fieldName == 'error')
                    {
                        Swal.fire({
                            text: fieldErrors,
                            icon: fieldName,
                            confirmButtonText: 'OK'
                        })
                    }
                    else if (fieldName == 'success')
                    {
                        if (!successMessageShown) {
                            Swal.fire({
                                text: fieldErrors,
                                icon: fieldName,
                                allowOutsideClick: false,
                                confirmButtonText: 'OK'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    $('#view-reqmc').DataTable().ajax.reload();
                                    $('#add_reqmc')[0].reset();
                                    $('#add-reqmc').modal('hide');

                                    $('.text-danger').hide();
                                }
                            });
                    
                            successMessageShown = true; 
                        }
                    }
                },
                error: function(error) {
                    if (error.responseJSON && error.responseJSON.errors) {
                        $('.text-danger').show();
                        var errors = error.responseJSON.errors;
                        for (var fieldName in errors) {
                            var fieldErrors = errors[fieldName];
                            for (var i = 0; i < fieldErrors.length; i++) {
                                fieldName = '#'+fieldName + '_error';
                                $(fieldName).text(fieldErrors[i]);
                            }
                        }
                        Swal.close();
                    }
                }
            });
        }
    });
    //Add Requisition Medication Consumption

    // View Requisition Medication Consumption
    var pathArray = window.location.pathname.split('/');
    var mrPath = pathArray.length - 1;
    var mrPath = pathArray[mrPath];
    var viewReqMC =  $('#view-reqmc').DataTable({
        processing: true,
        serverSide: true,
        ajax: '/medicalrecord/viewreqmc/' + mrPath,
        order: [[1, 'desc']],
        columns: [
            { data: 'id_raw', name: 'id_raw', visible: false },
            { data: 'id', name: 'id'},
            { data: 'patientDetails', name: 'patientDetails' },
            { data: 'InventoryDetails', name: 'InventoryDetails' },
            { data: 'status', name: 'status' },
            { data: 'action', name: 'action', orderable: false, searchable: false }
        ],
        columnDefs: [
            {
                targets: 1,
                width: "350px"
            },
            {
                targets: 2,
                width: "350px"
            },
            {
                targets: 3,
                width: "400px"
            },
            {
                targets: 5,
                width: "300px"
            }
        ]
    });
    viewReqMC.on('draw.dt', function() {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    viewReqMC.on('preXhr.dt', function() {
        $('#ajax-loader').show();
    });
    viewReqMC.on('xhr.dt', function() {
        $('#ajax-loader').hide();
    });
    // View Requisition Medication Consumption

    // Update Requisition Medication Consumption Status
    $(document).on('click', '.rmc_status', function() {
        var id = $(this).data('id');
        var status = $(this).data('status');
        var data = {id: id,status: status};

        $.ajax({
            url: '/medicalrecord/reqmc-status',
            method: 'GET',
            data: data,
            beforeSend: function() {
                $('#ajax-loader').show();
            },
            success: function(response,textStatus, xhr) {
                var status = xhr.status;
                if(status == 200)
                {
                    $('#view-reqmc').DataTable().ajax.reload();
                }
            },
            error: function(xhr, status, error) {
                console.log(error);
            }
        });
    });
    // Update Requisition Medication Consumption Status

    //Update Requisition Medication Consumption Modal
    $(document).on('click', '.edit-reqmc', function() {
        var Id = $(this).data('reqmc-id');
        $('#ajax-loader').show();
        var url = '/medicalrecord/updatereqmc/' + Id;
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                $('#ajax-loader').hide();
                $('#u_rmc_remarks').val(response.Remarks);
                $('#reqmc_id').val(response.id);
                $('#u_rmc_transaction_type').html("<option selected value='"+response.TransactionTypeId+"'>" + response.TransactionType + "</option>");
                fetchTransactionTypes(response.siteId, '#u_mc_transactionType', true, function(data) {
                    if (data && data.length > 0) {
                        $.each(data, function(key, value) {
                            if(value.id != response.TransactionTypeId){
                                $('#u_rmc_transaction_type').append('<option value="' + value.id + '">' + value.name + '</option>');
                            }
                        });
                    } 
                });
                $('#u_rmc_inv_location').val(response.ServiceLocationId).change();

                var genericIds = response.genericIds.split(',');
                var genericNames = response.genericNames.split(',');
                var dose = response.Dose.split(',');
                var days = response.Days.split(',');
                var routeIds = response.routeIds.split(',');
                var routeNames = response.routeNames.split(',');
                var frequencyIds = response.frequencyIds.split(',');
                var frequencyNames = response.frequencyNames.split(',');

                $('.uduplicate').empty();
                for (var i = 0; i < genericIds.length; i++) {
                    var GenericField = '<div class="col-md-6">' +
                        '<div class="form-group">' +
                        '<label class="control-label">Update Inventory Generic</label>' +
                        '<select class="form-control selecter p-0 u_rmc_inv_generic" name="u_rmc_inv_generic[]" id="u_rmc_inv_generic' + i + '" required style="color:#222d32">' +
                        '<option value="' + genericIds[i] + '"> ' + genericNames[i] + '</option>' +
                        '</select>' +
                        '</div>' +
                        '</div>';

                    (function (index) {
                        fetchAllInventoryGeneric('#u_rmc_inv_generic' + index, function (data) {
                            if (data.length > 0) {
                                $.each(data, function (key, value) {
                                    if ($.inArray(value.id.toString(), genericIds[index]) === -1) 
                                    {
                                        $('#u_rmc_inv_generic' + index).append('<option value="' + value.id + '">' + value.name + '</option>');
                                    }
                                });
                                $('#u_rmc_inv_generic' + index).select2();
                            }
                        });
                    })(i); 

                    var routeField = '<div class="col-md-6">' +
                        '<div class="form-group">' +
                        '<label class="control-label">Update Route</label>' +
                        '<select class="form-control selecter p-0 u_rmc_route" name="u_rmc_route[]" id="u_rmc_route' + i + '" required style="color:#222d32">' +
                        '<option value="' + routeIds[i] + '"> ' + routeNames[i] + '</option>' +
                        '</select>' +
                        '</div>' +
                        '</div>';

                    (function (index) {
                        fetchMedicationRoute('#u_rmc_route' + index, function (data) {
                            if (data.length > 0) {
                                $.each(data, function (key, value) {
                                    if ($.inArray(value.id.toString(), routeIds) === -1) {
                                        $('#u_rmc_route' + index).append('<option value="' + value.id + '">' + value.name + '</option>');
                                    }
                                });
                                $('#u_rmc_route' + index).select2();
                            }
                        });
                    })(i);



                    var frequencyField = '<div class="col-md-6">' +
                        '<div class="form-group">' +
                        '<label class="control-label">Update Frequency</label>' +
                        '<select class="form-control selecter p-0 u_rmc_frequency" name="u_rmc_frequency[]" id="u_rmc_frequency' + i + '" required style="color:#222d32">' +
                        '<option value="' + frequencyIds[i] + '"> ' + frequencyNames[i] + '</option>' +
                        '</select>' +
                        '</div>' +
                        '</div>';

                    (function (index) {
                        fetchMedicationFrequency('#u_rmc_frequency' + index, function (data) {
                            if (data.length > 0) {
                                $.each(data, function (key, value) {
                                    if ($.inArray(value.id.toString(), frequencyIds[index]) === -1) 
                                    {
                                        $('#u_rmc_frequency' + index).append('<option value="' + value.id + '">' + value.name + '</option>');
                                    }
                                });
                                $('#u_rmc_frequency' + index).select2();
                            }
                        });
                    })(i); 

                    var doseField = '<div class="col-md-6">' +
                        '<div class="form-group row">' +
                        '<div class="col-md-12">' +
                        '<div class="form-group has-custom m-b-5">' +
                        '<label class="control-label">Update Dose</label>' +
                        '<input type="number" class="form-control input-sm" required name="u_rmc_dose[]" value="' + dose[i] + '">' +
                        '</div>' +
                        '<span class="text-danger u_rmc_dose_error"></span>' +
                        '</div>' +
                        '</div>' +
                        '</div>';
        
                    var daysField = '<div class="col-md-6">' +
                        '<div class="form-group row">' +
                        '<div class="col-md-12">' +
                        '<div class="form-group has-custom m-b-5">' +
                        '<label class="control-label">Update Days</label>' +
                        '<input type="number" class="form-control input-sm" required name="u_rmc_days[]"  value="' + days[i] + '">' +
                        '</div>' +
                        '</div>' +
                        '</div>' +
                        '</div>';
        
                   
                    var row =+ '</div>';
                    $('.uduplicate').append('<div class="row pt-3 pb-1 rmc_details" style="border: 1px solid #939393;">' + GenericField + doseField + routeField + frequencyField + daysField +'</div>');
                }

                $('#edit-reqmc').modal('show');
            },
            error: function(jqXHR, textStatus, errorThrown) {
                $('#ajax-loader').hide();
                console.log(textStatus, errorThrown);
            }
        });
    });
    //Update Requisition Medication Consumption Modal

    //Update Requisition For Medication Consumption
    $('#update_reqmc').on('submit', function (event) {
        event.preventDefault();
        var formData = SerializeForm(this);
        var Id = $('#reqmc_id').val();
        var url = '/medicalrecord/update-reqmc/' + Id;
        $.ajax({
            url: url,
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            beforeSend: function() {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                    var fieldName = fieldName;
                }
                if (fieldName == 'error')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        confirmButtonText: 'OK'
                    })
                }
                else if (fieldName == 'success')
                {
                    Swal.fire({
                        text: fieldErrors,
                        icon: fieldName,
                        allowOutsideClick: false,
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#edit-reqmc').modal('hide');
                            $('#view-reqmc').DataTable().ajax.reload(); 
                            $('.text-danger').hide();
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.log(xhr.responseText);
            }
        });
    });
    //Update Requisition For Medication Consumption

    // Open Patient Attachments Modal 
    $(document).on('click', '.p_attachmentModal', function() {
        // $('#add_reqe')[0].reset();
        // let act = $(this).data('act'); 
        var mrNumber = $(this).data('mr-number'); // Get the MR number from the button
        if ($.fn.DataTable.isDataTable('#view-pattachment')) {
            $('#view-pattachment').DataTable().destroy();
        }
    
        loadPatientAttachmentDataTable(mrNumber);

        $('#add-pattachments').modal('show');
        $('#ajax-loader').hide();
        // reqEPIDataTable(act); 
    });
    $(document).on('click', '.downloadattachements', function () {
        var attachmentPaths = $(this).data('path'); // Get the file paths from the button's data attribute
        var id = $(this).data('id'); // Get the ID from the button's data attribute
    
        if (attachmentPaths) {
            // Split the attachmentPaths by commas
            var files = attachmentPaths.split(',');
    
            // Iterate over each file and trigger a download
            files.forEach(function (file) {
                var tempLink = document.createElement('a');
                tempLink.href = '/assets/patientattachment/' + id + '_' + file.trim(); // Combine the ID and file name
                console.log(tempLink.href); // Log the file path for debugging
                tempLink.download = file.trim(); // Set the download file name
                tempLink.target = '_blank'; // Open in a new tab if necessary
                tempLink.click(); // Trigger the download
            });
        } else {
            Swal.fire({
                text: 'No attachments available for download.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        }
    });
    
    
    // Open Patient Attachments Modal  

    //Add Patient Attachments
    $('#add_patientattachment').submit(function (e) {
        e.preventDefault();
        var formData = new FormData(this);
        $('.text-danger').text('');
    
        $.ajax({
            url: "/medicalrecord/addpatientattachment",
            method: "POST",
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: formData,
            processData: false,
            contentType: false, 
            beforeSend: function () {
                Swal.fire({
                    title: "Processing",
                    allowOutsideClick: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                    showConfirmButton: false
                });
            },
            success: function (response) {
                for (var fieldName in response) {
                    var fieldErrors = response[fieldName];
                }
                if (fieldName === 'success') {
                    Swal.fire({
                        text: fieldErrors,
                        icon: 'success',
                        confirmButtonText: 'OK'
                    }).then(() => {
                        $('#add_patientattachment')[0].reset();
                        $('#view-pattachment').DataTable().ajax.reload();
                        $('.dropify').dropify(); 
                    });
                } else {
                    Swal.fire({
                        text: fieldErrors,
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                }
            },
            error: function (error) {
                if (error.responseJSON && error.responseJSON.errors) {
                    var errors = error.responseJSON.errors;
                    for (var fieldName in errors) {
                        var fieldErrors = errors[fieldName];
                        $('#' + fieldName + '_error').text(fieldErrors.join(', '));
                    }
                }
                Swal.close();
            }
        });
    });
    //Add Patient Attachments
});
//Encounters And Procedures

//END